// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TelegramCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CloudDataKit
import CoreTelephony
import CryptoUtils
import DarwinDirStat
import EncryptionProviderKit
import Foundation
import ManagedFileKit
import MtProtoKit
import MurMurHash32
import NetworkLogging
import Photos
import PostboxKit
import RangeSetKit
import ReachabilityKit
import Swift
import SwiftSignalKit
import TelegramApi
@_exported import TelegramCore
import UIKit
import _Concurrency
import _StringProcessing
public typealias EngineTempBox = PostboxKit.TempBox
public typealias EngineTempBoxFile = PostboxKit.TempBoxFile
extension PostboxKit.MediaResourceUserContentType {
  public init(file: TelegramCore.TelegramMediaFile)
}
final public class EngineMediaResource : Swift.Equatable {
  public enum CacheTimeout {
    case `default`
    case shortLived
    public static func == (a: TelegramCore.EngineMediaResource.CacheTimeout, b: TelegramCore.EngineMediaResource.CacheTimeout) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct ByteRange {
    public enum Priority {
      case `default`
      case elevated
      case maximum
      public static func == (a: TelegramCore.EngineMediaResource.ByteRange.Priority, b: TelegramCore.EngineMediaResource.ByteRange.Priority) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var range: Swift.Range<Swift.Int>
    public var priority: TelegramCore.EngineMediaResource.ByteRange.Priority
    public init(range: Swift.Range<Swift.Int>, priority: TelegramCore.EngineMediaResource.ByteRange.Priority)
  }
  final public class Fetch {
    public enum Result {
      case dataPart(resourceOffset: Swift.Int64, data: Foundation.Data, range: Swift.Range<Swift.Int64>, complete: Swift.Bool)
      case resourceSizeUpdated(Swift.Int64)
      case progressUpdated(Swift.Float)
      case replaceHeader(data: Foundation.Data, range: Swift.Range<Swift.Int64>)
      case moveLocalFile(path: Swift.String)
      case moveTempFile(file: PostboxKit.TempBoxFile)
      case copyLocalItem(PostboxKit.MediaResourceDataFetchCopyLocalItem)
      case reset
    }
    public enum Error {
      case generic
      public static func == (a: TelegramCore.EngineMediaResource.Fetch.Error, b: TelegramCore.EngineMediaResource.Fetch.Error) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    final public let signal: () -> SwiftSignalKit.Signal<TelegramCore.EngineMediaResource.Fetch.Result, TelegramCore.EngineMediaResource.Fetch.Error>
    public init(_ signal: @escaping () -> SwiftSignalKit.Signal<TelegramCore.EngineMediaResource.Fetch.Result, TelegramCore.EngineMediaResource.Fetch.Error>)
    @objc deinit
  }
  final public class ResourceData {
    final public let path: Swift.String
    final public let availableSize: Swift.Int64
    final public let isComplete: Swift.Bool
    public init(path: Swift.String, availableSize: Swift.Int64, isComplete: Swift.Bool)
    @objc deinit
  }
  public enum FetchStatus : Swift.Equatable {
    case Remote(progress: Swift.Float)
    case Local
    case Fetching(isActive: Swift.Bool, progress: Swift.Float)
    case Paused(progress: Swift.Float)
    public static func == (a: TelegramCore.EngineMediaResource.FetchStatus, b: TelegramCore.EngineMediaResource.FetchStatus) -> Swift.Bool
  }
  public struct Id : Swift.Equatable, Swift.Hashable {
    public var stringRepresentation: Swift.String
    public init(_ stringRepresentation: Swift.String)
    public init(_ id: PostboxKit.MediaResourceId)
    public static func == (a: TelegramCore.EngineMediaResource.Id, b: TelegramCore.EngineMediaResource.Id) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(_ resource: PostboxKit.MediaResource)
  final public func _asResource() -> PostboxKit.MediaResource
  final public var id: TelegramCore.EngineMediaResource.Id {
    get
  }
  public static func == (lhs: TelegramCore.EngineMediaResource, rhs: TelegramCore.EngineMediaResource) -> Swift.Bool
  @objc deinit
}
extension TelegramCore.EngineMediaResource.ResourceData {
  convenience public init(_ data: PostboxKit.MediaResourceData)
}
extension TelegramCore.EngineMediaResource.FetchStatus {
  public init(_ status: PostboxKit.MediaResourceStatus)
  public func _asStatus() -> PostboxKit.MediaResourceStatus
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class Resources {
    final public func preUpload(id: Swift.Int64, encrypt: Swift.Bool, tag: PostboxKit.MediaResourceFetchTag?, source: SwiftSignalKit.Signal<PostboxKit.MediaResourceData, SwiftSignalKit.NoError>, onComplete: (() -> Swift.Void)? = nil)
    final public func collectCacheUsageStats(peerId: PostboxKit.PeerId? = nil, additionalCachePaths: [Swift.String] = [], logFilesPath: Swift.String? = nil) -> SwiftSignalKit.Signal<TelegramCore.CacheUsageStatsResult, SwiftSignalKit.NoError>
    final public func collectStorageUsageStats() -> SwiftSignalKit.Signal<TelegramCore.AllStorageUsageStats, SwiftSignalKit.NoError>
    final public func renderStorageUsageStatsMessages(stats: TelegramCore.StorageUsageStats, categories: [TelegramCore.StorageUsageStats.CategoryKey], existingMessages: [TelegramCore.EngineMessage.Id : PostboxKit.Message]) -> SwiftSignalKit.Signal<[TelegramCore.EngineMessage.Id : PostboxKit.Message], SwiftSignalKit.NoError>
    final public func clearStorage(peerId: TelegramCore.EnginePeer.Id?, categories: [TelegramCore.StorageUsageStats.CategoryKey], includeMessages: [PostboxKit.Message], excludeMessages: [PostboxKit.Message]) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func clearStorage(peerIds: Swift.Set<TelegramCore.EnginePeer.Id>, includeMessages: [PostboxKit.Message], excludeMessages: [PostboxKit.Message]) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func clearStorage(messages: [PostboxKit.Message]) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func clearCachedMediaResources(mediaResourceIds: Swift.Set<PostboxKit.MediaResourceId>) -> SwiftSignalKit.Signal<Swift.Float, SwiftSignalKit.NoError>
    final public func reindexCacheInBackground(lowImpact: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func data(id: TelegramCore.EngineMediaResource.Id, attemptSynchronously: Swift.Bool = false) -> SwiftSignalKit.Signal<TelegramCore.EngineMediaResource.ResourceData, SwiftSignalKit.NoError>
    final public func custom(id: Swift.String, fetch: TelegramCore.EngineMediaResource.Fetch?, cacheTimeout: TelegramCore.EngineMediaResource.CacheTimeout = .default, attemptSynchronously: Swift.Bool = false) -> SwiftSignalKit.Signal<TelegramCore.EngineMediaResource.ResourceData, SwiftSignalKit.NoError>
    final public func httpData(url: Swift.String) -> SwiftSignalKit.Signal<Foundation.Data, TelegramCore.EngineMediaResource.Fetch.Error>
    final public func fetchAlbumCover(file: TelegramCore.FileMediaReference?, title: Swift.String, performer: Swift.String, isThumbnail: Swift.Bool) -> SwiftSignalKit.Signal<TelegramCore.EngineMediaResource.Fetch.Result, TelegramCore.EngineMediaResource.Fetch.Error>
    final public func cancelAllFetches(id: Swift.String)
    @objc deinit
  }
}
public class TranslationMessageAttribute : PostboxKit.MessageAttribute, Swift.Equatable {
  final public let text: Swift.String
  final public let entities: [TelegramCore.MessageTextEntity]
  final public let toLang: Swift.String
  public var associatedPeerIds: [PostboxKit.PeerId] {
    get
  }
  public init(text: Swift.String, entities: [TelegramCore.MessageTextEntity], toLang: Swift.String)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.TranslationMessageAttribute, rhs: TelegramCore.TranslationMessageAttribute) -> Swift.Bool
  @objc deinit
}
public struct WebAuthorization : Swift.Equatable {
  public let hash: Swift.Int64
  public let botId: PostboxKit.PeerId
  public let domain: Swift.String
  public let browser: Swift.String
  public let platform: Swift.String
  public let dateCreated: Swift.Int32
  public let dateActive: Swift.Int32
  public let ip: Swift.String
  public let region: Swift.String
  public static func == (lhs: TelegramCore.WebAuthorization, rhs: TelegramCore.WebAuthorization) -> Swift.Bool
}
final public class SynchronizeMarkAllUnseenPersonalMessagesOperation : PostboxKit.PostboxCoding {
  final public let maxId: PostboxKit.MessageId.Id
  public init(maxId: PostboxKit.MessageId.Id)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
final public class SynchronizeMarkAllUnseenReactionsOperation : PostboxKit.PostboxCoding {
  final public let maxId: PostboxKit.MessageId.Id
  public init(maxId: PostboxKit.MessageId.Id)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public struct SecureIdConfiguration : Swift.Codable {
  public let nativeLanguageByCountry: [Swift.String : Swift.String]
  public init(jsonString: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
final public class CachedSecureIdConfiguration : Swift.Codable {
  final public let value: TelegramCore.SecureIdConfiguration
  final public let hash: Swift.Int32
  public init(value: TelegramCore.SecureIdConfiguration, hash: Swift.Int32)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public func fetchCloudMediaLocation(account: TelegramCore.Account, resource: TelegramCore.TelegramMediaResource, datacenterId: Swift.Int, size: Swift.Int64?, intervals: SwiftSignalKit.Signal<[(Swift.Range<Swift.Int64>, PostboxKit.MediaBoxFetchPriority)], SwiftSignalKit.NoError>, parameters: PostboxKit.MediaResourceFetchParameters?) -> SwiftSignalKit.Signal<PostboxKit.MediaResourceDataFetchResult, PostboxKit.MediaResourceDataFetchError>
public struct SecureIdEmailValue : Swift.Equatable {
  public let email: Swift.String
  public init(email: Swift.String)
  public static func == (lhs: TelegramCore.SecureIdEmailValue, rhs: TelegramCore.SecureIdEmailValue) -> Swift.Bool
}
public struct UserLimitsConfiguration : Swift.Equatable {
  public let maxPinnedChatCount: Swift.Int32
  public let maxChannelsCount: Swift.Int32
  public let maxPublicLinksCount: Swift.Int32
  public let maxSavedGifCount: Swift.Int32
  public let maxFavedStickerCount: Swift.Int32
  public let maxFoldersCount: Swift.Int32
  public let maxFolderChatsCount: Swift.Int32
  public let maxCaptionLength: Swift.Int32
  public let maxUploadFileParts: Swift.Int32
  public let maxAboutLength: Swift.Int32
  public let maxAnimatedEmojisInText: Swift.Int32
  public let maxReactionsPerMessage: Swift.Int32
  public static var defaultValue: TelegramCore.UserLimitsConfiguration {
    get
  }
  public init(maxPinnedChatCount: Swift.Int32, maxChannelsCount: Swift.Int32, maxPublicLinksCount: Swift.Int32, maxSavedGifCount: Swift.Int32, maxFavedStickerCount: Swift.Int32, maxFoldersCount: Swift.Int32, maxFolderChatsCount: Swift.Int32, maxCaptionLength: Swift.Int32, maxUploadFileParts: Swift.Int32, maxAboutLength: Swift.Int32, maxAnimatedEmojisInText: Swift.Int32, maxReactionsPerMessage: Swift.Int32)
  public static func == (a: TelegramCore.UserLimitsConfiguration, b: TelegramCore.UserLimitsConfiguration) -> Swift.Bool
}
public enum GetMessagesStrategy {
  case local
  case cloud(skipLocal: Swift.Bool)
}
public protocol EncryptedMediaResource {
  func decrypt(data: Foundation.Data, params: Any) -> Foundation.Data?
}
public enum EnqueueMessageGrouping {
  case none
  case auto
  public static func == (a: TelegramCore.EnqueueMessageGrouping, b: TelegramCore.EnqueueMessageGrouping) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum EnqueueMessage {
  case message(text: Swift.String, attributes: [PostboxKit.MessageAttribute], inlineStickers: [PostboxKit.MediaId : PostboxKit.Media], mediaReference: TelegramCore.AnyMediaReference?, replyToMessageId: PostboxKit.MessageId?, localGroupingKey: Swift.Int64?, correlationId: Swift.Int64?, bubbleUpEmojiOrStickersets: [PostboxKit.ItemCollectionId])
  case forward(source: PostboxKit.MessageId, threadId: Swift.Int64?, grouping: TelegramCore.EnqueueMessageGrouping, attributes: [PostboxKit.MessageAttribute], correlationId: Swift.Int64?)
  public func withUpdatedReplyToMessageId(_ replyToMessageId: PostboxKit.MessageId?) -> TelegramCore.EnqueueMessage
  public func withUpdatedAttributes(_ f: ([PostboxKit.MessageAttribute]) -> [PostboxKit.MessageAttribute]) -> TelegramCore.EnqueueMessage
  public func withUpdatedGroupingKey(_ f: (Swift.Int64?) -> Swift.Int64?) -> TelegramCore.EnqueueMessage
  public func withUpdatedCorrelationId(_ value: Swift.Int64?) -> TelegramCore.EnqueueMessage
  public var groupingKey: Swift.Int64? {
    get
  }
}
public func enqueueMessages(account: TelegramCore.Account, peerId: PostboxKit.PeerId, messages: [TelegramCore.EnqueueMessage]) -> SwiftSignalKit.Signal<[PostboxKit.MessageId?], SwiftSignalKit.NoError>
public func enqueueMessagesToMultiplePeers(account: TelegramCore.Account, peerIds: [PostboxKit.PeerId], threadIds: [PostboxKit.PeerId : Swift.Int64], messages: [TelegramCore.EnqueueMessage]) -> SwiftSignalKit.Signal<[PostboxKit.MessageId], SwiftSignalKit.NoError>
public func resendMessages(account: TelegramCore.Account, messageIds: [PostboxKit.MessageId]) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public enum CloudMediaResourceLocation : Swift.Equatable {
  case photo(id: Swift.Int64, accessHash: Swift.Int64, fileReference: Foundation.Data, thumbSize: Swift.String)
  case file(id: Swift.Int64, accessHash: Swift.Int64, fileReference: Foundation.Data, thumbSize: Swift.String)
  case peerPhoto(peer: TelegramCore.PeerReference, fullSize: Swift.Bool, volumeId: Swift.Int64, localId: Swift.Int64)
  case stickerPackThumbnail(packReference: TelegramCore.StickerPackReference, volumeId: Swift.Int64, localId: Swift.Int64)
  public static func == (a: TelegramCore.CloudMediaResourceLocation, b: TelegramCore.CloudMediaResourceLocation) -> Swift.Bool
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class Resolve {
    final public func getDeepLinkInfo(path: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.DeepLinkInfo?, SwiftSignalKit.NoError>
    @objc deinit
  }
}
final public class SendScheduledMessageImmediatelyAction : PostboxKit.PendingMessageActionData {
  public init()
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to: PostboxKit.PendingMessageActionData) -> Swift.Bool
  @objc deinit
}
public struct RecentMediaItemId {
  public let rawValue: PostboxKit.MemoryBuffer
  public let mediaId: PostboxKit.MediaId
  public init(_ rawValue: PostboxKit.MemoryBuffer)
  public init(_ mediaId: PostboxKit.MediaId)
}
final public class RecentMediaItem : Swift.Codable, Swift.Equatable {
  final public let media: TelegramCore.TelegramMediaFile
  public init(_ media: TelegramCore.TelegramMediaFile)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.RecentMediaItem, rhs: TelegramCore.RecentMediaItem) -> Swift.Bool
  @objc deinit
}
public struct RecentEmojiItemId {
  public enum Id {
    case media(PostboxKit.MediaId)
    case text(Swift.String)
  }
  public let rawValue: PostboxKit.MemoryBuffer
  public let id: TelegramCore.RecentEmojiItemId.Id
  public init(_ rawValue: PostboxKit.MemoryBuffer)
  public init(_ mediaId: PostboxKit.MediaId)
  public init(_ text: Swift.String)
}
final public class RecentEmojiItem : Swift.Codable, Swift.Equatable {
  public enum Content : Swift.Equatable {
    case file(TelegramCore.TelegramMediaFile)
    case text(Swift.String)
    public static func == (a: TelegramCore.RecentEmojiItem.Content, b: TelegramCore.RecentEmojiItem.Content) -> Swift.Bool
  }
  final public let content: TelegramCore.RecentEmojiItem.Content
  public init(_ content: TelegramCore.RecentEmojiItem.Content)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.RecentEmojiItem, rhs: TelegramCore.RecentEmojiItem) -> Swift.Bool
  @objc deinit
}
public struct RecentReactionItemId {
  public enum Id : Swift.Hashable {
    case custom(PostboxKit.MediaId)
    case builtin(Swift.String)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: TelegramCore.RecentReactionItemId.Id, b: TelegramCore.RecentReactionItemId.Id) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public let rawValue: PostboxKit.MemoryBuffer
  public let id: TelegramCore.RecentReactionItemId.Id
  public init(_ rawValue: PostboxKit.MemoryBuffer)
  public init(_ mediaId: PostboxKit.MediaId)
  public init(_ text: Swift.String)
}
final public class RecentReactionItem : Swift.Codable, Swift.Equatable {
  public enum Content : Swift.Equatable {
    case custom(TelegramCore.TelegramMediaFile)
    case builtin(Swift.String)
    public static func == (a: TelegramCore.RecentReactionItem.Content, b: TelegramCore.RecentReactionItem.Content) -> Swift.Bool
  }
  final public let content: TelegramCore.RecentReactionItem.Content
  final public var id: TelegramCore.RecentReactionItemId {
    get
  }
  public init(_ content: TelegramCore.RecentReactionItem.Content)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.RecentReactionItem, rhs: TelegramCore.RecentReactionItem) -> Swift.Bool
  @objc deinit
}
final public class SynchronizeConsumeMessageContentsOperation : PostboxKit.PostboxCoding {
  final public let messageIds: [PostboxKit.MessageId]
  public init(messageIds: [PostboxKit.MessageId])
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public func loadedPeerFromMessage(account: TelegramCore.Account, peerId: PostboxKit.PeerId, messageId: PostboxKit.MessageId) -> SwiftSignalKit.Signal<PostboxKit.Peer?, SwiftSignalKit.NoError>
final public class ImportableDeviceContactData : Swift.Equatable, PostboxKit.PostboxCoding {
  final public let firstName: Swift.String
  final public let lastName: Swift.String
  final public let localIdentifiers: [Swift.String]
  public init(firstName: Swift.String, lastName: Swift.String, localIdentifiers: [Swift.String])
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.ImportableDeviceContactData, rhs: TelegramCore.ImportableDeviceContactData) -> Swift.Bool
  @objc deinit
}
public enum MultipartUploadSource {
  case resource(TelegramCore.MediaResourceReference)
  case data(Foundation.Data)
  case custom(SwiftSignalKit.Signal<PostboxKit.MediaResourceData, SwiftSignalKit.NoError>)
  case tempFile(PostboxKit.TempBoxFile)
}
public struct ChatListFilteringConfiguration : Swift.Equatable {
  public let isEnabled: Swift.Bool
  public init(appConfiguration: TelegramCore.AppConfiguration)
  public static func == (a: TelegramCore.ChatListFilteringConfiguration, b: TelegramCore.ChatListFilteringConfiguration) -> Swift.Bool
}
public struct ChatListFilterPeerCategories : Swift.OptionSet, Swift.Hashable {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public static let contacts: TelegramCore.ChatListFilterPeerCategories
  public static let nonContacts: TelegramCore.ChatListFilterPeerCategories
  public static let groups: TelegramCore.ChatListFilterPeerCategories
  public static let channels: TelegramCore.ChatListFilterPeerCategories
  public static let bots: TelegramCore.ChatListFilterPeerCategories
  public static let all: TelegramCore.ChatListFilterPeerCategories
  public typealias ArrayLiteralElement = TelegramCore.ChatListFilterPeerCategories
  public typealias Element = TelegramCore.ChatListFilterPeerCategories
  public typealias RawValue = Swift.Int32
}
public struct ChatListFilterIncludePeers : Swift.Equatable, Swift.Hashable {
  public var peers: [PostboxKit.PeerId] {
    get
  }
  public var pinnedPeers: [PostboxKit.PeerId] {
    get
  }
  public init()
  public mutating func reorderPinnedPeers(_ pinnedPeers: [PostboxKit.PeerId])
  public mutating func addPinnedPeer(_ peerId: PostboxKit.PeerId) -> Swift.Bool
  public mutating func removePinnedPeer(_ peerId: PostboxKit.PeerId)
  public mutating func addPeer(_ peerId: PostboxKit.PeerId) -> Swift.Bool
  public mutating func removePeer(_ peerId: PostboxKit.PeerId) -> Swift.Bool
  public mutating func setPeers(_ peers: [PostboxKit.PeerId])
  public static func == (a: TelegramCore.ChatListFilterIncludePeers, b: TelegramCore.ChatListFilterIncludePeers) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ChatListFilterData : Swift.Equatable, Swift.Hashable {
  public var categories: TelegramCore.ChatListFilterPeerCategories
  public var excludeMuted: Swift.Bool
  public var excludeRead: Swift.Bool
  public var excludeArchived: Swift.Bool
  public var includePeers: TelegramCore.ChatListFilterIncludePeers
  public var excludePeers: [PostboxKit.PeerId]
  public init(categories: TelegramCore.ChatListFilterPeerCategories, excludeMuted: Swift.Bool, excludeRead: Swift.Bool, excludeArchived: Swift.Bool, includePeers: TelegramCore.ChatListFilterIncludePeers, excludePeers: [PostboxKit.PeerId])
  public mutating func addIncludePeer(peerId: PostboxKit.PeerId) -> Swift.Bool
  public mutating func addExcludePeer(peerId: PostboxKit.PeerId) -> Swift.Bool
  public static func == (a: TelegramCore.ChatListFilterData, b: TelegramCore.ChatListFilterData) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ChatListFilter : Swift.Codable, Swift.Equatable {
  case allChats
  case filter(id: Swift.Int32, title: Swift.String, emoticon: Swift.String?, data: TelegramCore.ChatListFilterData)
  public var id: Swift.Int32 {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.ChatListFilter, b: TelegramCore.ChatListFilter) -> Swift.Bool
}
public enum RequestUpdateChatListFilterError {
  case generic
  public static func == (a: TelegramCore.RequestUpdateChatListFilterError, b: TelegramCore.RequestUpdateChatListFilterError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RequestUpdateChatListFilterOrderError {
  case generic
  public static func == (a: TelegramCore.RequestUpdateChatListFilterOrderError, b: TelegramCore.RequestUpdateChatListFilterOrderError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ChatListFeaturedFilter : Swift.Codable, Swift.Equatable {
  public var title: Swift.String
  public var description: Swift.String
  public var data: TelegramCore.ChatListFilterData
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.ChatListFeaturedFilter, b: TelegramCore.ChatListFeaturedFilter) -> Swift.Bool
}
public struct ChatListFiltersFeaturedState : Swift.Codable, Swift.Equatable {
  public var filters: [TelegramCore.ChatListFeaturedFilter]
  public var isSeen: Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.ChatListFiltersFeaturedState, b: TelegramCore.ChatListFiltersFeaturedState) -> Swift.Bool
}
final public class CachedPeerBotInfo : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let peerId: PostboxKit.PeerId
  final public let botInfo: TelegramCore.BotInfo
  public init(peerId: PostboxKit.PeerId, botInfo: TelegramCore.BotInfo)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.CachedPeerBotInfo, rhs: TelegramCore.CachedPeerBotInfo) -> Swift.Bool
  @objc deinit
}
public struct CachedGroupFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init()
  public init(rawValue: Swift.Int32)
  public static let canChangeUsername: TelegramCore.CachedGroupFlags
  public static let translationHidden: TelegramCore.CachedGroupFlags
  public typealias ArrayLiteralElement = TelegramCore.CachedGroupFlags
  public typealias Element = TelegramCore.CachedGroupFlags
  public typealias RawValue = Swift.Int32
}
public enum PeerAllowedReactions : Swift.Equatable, Swift.Codable {
  case all
  case limited([TelegramCore.MessageReaction.Reaction])
  case empty
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.PeerAllowedReactions, b: TelegramCore.PeerAllowedReactions) -> Swift.Bool
}
final public class CachedGroupData : PostboxKit.CachedPeerData {
  final public let participants: TelegramCore.CachedGroupParticipants?
  final public let exportedInvitation: TelegramCore.ExportedInvitation?
  final public let botInfos: [TelegramCore.CachedPeerBotInfo]
  final public let peerStatusSettings: TelegramCore.PeerStatusSettings?
  final public let pinnedMessageId: PostboxKit.MessageId?
  final public let about: Swift.String?
  final public let flags: TelegramCore.CachedGroupFlags
  final public let hasScheduledMessages: Swift.Bool
  final public let invitedBy: PostboxKit.PeerId?
  final public let photo: TelegramCore.TelegramMediaImage?
  final public let autoremoveTimeout: TelegramCore.CachedPeerAutoremoveTimeout
  final public let activeCall: TelegramCore.CachedChannelData.ActiveCall?
  final public let callJoinPeerId: PostboxKit.PeerId?
  final public let themeEmoticon: Swift.String?
  final public let inviteRequestsPending: Swift.Int32?
  final public let allowedReactions: TelegramCore.EnginePeerCachedInfoItem<TelegramCore.PeerAllowedReactions>
  final public let peerIds: Swift.Set<PostboxKit.PeerId>
  final public let messageIds: Swift.Set<PostboxKit.MessageId>
  final public let associatedHistoryMessageId: PostboxKit.MessageId?
  public init()
  public init(participants: TelegramCore.CachedGroupParticipants?, exportedInvitation: TelegramCore.ExportedInvitation?, botInfos: [TelegramCore.CachedPeerBotInfo], peerStatusSettings: TelegramCore.PeerStatusSettings?, pinnedMessageId: PostboxKit.MessageId?, about: Swift.String?, flags: TelegramCore.CachedGroupFlags, hasScheduledMessages: Swift.Bool, invitedBy: PostboxKit.PeerId?, photo: TelegramCore.TelegramMediaImage?, activeCall: TelegramCore.CachedChannelData.ActiveCall?, autoremoveTimeout: TelegramCore.CachedPeerAutoremoveTimeout, callJoinPeerId: PostboxKit.PeerId?, themeEmoticon: Swift.String?, inviteRequestsPending: Swift.Int32?, allowedReactions: TelegramCore.EnginePeerCachedInfoItem<TelegramCore.PeerAllowedReactions>)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to: PostboxKit.CachedPeerData) -> Swift.Bool
  final public func withUpdatedParticipants(_ participants: TelegramCore.CachedGroupParticipants?) -> TelegramCore.CachedGroupData
  final public func withUpdatedExportedInvitation(_ exportedInvitation: TelegramCore.ExportedInvitation?) -> TelegramCore.CachedGroupData
  final public func withUpdatedBotInfos(_ botInfos: [TelegramCore.CachedPeerBotInfo]) -> TelegramCore.CachedGroupData
  final public func withUpdatedPeerStatusSettings(_ peerStatusSettings: TelegramCore.PeerStatusSettings?) -> TelegramCore.CachedGroupData
  final public func withUpdatedPinnedMessageId(_ pinnedMessageId: PostboxKit.MessageId?) -> TelegramCore.CachedGroupData
  final public func withUpdatedAbout(_ about: Swift.String?) -> TelegramCore.CachedGroupData
  final public func withUpdatedFlags(_ flags: TelegramCore.CachedGroupFlags) -> TelegramCore.CachedGroupData
  final public func withUpdatedHasScheduledMessages(_ hasScheduledMessages: Swift.Bool) -> TelegramCore.CachedGroupData
  final public func withUpdatedInvitedBy(_ invitedBy: PostboxKit.PeerId?) -> TelegramCore.CachedGroupData
  final public func withUpdatedPhoto(_ photo: TelegramCore.TelegramMediaImage?) -> TelegramCore.CachedGroupData
  final public func withUpdatedActiveCall(_ activeCall: TelegramCore.CachedChannelData.ActiveCall?) -> TelegramCore.CachedGroupData
  final public func withUpdatedAutoremoveTimeout(_ autoremoveTimeout: TelegramCore.CachedPeerAutoremoveTimeout) -> TelegramCore.CachedGroupData
  final public func withUpdatedCallJoinPeerId(_ callJoinPeerId: PostboxKit.PeerId?) -> TelegramCore.CachedGroupData
  final public func withUpdatedThemeEmoticon(_ themeEmoticon: Swift.String?) -> TelegramCore.CachedGroupData
  final public func withUpdatedInviteRequestsPending(_ inviteRequestsPending: Swift.Int32?) -> TelegramCore.CachedGroupData
  final public func withUpdatedAllowedReactions(_ allowedReactions: TelegramCore.EnginePeerCachedInfoItem<TelegramCore.PeerAllowedReactions>) -> TelegramCore.CachedGroupData
  @objc deinit
}
public enum MessageTextEntityType : Swift.Equatable {
  public typealias CustomEntityType = Swift.Int32
  case Unknown
  case Mention
  case Hashtag
  case BotCommand
  case Url
  case Email
  case Bold
  case Italic
  case Code
  case Pre
  case TextUrl(url: Swift.String)
  case TextMention(peerId: PostboxKit.PeerId)
  case PhoneNumber
  case Strikethrough
  case BlockQuote
  case Underline
  case BankCard
  case Spoiler
  case CustomEmoji(stickerPack: TelegramCore.StickerPackReference?, fileId: Swift.Int64)
  case Custom(type: TelegramCore.MessageTextEntityType.CustomEntityType)
  public static func == (a: TelegramCore.MessageTextEntityType, b: TelegramCore.MessageTextEntityType) -> Swift.Bool
}
public struct MessageTextEntity : PostboxKit.PostboxCoding, Swift.Codable, Swift.Equatable {
  public let range: Swift.Range<Swift.Int>
  public let type: TelegramCore.MessageTextEntityType
  public init(range: Swift.Range<Swift.Int>, type: TelegramCore.MessageTextEntityType)
  public init(decoder: PostboxKit.PostboxDecoder)
  public init(from decoder: Swift.Decoder) throws
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.MessageTextEntity, rhs: TelegramCore.MessageTextEntity) -> Swift.Bool
}
public class TextEntitiesMessageAttribute : PostboxKit.MessageAttribute, Swift.Equatable {
  final public let entities: [TelegramCore.MessageTextEntity]
  public var associatedPeerIds: [PostboxKit.PeerId] {
    get
  }
  public var associatedMediaIds: [PostboxKit.MediaId] {
    get
  }
  public init(entities: [TelegramCore.MessageTextEntity])
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.TextEntitiesMessageAttribute, rhs: TelegramCore.TextEntitiesMessageAttribute) -> Swift.Bool
  @objc deinit
}
public enum ProxyServerConnection : Swift.Equatable, Swift.Hashable, Swift.Codable {
  case socks5(username: Swift.String?, password: Swift.String?)
  case mtp(secret: Foundation.Data)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.ProxyServerConnection, b: TelegramCore.ProxyServerConnection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ProxyServerSettings : Swift.Codable, Swift.Equatable, Swift.Hashable {
  public let host: Swift.String
  public let port: Swift.Int32
  public let connection: TelegramCore.ProxyServerConnection
  public init(host: Swift.String, port: Swift.Int32, connection: TelegramCore.ProxyServerConnection)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.ProxyServerSettings, b: TelegramCore.ProxyServerSettings) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct ProxySettings : Swift.Codable, Swift.Equatable {
  public var enabled: Swift.Bool
  public var servers: [TelegramCore.ProxyServerSettings]
  public var activeServer: TelegramCore.ProxyServerSettings?
  public var useForCalls: Swift.Bool
  public static var defaultSettings: TelegramCore.ProxySettings {
    get
  }
  public init(enabled: Swift.Bool, servers: [TelegramCore.ProxyServerSettings], activeServer: TelegramCore.ProxyServerSettings?, useForCalls: Swift.Bool)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var effectiveActiveServer: TelegramCore.ProxyServerSettings? {
    get
  }
  public static func == (a: TelegramCore.ProxySettings, b: TelegramCore.ProxySettings) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class ChatUpdatingMessageMedia : Swift.Equatable {
  final public let text: Swift.String
  final public let entities: TelegramCore.TextEntitiesMessageAttribute?
  final public let disableUrlPreview: Swift.Bool
  final public let media: TelegramCore.RequestEditMessageMedia
  final public let progress: Swift.Float
  public static func == (lhs: TelegramCore.ChatUpdatingMessageMedia, rhs: TelegramCore.ChatUpdatingMessageMedia) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class EngineCallList {
  public enum Scope {
    case all
    case missed
    public static func == (a: TelegramCore.EngineCallList.Scope, b: TelegramCore.EngineCallList.Scope) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Item {
    case message(message: TelegramCore.EngineMessage, group: [TelegramCore.EngineMessage])
    case hole(TelegramCore.EngineMessage.Index)
  }
  final public let items: [TelegramCore.EngineCallList.Item]
  final public let hasEarlier: Swift.Bool
  final public let hasLater: Swift.Bool
  @objc deinit
}
final public class EngineMessage : Swift.Equatable {
  public typealias Id = PostboxKit.MessageId
  public typealias Index = PostboxKit.MessageIndex
  public typealias Tags = PostboxKit.MessageTags
  public typealias Attribute = PostboxKit.MessageAttribute
  public typealias GroupInfo = PostboxKit.MessageGroupInfo
  public typealias Flags = PostboxKit.MessageFlags
  public typealias GlobalTags = PostboxKit.GlobalMessageTags
  public typealias LocalTags = PostboxKit.LocalMessageTags
  public typealias ForwardInfo = PostboxKit.MessageForwardInfo
  final public var stableId: Swift.UInt32 {
    get
  }
  final public var stableVersion: Swift.UInt32 {
    get
  }
  final public var id: TelegramCore.EngineMessage.Id {
    get
  }
  final public var globallyUniqueId: Swift.Int64? {
    get
  }
  final public var groupingKey: Swift.Int64? {
    get
  }
  final public var groupInfo: TelegramCore.EngineMessage.GroupInfo? {
    get
  }
  final public var threadId: Swift.Int64? {
    get
  }
  final public var timestamp: Swift.Int32 {
    get
  }
  final public var flags: TelegramCore.EngineMessage.Flags {
    get
  }
  final public var tags: TelegramCore.EngineMessage.Tags {
    get
  }
  final public var globalTags: TelegramCore.EngineMessage.GlobalTags {
    get
  }
  final public var localTags: TelegramCore.EngineMessage.LocalTags {
    get
  }
  final public var forwardInfo: TelegramCore.EngineMessage.ForwardInfo? {
    get
  }
  final public var author: TelegramCore.EnginePeer? {
    get
  }
  final public var text: Swift.String {
    get
  }
  final public var attributes: [TelegramCore.EngineMessage.Attribute] {
    get
  }
  final public var media: [PostboxKit.Media] {
    get
  }
  final public var peers: PostboxKit.SimpleDictionary<TelegramCore.EnginePeer.Id, PostboxKit.Peer> {
    get
  }
  final public var associatedMessages: PostboxKit.SimpleDictionary<TelegramCore.EngineMessage.Id, PostboxKit.Message> {
    get
  }
  final public var associatedMessageIds: [TelegramCore.EngineMessage.Id] {
    get
  }
  final public var associatedMedia: [PostboxKit.MediaId : PostboxKit.Media] {
    get
  }
  final public var associatedThreadInfo: PostboxKit.Message.AssociatedThreadInfo? {
    get
  }
  final public var index: PostboxKit.MessageIndex {
    get
  }
  public init(stableId: Swift.UInt32, stableVersion: Swift.UInt32, id: TelegramCore.EngineMessage.Id, globallyUniqueId: Swift.Int64?, groupingKey: Swift.Int64?, groupInfo: TelegramCore.EngineMessage.GroupInfo?, threadId: Swift.Int64?, timestamp: Swift.Int32, flags: TelegramCore.EngineMessage.Flags, tags: TelegramCore.EngineMessage.Tags, globalTags: TelegramCore.EngineMessage.GlobalTags, localTags: TelegramCore.EngineMessage.LocalTags, forwardInfo: TelegramCore.EngineMessage.ForwardInfo?, author: TelegramCore.EnginePeer?, text: Swift.String, attributes: [TelegramCore.EngineMessage.Attribute], media: [TelegramCore.EngineMedia], peers: [TelegramCore.EnginePeer.Id : TelegramCore.EnginePeer], associatedMessages: [TelegramCore.EngineMessage.Id : TelegramCore.EngineMessage], associatedMessageIds: [TelegramCore.EngineMessage.Id], associatedMedia: [PostboxKit.MediaId : PostboxKit.Media], associatedThreadInfo: PostboxKit.Message.AssociatedThreadInfo?)
  public init(_ impl: PostboxKit.Message)
  final public func _asMessage() -> PostboxKit.Message
  public static func == (lhs: TelegramCore.EngineMessage, rhs: TelegramCore.EngineMessage) -> Swift.Bool
  @objc deinit
}
public enum AddressNameFormatError {
  case startsWithUnderscore
  case endsWithUnderscore
  case startsWithDigit
  case tooShort
  case invalidCharacters
  public static func == (a: TelegramCore.AddressNameFormatError, b: TelegramCore.AddressNameFormatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AddressNameAvailability : Swift.Equatable {
  case available
  case invalid
  case taken
  case purchaseAvailable
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.AddressNameAvailability, b: TelegramCore.AddressNameAvailability) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum AddressNameDomain {
  case account
  case peer(PostboxKit.PeerId)
  case theme(TelegramCore.TelegramTheme)
}
public enum UpdateAddressNameError {
  case generic
  public static func == (a: TelegramCore.UpdateAddressNameError, b: TelegramCore.UpdateAddressNameError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DeactivateAllAddressNamesError {
  case generic
  public static func == (a: TelegramCore.DeactivateAllAddressNamesError, b: TelegramCore.DeactivateAllAddressNamesError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ToggleAddressNameActiveError {
  case generic
  case activeLimitReached
  public static func == (a: TelegramCore.ToggleAddressNameActiveError, b: TelegramCore.ToggleAddressNameActiveError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ReorderAddressNamesError {
  case generic
  public static func == (a: TelegramCore.ReorderAddressNamesError, b: TelegramCore.ReorderAddressNamesError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AdminedPublicChannelsScope {
  case all
  case forLocation
  case forVoiceChat
  public static func == (a: TelegramCore.AdminedPublicChannelsScope, b: TelegramCore.AdminedPublicChannelsScope) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ChannelAddressNameAssignmentAvailability {
  case available
  case unknown
  case addressNameLimitReached
  public static func == (a: TelegramCore.ChannelAddressNameAssignmentAvailability, b: TelegramCore.ChannelAddressNameAssignmentAvailability) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CloudFileMediaResourceId : Swift.Hashable, Swift.Equatable {
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.CloudFileMediaResourceId, b: TelegramCore.CloudFileMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class CloudFileMediaResource : TelegramCore.TelegramMediaResource {
  final public let datacenterId: Swift.Int
  final public let volumeId: Swift.Int64
  final public let localId: Swift.Int32
  final public let secret: Swift.Int64
  final public let size: Swift.Int64?
  final public let fileReference: Foundation.Data?
  final public var id: PostboxKit.MediaResourceId {
    get
  }
  public init(datacenterId: Swift.Int, volumeId: Swift.Int64, localId: Swift.Int32, secret: Swift.Int64, size: Swift.Int64?, fileReference: Foundation.Data?)
  required public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to: PostboxKit.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct CloudPhotoSizeMediaResourceId : Swift.Hashable, Swift.Equatable {
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.CloudPhotoSizeMediaResourceId, b: TelegramCore.CloudPhotoSizeMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class CloudPhotoSizeMediaResource : TelegramCore.TelegramMediaResource {
  final public let datacenterId: Swift.Int
  final public let photoId: Swift.Int64
  final public let accessHash: Swift.Int64
  final public let sizeSpec: Swift.String
  final public let size: Swift.Int64?
  final public let fileReference: Foundation.Data?
  final public var id: PostboxKit.MediaResourceId {
    get
  }
  public init(datacenterId: Swift.Int32, photoId: Swift.Int64, accessHash: Swift.Int64, sizeSpec: Swift.String, size: Swift.Int64?, fileReference: Foundation.Data?)
  required public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to: PostboxKit.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct CloudDocumentSizeMediaResourceId : Swift.Hashable, Swift.Equatable {
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.CloudDocumentSizeMediaResourceId, b: TelegramCore.CloudDocumentSizeMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class CloudDocumentSizeMediaResource : TelegramCore.TelegramMediaResource {
  final public let datacenterId: Swift.Int
  final public let documentId: Swift.Int64
  final public let accessHash: Swift.Int64
  final public let sizeSpec: Swift.String
  final public let fileReference: Foundation.Data?
  final public var size: Swift.Int64? {
    get
  }
  final public var id: PostboxKit.MediaResourceId {
    get
  }
  public init(datacenterId: Swift.Int32, documentId: Swift.Int64, accessHash: Swift.Int64, sizeSpec: Swift.String, fileReference: Foundation.Data?)
  required public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to: PostboxKit.MediaResource) -> Swift.Bool
  @objc deinit
}
public enum CloudPeerPhotoSizeSpec : Swift.Int32 {
  case small
  case fullSize
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public struct CloudPeerPhotoSizeMediaResourceId : Swift.Hashable, Swift.Equatable {
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.CloudPeerPhotoSizeMediaResourceId, b: TelegramCore.CloudPeerPhotoSizeMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class CloudPeerPhotoSizeMediaResource : TelegramCore.TelegramMediaResource {
  final public let datacenterId: Swift.Int
  final public let photoId: Swift.Int64?
  final public let sizeSpec: TelegramCore.CloudPeerPhotoSizeSpec
  final public let volumeId: Swift.Int64?
  final public let localId: Swift.Int32?
  final public var size: Swift.Int64? {
    get
  }
  final public var id: PostboxKit.MediaResourceId {
    get
  }
  public init(datacenterId: Swift.Int32, photoId: Swift.Int64?, sizeSpec: TelegramCore.CloudPeerPhotoSizeSpec, volumeId: Swift.Int64?, localId: Swift.Int32?)
  required public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to: PostboxKit.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct CloudStickerPackThumbnailMediaResourceId : Swift.Hashable, Swift.Equatable {
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.CloudStickerPackThumbnailMediaResourceId, b: TelegramCore.CloudStickerPackThumbnailMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class CloudStickerPackThumbnailMediaResource : TelegramCore.TelegramMediaResource {
  final public let datacenterId: Swift.Int
  final public let thumbVersion: Swift.Int32?
  final public let volumeId: Swift.Int64?
  final public let localId: Swift.Int32?
  final public var size: Swift.Int64? {
    get
  }
  final public var id: PostboxKit.MediaResourceId {
    get
  }
  public init(datacenterId: Swift.Int32, thumbVersion: Swift.Int32?, volumeId: Swift.Int64?, localId: Swift.Int32?)
  required public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to: PostboxKit.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct CloudDocumentMediaResourceId : Swift.Hashable, Swift.Equatable {
  public let datacenterId: Swift.Int
  public let fileId: Swift.Int64
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.CloudDocumentMediaResourceId, b: TelegramCore.CloudDocumentMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class CloudDocumentMediaResource : TelegramCore.TelegramMediaResource {
  final public let datacenterId: Swift.Int
  final public let fileId: Swift.Int64
  final public let accessHash: Swift.Int64
  final public let size: Swift.Int64?
  final public let fileReference: Foundation.Data?
  final public let fileName: Swift.String?
  final public var id: PostboxKit.MediaResourceId {
    get
  }
  public init(datacenterId: Swift.Int, fileId: Swift.Int64, accessHash: Swift.Int64, size: Swift.Int64?, fileReference: Foundation.Data?, fileName: Swift.String?)
  required public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to: PostboxKit.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct LocalFileMediaResourceId : Swift.Hashable, Swift.Equatable {
  public let fileId: Swift.Int64
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.LocalFileMediaResourceId, b: TelegramCore.LocalFileMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public class LocalFileMediaResource : TelegramCore.TelegramMediaResource, Swift.Codable {
  final public let fileId: Swift.Int64
  final public let size: Swift.Int64?
  final public let isSecretRelated: Swift.Bool
  public init(fileId: Swift.Int64, size: Swift.Int64? = nil, isSecretRelated: Swift.Bool = false)
  required public init(decoder: PostboxKit.PostboxDecoder)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func encode(to encoder: Swift.Encoder) throws
  public var id: PostboxKit.MediaResourceId {
    get
  }
  public func isEqual(to: PostboxKit.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct LocalFileReferenceMediaResourceId : Swift.Hashable, Swift.Equatable {
  public let randomId: Swift.Int64
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.LocalFileReferenceMediaResourceId, b: TelegramCore.LocalFileReferenceMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public class LocalFileReferenceMediaResource : TelegramCore.TelegramMediaResource {
  final public let localFilePath: Swift.String
  final public let randomId: Swift.Int64
  final public let isUniquelyReferencedTemporaryFile: Swift.Bool
  final public let size: Swift.Int64?
  public init(localFilePath: Swift.String, randomId: Swift.Int64, isUniquelyReferencedTemporaryFile: Swift.Bool = false, size: Swift.Int64? = nil)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public var id: PostboxKit.MediaResourceId {
    get
  }
  public func isEqual(to: PostboxKit.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct HttpReferenceMediaResourceId : Swift.Hashable, Swift.Equatable {
  public let url: Swift.String
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.HttpReferenceMediaResourceId, b: TelegramCore.HttpReferenceMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class HttpReferenceMediaResource : TelegramCore.TelegramMediaResource {
  final public let url: Swift.String
  final public let size: Swift.Int64?
  public init(url: Swift.String, size: Swift.Int64?)
  required public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public var id: PostboxKit.MediaResourceId {
    get
  }
  final public func isEqual(to: PostboxKit.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct WebFileReferenceMediaResourceId : Swift.Hashable, Swift.Equatable {
  public let url: Swift.String
  public let accessHash: Swift.Int64
  public let size: Swift.Int64
  public var uniqueId: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.WebFileReferenceMediaResourceId, b: TelegramCore.WebFileReferenceMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class WebFileReferenceMediaResource : TelegramCore.TelegramMediaResource {
  final public let url: Swift.String
  final public let actualSize: Swift.Int64
  final public var size: Swift.Int64? {
    get
  }
  final public let accessHash: Swift.Int64
  public init(url: Swift.String, size: Swift.Int64, accessHash: Swift.Int64)
  required public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public var id: PostboxKit.MediaResourceId {
    get
  }
  final public func isEqual(to: PostboxKit.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct SecretFileMediaResourceId : Swift.Hashable, Swift.Equatable {
  public let fileId: Swift.Int64
  public let datacenterId: Swift.Int32
  public var uniqueId: Swift.String {
    get
  }
  public init(fileId: Swift.Int64, datacenterId: Swift.Int32)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.SecretFileMediaResourceId, b: TelegramCore.SecretFileMediaResourceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class SecretFileMediaResource : TelegramCore.TelegramMediaResource {
  final public let fileId: Swift.Int64
  final public let accessHash: Swift.Int64
  final public var size: Swift.Int64? {
    get
  }
  final public let containerSize: Swift.Int64
  final public let decryptedSize: Swift.Int64
  final public let datacenterId: Swift.Int
  final public let key: TelegramCore.SecretFileEncryptionKey
  public init(fileId: Swift.Int64, accessHash: Swift.Int64, containerSize: Swift.Int64, decryptedSize: Swift.Int64, datacenterId: Swift.Int, key: TelegramCore.SecretFileEncryptionKey)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public var id: PostboxKit.MediaResourceId {
    get
  }
  final public func isEqual(to: PostboxKit.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct EmptyMediaResourceId {
  public var uniqueId: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
final public class EmptyMediaResource : TelegramCore.TelegramMediaResource {
  final public var size: Swift.Int64? {
    get
  }
  public init()
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public var id: PostboxKit.MediaResourceId {
    get
  }
  final public func isEqual(to: PostboxKit.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct WallpaperDataResourceId {
  public var uniqueId: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
  public var slug: Swift.String
  public init(slug: Swift.String)
}
final public class WallpaperDataResource : TelegramCore.TelegramMediaResource {
  final public var size: Swift.Int64? {
    get
  }
  final public let slug: Swift.String
  public init(slug: Swift.String)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public var id: PostboxKit.MediaResourceId {
    get
  }
  final public func isEqual(to: PostboxKit.MediaResource) -> Swift.Bool
  @objc deinit
}
public enum SynchronizeAppLogEventsOperationContent : Swift.Codable {
  case add(time: Swift.Double, type: Swift.String, peerId: PostboxKit.PeerId?, data: TelegramCore.JSON)
  case sync
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
final public class SynchronizeAppLogEventsOperation : Swift.Codable, PostboxKit.PostboxCoding {
  final public let content: TelegramCore.SynchronizeAppLogEventsOperationContent
  public init(content: TelegramCore.SynchronizeAppLogEventsOperationContent)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
final public class EmojiKeywordItem : PostboxKit.ItemCollectionItem, Swift.Equatable {
  final public let index: PostboxKit.ItemCollectionItemIndex
  final public let collectionId: PostboxKit.ItemCollectionId.Id
  final public let keyword: Swift.String
  final public let emoticons: [Swift.String]
  final public let indexKeys: [PostboxKit.MemoryBuffer]
  public init(index: PostboxKit.ItemCollectionItemIndex, collectionId: PostboxKit.ItemCollectionId.Id, keyword: Swift.String, emoticons: [Swift.String], indexKeys: [PostboxKit.MemoryBuffer])
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.EmojiKeywordItem, rhs: TelegramCore.EmojiKeywordItem) -> Swift.Bool
  @objc deinit
}
extension TelegramCore.ExportedInvitation {
  public var link: Swift.String? {
    get
  }
  public var date: Swift.Int32? {
    get
  }
  public var isPermanent: Swift.Bool {
    get
  }
  public var isRevoked: Swift.Bool {
    get
  }
}
public struct OutgoingContentInfoFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init()
  public init(rawValue: Swift.Int32)
  public static let disableLinkPreviews: TelegramCore.OutgoingContentInfoFlags
  public typealias ArrayLiteralElement = TelegramCore.OutgoingContentInfoFlags
  public typealias Element = TelegramCore.OutgoingContentInfoFlags
  public typealias RawValue = Swift.Int32
}
public class OutgoingContentInfoMessageAttribute : PostboxKit.MessageAttribute {
  final public let flags: TelegramCore.OutgoingContentInfoFlags
  public init(flags: TelegramCore.OutgoingContentInfoFlags)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func withUpdatedFlags(_ flags: TelegramCore.OutgoingContentInfoFlags) -> TelegramCore.OutgoingContentInfoMessageAttribute
  @objc deinit
}
public enum ChannelOwnershipTransferError {
  case generic
  case twoStepAuthMissing
  case twoStepAuthTooFresh(Swift.Int32)
  case authSessionTooFresh(Swift.Int32)
  case limitExceeded
  case requestPassword
  case invalidPassword
  case adminsTooMuch
  case userPublicChannelsTooMuch
  case userLocatedGroupsTooMuch
  case tooMuchJoined
  case restricted
  case userBlocked
}
extension PostboxKit.Peer {
  public var debugDisplayTitle: Swift.String {
    get
  }
  public func restrictionText(platform: Swift.String, contentSettings: TelegramCore.ContentSettings) -> Swift.String?
  public var addressName: Swift.String? {
    get
  }
  public var usernames: [TelegramCore.TelegramPeerUsername] {
    get
  }
  public var editableUsername: Swift.String? {
    get
  }
  public var displayLetters: [Swift.String] {
    get
  }
  public var profileImageRepresentations: [TelegramCore.TelegramMediaImageRepresentation] {
    get
  }
  public var smallProfileImage: TelegramCore.TelegramMediaImageRepresentation? {
    get
  }
  public var largeProfileImage: TelegramCore.TelegramMediaImageRepresentation? {
    get
  }
  public var isDeleted: Swift.Bool {
    get
  }
  public var isScam: Swift.Bool {
    get
  }
  public var isFake: Swift.Bool {
    get
  }
  public var isVerified: Swift.Bool {
    get
  }
  public var isPremium: Swift.Bool {
    get
  }
  public var isCopyProtectionEnabled: Swift.Bool {
    get
  }
  public var isForum: Swift.Bool {
    get
  }
}
extension TelegramCore.TelegramPeerUsername {
  public var isActive: Swift.Bool {
    get
  }
}
extension PostboxKit.PeerId {
  public var isGroupOrChannel: Swift.Bool {
    get
  }
}
public func peerDebugDisplayTitles(_ peerIds: [PostboxKit.PeerId], _ dict: PostboxKit.SimpleDictionary<PostboxKit.PeerId, PostboxKit.Peer>) -> Swift.String
public func peerDebugDisplayTitles(_ peers: [PostboxKit.Peer]) -> Swift.String
public func messageMainPeer(_ message: TelegramCore.EngineMessage) -> TelegramCore.EnginePeer?
public func peerViewMainPeer(_ view: PostboxKit.PeerView) -> PostboxKit.Peer?
extension PostboxKit.RenderedPeer {
  convenience public init(message: PostboxKit.Message)
  final public var chatMainPeer: PostboxKit.Peer? {
    get
  }
}
public func isServicePeer(_ peer: PostboxKit.Peer) -> Swift.Bool
extension PostboxKit.PeerId {
  public var isReplies: Swift.Bool {
    get
  }
  public func isRepliesOrSavedMessages(accountPeerId: PostboxKit.PeerId) -> Swift.Bool
  public var isImport: Swift.Bool {
    get
  }
}
public enum TelegramMediaImageReferenceDecodingError : Swift.Error {
  case generic
  public static func == (a: TelegramCore.TelegramMediaImageReferenceDecodingError, b: TelegramCore.TelegramMediaImageReferenceDecodingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TelegramMediaImageReference : PostboxKit.PostboxCoding, Swift.Equatable {
  case cloud(imageId: Swift.Int64, accessHash: Swift.Int64, fileReference: Foundation.Data?)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.TelegramMediaImageReference, rhs: TelegramCore.TelegramMediaImageReference) -> Swift.Bool
}
public struct TelegramMediaImageFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public static let hasStickers: TelegramCore.TelegramMediaImageFlags
  public typealias ArrayLiteralElement = TelegramCore.TelegramMediaImageFlags
  public typealias Element = TelegramCore.TelegramMediaImageFlags
  public typealias RawValue = Swift.Int32
}
public enum TelegramMediaImageDecodingError : Swift.Error {
  case generic
  public static func == (a: TelegramCore.TelegramMediaImageDecodingError, b: TelegramCore.TelegramMediaImageDecodingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class TelegramMediaImage : PostboxKit.Media, Swift.Equatable, Swift.Codable {
  final public class VideoRepresentation : Swift.Equatable, PostboxKit.PostboxCoding {
    final public let dimensions: TelegramCore.PixelDimensions
    final public let resource: TelegramCore.TelegramMediaResource
    final public let startTimestamp: Swift.Double?
    public init(dimensions: TelegramCore.PixelDimensions, resource: TelegramCore.TelegramMediaResource, startTimestamp: Swift.Double?)
    public init(decoder: PostboxKit.PostboxDecoder)
    final public func encode(_ encoder: PostboxKit.PostboxEncoder)
    public static func == (lhs: TelegramCore.TelegramMediaImage.VideoRepresentation, rhs: TelegramCore.TelegramMediaImage.VideoRepresentation) -> Swift.Bool
    @objc deinit
  }
  final public class EmojiMarkup : Swift.Equatable, PostboxKit.PostboxCoding {
    public enum Content : Swift.Equatable {
      case emoji(fileId: Swift.Int64)
      case sticker(packReference: TelegramCore.StickerPackReference, fileId: Swift.Int64)
      public static func == (a: TelegramCore.TelegramMediaImage.EmojiMarkup.Content, b: TelegramCore.TelegramMediaImage.EmojiMarkup.Content) -> Swift.Bool
    }
    final public let content: TelegramCore.TelegramMediaImage.EmojiMarkup.Content
    final public let backgroundColors: [Swift.Int32]
    public init(content: TelegramCore.TelegramMediaImage.EmojiMarkup.Content, backgroundColors: [Swift.Int32])
    public init(decoder: PostboxKit.PostboxDecoder)
    final public func encode(_ encoder: PostboxKit.PostboxEncoder)
    public static func == (lhs: TelegramCore.TelegramMediaImage.EmojiMarkup, rhs: TelegramCore.TelegramMediaImage.EmojiMarkup) -> Swift.Bool
    @objc deinit
  }
  final public let imageId: PostboxKit.MediaId
  final public let representations: [TelegramCore.TelegramMediaImageRepresentation]
  final public let videoRepresentations: [TelegramCore.TelegramMediaImage.VideoRepresentation]
  final public let immediateThumbnailData: Foundation.Data?
  final public let emojiMarkup: TelegramCore.TelegramMediaImage.EmojiMarkup?
  final public let reference: TelegramCore.TelegramMediaImageReference?
  final public let partialReference: TelegramCore.PartialMediaReference?
  final public let peerIds: [PostboxKit.PeerId]
  final public let flags: TelegramCore.TelegramMediaImageFlags
  final public var id: PostboxKit.MediaId? {
    get
  }
  public init(imageId: PostboxKit.MediaId, representations: [TelegramCore.TelegramMediaImageRepresentation], videoRepresentations: [TelegramCore.TelegramMediaImage.VideoRepresentation] = [], immediateThumbnailData: Foundation.Data?, emojiMarkup: TelegramCore.TelegramMediaImage.EmojiMarkup? = nil, reference: TelegramCore.TelegramMediaImageReference?, partialReference: TelegramCore.PartialMediaReference?, flags: TelegramCore.TelegramMediaImageFlags)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  required public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  final public func representationForDisplayAtSize(_ size: TelegramCore.PixelDimensions) -> TelegramCore.TelegramMediaImageRepresentation?
  final public func isEqual(to other: PostboxKit.Media) -> Swift.Bool
  final public func isSemanticallyEqual(to other: PostboxKit.Media) -> Swift.Bool
  public static func == (lhs: TelegramCore.TelegramMediaImage, rhs: TelegramCore.TelegramMediaImage) -> Swift.Bool
  final public func withUpdatedPartialReference(_ partialReference: TelegramCore.PartialMediaReference?) -> TelegramCore.TelegramMediaImage
  @objc deinit
}
final public class TelegramMediaImageRepresentation : PostboxKit.PostboxCoding, Swift.Equatable, Swift.CustomStringConvertible {
  final public let dimensions: TelegramCore.PixelDimensions
  final public let resource: TelegramCore.TelegramMediaResource
  final public let progressiveSizes: [Swift.Int32]
  final public let immediateThumbnailData: Foundation.Data?
  final public let hasVideo: Swift.Bool
  final public let isPersonal: Swift.Bool
  public init(dimensions: TelegramCore.PixelDimensions, resource: TelegramCore.TelegramMediaResource, progressiveSizes: [Swift.Int32], immediateThumbnailData: Foundation.Data?, hasVideo: Swift.Bool, isPersonal: Swift.Bool)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public var description: Swift.String {
    get
  }
  final public func isSemanticallyEqual(to other: TelegramCore.TelegramMediaImageRepresentation) -> Swift.Bool
  @objc deinit
}
public func == (lhs: TelegramCore.TelegramMediaImageRepresentation, rhs: TelegramCore.TelegramMediaImageRepresentation) -> Swift.Bool
public class WasScheduledMessageAttribute : PostboxKit.MessageAttribute {
  public init()
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public struct FeaturedStickerPackItemId {
  public let rawValue: PostboxKit.MemoryBuffer
  public let packId: Swift.Int64
  public init(_ rawValue: PostboxKit.MemoryBuffer)
  public init(_ packId: Swift.Int64)
}
final public class FeaturedStickerPackItem : Swift.Codable {
  final public let info: TelegramCore.StickerPackCollectionInfo
  final public let topItems: [TelegramCore.StickerPackItem]
  final public let unread: Swift.Bool
  public init(info: TelegramCore.StickerPackCollectionInfo, topItems: [TelegramCore.StickerPackItem], unread: Swift.Bool)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public enum ReportReason : Swift.Equatable {
  case spam
  case fake
  case violence
  case porno
  case childAbuse
  case copyright
  case irrelevantLocation
  case illegalDrugs
  case personalDetails
  case custom
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.ReportReason, b: TelegramCore.ReportReason) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum SavedAutodownloadPreset {
  case low
  case medium
  case high
  public static func == (a: TelegramCore.SavedAutodownloadPreset, b: TelegramCore.SavedAutodownloadPreset) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func saveAutodownloadSettings(account: TelegramCore.Account, preset: TelegramCore.SavedAutodownloadPreset, settings: TelegramCore.AutodownloadPresetSettings) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public struct SecureIdFileReference : Swift.Equatable {
  public let id: Swift.Int64
  public let accessHash: Swift.Int64
  public let size: Swift.Int64
  public let datacenterId: Swift.Int32
  public let timestamp: Swift.Int32
  public let fileHash: Foundation.Data
  public let encryptedSecret: Foundation.Data
  public init(id: Swift.Int64, accessHash: Swift.Int64, size: Swift.Int64, datacenterId: Swift.Int32, timestamp: Swift.Int32, fileHash: Foundation.Data, encryptedSecret: Foundation.Data)
  public static func == (a: TelegramCore.SecureIdFileReference, b: TelegramCore.SecureIdFileReference) -> Swift.Bool
}
public class ReplyThreadHistoryContext {
  public var state: SwiftSignalKit.Signal<PostboxKit.MessageHistoryViewExternalInput, SwiftSignalKit.NoError> {
    get
  }
  public var maxReadOutgoingMessageId: SwiftSignalKit.Signal<PostboxKit.MessageId?, SwiftSignalKit.NoError> {
    get
  }
  public var unreadCount: SwiftSignalKit.Signal<Swift.Int, SwiftSignalKit.NoError> {
    get
  }
  public init(account: TelegramCore.Account, peerId: PostboxKit.PeerId, data: TelegramCore.ChatReplyThreadMessage)
  public func applyMaxReadIndex(messageIndex: PostboxKit.MessageIndex)
  @objc deinit
}
public struct ChatReplyThreadMessage : Swift.Equatable {
  public enum Anchor : Swift.Equatable {
    case automatic
    case lowerBoundMessage(PostboxKit.MessageIndex)
    public static func == (a: TelegramCore.ChatReplyThreadMessage.Anchor, b: TelegramCore.ChatReplyThreadMessage.Anchor) -> Swift.Bool
  }
  public var messageId: PostboxKit.MessageId
  public var channelMessageId: PostboxKit.MessageId?
  public var isChannelPost: Swift.Bool
  public var isForumPost: Swift.Bool
  public var maxMessage: PostboxKit.MessageId?
  public var maxReadIncomingMessageId: PostboxKit.MessageId?
  public var maxReadOutgoingMessageId: PostboxKit.MessageId?
  public var unreadCount: Swift.Int
  public var initialFilledHoles: Foundation.IndexSet
  public var initialAnchor: TelegramCore.ChatReplyThreadMessage.Anchor
  public var isNotAvailable: Swift.Bool
  public init(messageId: PostboxKit.MessageId, channelMessageId: PostboxKit.MessageId?, isChannelPost: Swift.Bool, isForumPost: Swift.Bool, maxMessage: PostboxKit.MessageId?, maxReadIncomingMessageId: PostboxKit.MessageId?, maxReadOutgoingMessageId: PostboxKit.MessageId?, unreadCount: Swift.Int, initialFilledHoles: Foundation.IndexSet, initialAnchor: TelegramCore.ChatReplyThreadMessage.Anchor, isNotAvailable: Swift.Bool)
  public var normalized: TelegramCore.ChatReplyThreadMessage {
    get
  }
  public static func == (a: TelegramCore.ChatReplyThreadMessage, b: TelegramCore.ChatReplyThreadMessage) -> Swift.Bool
}
public enum FetchChannelReplyThreadMessageError {
  case generic
  public static func == (a: TelegramCore.FetchChannelReplyThreadMessageError, b: TelegramCore.FetchChannelReplyThreadMessageError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TelegramChannelParticipationStatus {
  case member
  case left
  case kicked
  public static func == (a: TelegramCore.TelegramChannelParticipationStatus, b: TelegramCore.TelegramChannelParticipationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TelegramChannelBroadcastFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init()
  public init(rawValue: Swift.Int32)
  public static let messagesShouldHaveSignatures: TelegramCore.TelegramChannelBroadcastFlags
  public static let hasDiscussionGroup: TelegramCore.TelegramChannelBroadcastFlags
  public typealias ArrayLiteralElement = TelegramCore.TelegramChannelBroadcastFlags
  public typealias Element = TelegramCore.TelegramChannelBroadcastFlags
  public typealias RawValue = Swift.Int32
}
public struct TelegramChannelBroadcastInfo : Swift.Equatable {
  public let flags: TelegramCore.TelegramChannelBroadcastFlags
  public init(flags: TelegramCore.TelegramChannelBroadcastFlags)
  public static func == (lhs: TelegramCore.TelegramChannelBroadcastInfo, rhs: TelegramCore.TelegramChannelBroadcastInfo) -> Swift.Bool
}
public struct TelegramChannelGroupFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init()
  public init(rawValue: Swift.Int32)
  public static let slowModeEnabled: TelegramCore.TelegramChannelGroupFlags
  public typealias ArrayLiteralElement = TelegramCore.TelegramChannelGroupFlags
  public typealias Element = TelegramCore.TelegramChannelGroupFlags
  public typealias RawValue = Swift.Int32
}
public struct TelegramChannelGroupInfo : Swift.Equatable {
  public let flags: TelegramCore.TelegramChannelGroupFlags
  public init(flags: TelegramCore.TelegramChannelGroupFlags)
  public static func == (lhs: TelegramCore.TelegramChannelGroupInfo, rhs: TelegramCore.TelegramChannelGroupInfo) -> Swift.Bool
}
public enum TelegramChannelInfo : Swift.Equatable {
  case broadcast(TelegramCore.TelegramChannelBroadcastInfo)
  case group(TelegramCore.TelegramChannelGroupInfo)
  public static func == (lhs: TelegramCore.TelegramChannelInfo, rhs: TelegramCore.TelegramChannelInfo) -> Swift.Bool
}
public struct TelegramChannelFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init()
  public init(rawValue: Swift.Int32)
  public static let isVerified: TelegramCore.TelegramChannelFlags
  public static let isCreator: TelegramCore.TelegramChannelFlags
  public static let isScam: TelegramCore.TelegramChannelFlags
  public static let hasGeo: TelegramCore.TelegramChannelFlags
  public static let hasVoiceChat: TelegramCore.TelegramChannelFlags
  public static let hasActiveVoiceChat: TelegramCore.TelegramChannelFlags
  public static let isFake: TelegramCore.TelegramChannelFlags
  public static let isGigagroup: TelegramCore.TelegramChannelFlags
  public static let copyProtectionEnabled: TelegramCore.TelegramChannelFlags
  public static let joinToSend: TelegramCore.TelegramChannelFlags
  public static let requestToJoin: TelegramCore.TelegramChannelFlags
  public static let isForum: TelegramCore.TelegramChannelFlags
  public typealias ArrayLiteralElement = TelegramCore.TelegramChannelFlags
  public typealias Element = TelegramCore.TelegramChannelFlags
  public typealias RawValue = Swift.Int32
}
final public class TelegramChannel : PostboxKit.Peer, Swift.Equatable {
  final public let id: PostboxKit.PeerId
  final public let accessHash: TelegramCore.TelegramPeerAccessHash?
  final public let title: Swift.String
  final public let username: Swift.String?
  final public let photo: [TelegramCore.TelegramMediaImageRepresentation]
  final public let creationDate: Swift.Int32
  final public let version: Swift.Int32
  final public let participationStatus: TelegramCore.TelegramChannelParticipationStatus
  final public let info: TelegramCore.TelegramChannelInfo
  final public let flags: TelegramCore.TelegramChannelFlags
  final public let restrictionInfo: TelegramCore.PeerAccessRestrictionInfo?
  final public let adminRights: TelegramCore.TelegramChatAdminRights?
  final public let bannedRights: TelegramCore.TelegramChatBannedRights?
  final public let defaultBannedRights: TelegramCore.TelegramChatBannedRights?
  final public let usernames: [TelegramCore.TelegramPeerUsername]
  final public var indexName: PostboxKit.PeerIndexNameRepresentation {
    get
  }
  final public var associatedMediaIds: [PostboxKit.MediaId]? {
    get
  }
  final public let associatedPeerId: PostboxKit.PeerId?
  final public let notificationSettingsPeerId: PostboxKit.PeerId?
  final public var timeoutAttribute: Swift.UInt32? {
    get
  }
  public init(id: PostboxKit.PeerId, accessHash: TelegramCore.TelegramPeerAccessHash?, title: Swift.String, username: Swift.String?, photo: [TelegramCore.TelegramMediaImageRepresentation], creationDate: Swift.Int32, version: Swift.Int32, participationStatus: TelegramCore.TelegramChannelParticipationStatus, info: TelegramCore.TelegramChannelInfo, flags: TelegramCore.TelegramChannelFlags, restrictionInfo: TelegramCore.PeerAccessRestrictionInfo?, adminRights: TelegramCore.TelegramChatAdminRights?, bannedRights: TelegramCore.TelegramChatBannedRights?, defaultBannedRights: TelegramCore.TelegramChatBannedRights?, usernames: [TelegramCore.TelegramPeerUsername])
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(_ other: PostboxKit.Peer) -> Swift.Bool
  public static func == (lhs: TelegramCore.TelegramChannel, rhs: TelegramCore.TelegramChannel) -> Swift.Bool
  final public func withUpdatedAddressName(_ addressName: Swift.String?) -> TelegramCore.TelegramChannel
  final public func withUpdatedAddressNames(_ addressNames: [TelegramCore.TelegramPeerUsername]) -> TelegramCore.TelegramChannel
  final public func withUpdatedDefaultBannedRights(_ defaultBannedRights: TelegramCore.TelegramChatBannedRights?) -> TelegramCore.TelegramChannel
  final public func withUpdatedFlags(_ flags: TelegramCore.TelegramChannelFlags) -> TelegramCore.TelegramChannel
  @objc deinit
}
public let defaultCloudPeerNotificationSound: TelegramCore.PeerMessageSound
public enum CloudSoundBuiltinCategory {
  case modern
  case classic
  public init?(id: Swift.Int64)
  public static func == (a: TelegramCore.CloudSoundBuiltinCategory, b: TelegramCore.CloudSoundBuiltinCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func getCloudLegacySound(id: Swift.Int64) -> (id: Swift.Int32, category: TelegramCore.CloudSoundBuiltinCategory)?
public enum PeerMuteState : Swift.Codable, Swift.Equatable {
  case `default`
  case unmuted
  case muted(until: Swift.Int32)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.PeerMuteState, b: TelegramCore.PeerMuteState) -> Swift.Bool
}
public enum PeerMessageSound : Swift.Equatable, Swift.Codable {
  public enum Id : Swift.Hashable {
    case none
    case `default`
    case bundledModern(id: Swift.Int32)
    case bundledClassic(id: Swift.Int32)
    case cloud(fileId: Swift.Int64)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: TelegramCore.PeerMessageSound.Id, b: TelegramCore.PeerMessageSound.Id) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  case none
  case `default`
  case bundledModern(id: Swift.Int32)
  case bundledClassic(id: Swift.Int32)
  case cloud(fileId: Swift.Int64)
  public var id: TelegramCore.PeerMessageSound.Id {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.PeerMessageSound, rhs: TelegramCore.PeerMessageSound) -> Swift.Bool
}
public enum PeerNotificationDisplayPreviews : Swift.Equatable, Swift.Codable {
  case `default`
  case show
  case hide
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.PeerNotificationDisplayPreviews, b: TelegramCore.PeerNotificationDisplayPreviews) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class TelegramPeerNotificationSettings : PostboxKit.PeerNotificationSettings, Swift.Codable, Swift.Equatable {
  final public let muteState: TelegramCore.PeerMuteState
  final public let messageSound: TelegramCore.PeerMessageSound
  final public let displayPreviews: TelegramCore.PeerNotificationDisplayPreviews
  public static var defaultSettings: TelegramCore.TelegramPeerNotificationSettings {
    get
  }
  final public func isRemovedFromTotalUnreadCount(default: Swift.Bool) -> Swift.Bool
  final public var behavior: PostboxKit.PeerNotificationSettingsBehavior {
    get
  }
  public init(muteState: TelegramCore.PeerMuteState, messageSound: TelegramCore.PeerMessageSound, displayPreviews: TelegramCore.PeerNotificationDisplayPreviews)
  public init(decoder: PostboxKit.PostboxDecoder)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to: PostboxKit.PeerNotificationSettings) -> Swift.Bool
  final public func withUpdatedMuteState(_ muteState: TelegramCore.PeerMuteState) -> TelegramCore.TelegramPeerNotificationSettings
  final public func withUpdatedMessageSound(_ messageSound: TelegramCore.PeerMessageSound) -> TelegramCore.TelegramPeerNotificationSettings
  final public func withUpdatedDisplayPreviews(_ displayPreviews: TelegramCore.PeerNotificationDisplayPreviews) -> TelegramCore.TelegramPeerNotificationSettings
  public static func == (lhs: TelegramCore.TelegramPeerNotificationSettings, rhs: TelegramCore.TelegramPeerNotificationSettings) -> Swift.Bool
  @objc deinit
}
public class AuthorSignatureMessageAttribute : PostboxKit.MessageAttribute {
  final public let signature: Swift.String
  final public let associatedPeerIds: [PostboxKit.PeerId]
  public init(signature: Swift.String)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
final public class TelegramMediaContact : PostboxKit.Media {
  final public let id: PostboxKit.MediaId?
  final public let firstName: Swift.String
  final public let lastName: Swift.String
  final public let phoneNumber: Swift.String
  final public let peerId: PostboxKit.PeerId?
  final public let vCardData: Swift.String?
  final public let peerIds: [PostboxKit.PeerId]
  public init(firstName: Swift.String, lastName: Swift.String, phoneNumber: Swift.String, peerId: PostboxKit.PeerId?, vCardData: Swift.String?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to other: PostboxKit.Media) -> Swift.Bool
  final public func isSemanticallyEqual(to other: PostboxKit.Media) -> Swift.Bool
  @objc deinit
}
public enum TranslationError {
  case generic
  case invalidMessageId
  case textIsEmpty
  case textTooLong
  case invalidLanguage
  case limitExceeded
  public static func == (a: TelegramCore.TranslationError, b: TelegramCore.TranslationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum EngineAudioTranscriptionResult {
  case success
  case error
  public static func == (a: TelegramCore.EngineAudioTranscriptionResult, b: TelegramCore.EngineAudioTranscriptionResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class CachedResolvedByNamePeer : Swift.Codable {
  final public let peerId: PostboxKit.PeerId?
  final public let timestamp: Swift.Int32
  public static func key(name: Swift.String) -> PostboxKit.ValueBoxKey
  public init(peerId: PostboxKit.PeerId?, timestamp: Swift.Int32)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
final public class AttachMenuBots : Swift.Equatable, Swift.Codable {
  final public class Bot : Swift.Equatable, Swift.Codable {
    public enum IconName : Swift.Int32, Swift.Codable {
      case `default`
      case iOSStatic
      case iOSAnimated
      case macOSAnimated
      case placeholder
      public init?(rawValue: Swift.Int32)
      public typealias RawValue = Swift.Int32
      public var rawValue: Swift.Int32 {
        get
      }
    }
    public struct Flags : Swift.OptionSet {
      public var rawValue: Swift.Int32
      public init(rawValue: Swift.Int32)
      public init()
      public static let hasSettings: TelegramCore.AttachMenuBots.Bot.Flags
      public static let requiresWriteAccess: TelegramCore.AttachMenuBots.Bot.Flags
      public typealias ArrayLiteralElement = TelegramCore.AttachMenuBots.Bot.Flags
      public typealias Element = TelegramCore.AttachMenuBots.Bot.Flags
      public typealias RawValue = Swift.Int32
    }
    public struct PeerFlags : Swift.OptionSet, Swift.Codable {
      public var rawValue: Swift.UInt32
      public init(rawValue: Swift.UInt32)
      public init()
      public static let sameBot: TelegramCore.AttachMenuBots.Bot.PeerFlags
      public static let bot: TelegramCore.AttachMenuBots.Bot.PeerFlags
      public static let user: TelegramCore.AttachMenuBots.Bot.PeerFlags
      public static let group: TelegramCore.AttachMenuBots.Bot.PeerFlags
      public static let channel: TelegramCore.AttachMenuBots.Bot.PeerFlags
      public static var all: TelegramCore.AttachMenuBots.Bot.PeerFlags {
        get
      }
      public static var `default`: TelegramCore.AttachMenuBots.Bot.PeerFlags {
        get
      }
      public typealias ArrayLiteralElement = TelegramCore.AttachMenuBots.Bot.PeerFlags
      public typealias Element = TelegramCore.AttachMenuBots.Bot.PeerFlags
      public typealias RawValue = Swift.UInt32
    }
    final public let peerId: PostboxKit.PeerId
    final public let name: Swift.String
    final public let icons: [TelegramCore.AttachMenuBots.Bot.IconName : TelegramCore.TelegramMediaFile]
    final public let peerTypes: TelegramCore.AttachMenuBots.Bot.PeerFlags
    final public let flags: TelegramCore.AttachMenuBots.Bot.Flags
    public init(peerId: PostboxKit.PeerId, name: Swift.String, icons: [TelegramCore.AttachMenuBots.Bot.IconName : TelegramCore.TelegramMediaFile], peerTypes: TelegramCore.AttachMenuBots.Bot.PeerFlags, flags: TelegramCore.AttachMenuBots.Bot.Flags)
    public static func == (lhs: TelegramCore.AttachMenuBots.Bot, rhs: TelegramCore.AttachMenuBots.Bot) -> Swift.Bool
    public init(from decoder: Swift.Decoder) throws
    final public func encode(to encoder: Swift.Encoder) throws
    @objc deinit
  }
  final public let hash: Swift.Int64
  final public let bots: [TelegramCore.AttachMenuBots.Bot]
  public init(hash: Swift.Int64, bots: [TelegramCore.AttachMenuBots.Bot])
  public static func == (lhs: TelegramCore.AttachMenuBots, rhs: TelegramCore.AttachMenuBots) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public enum AddBotToAttachMenuError {
  case generic
  public static func == (a: TelegramCore.AddBotToAttachMenuError, b: TelegramCore.AddBotToAttachMenuError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AttachMenuBot {
  public let peer: PostboxKit.Peer
  public let shortName: Swift.String
  public let icons: [TelegramCore.AttachMenuBots.Bot.IconName : TelegramCore.TelegramMediaFile]
  public let peerTypes: TelegramCore.AttachMenuBots.Bot.PeerFlags
  public let flags: TelegramCore.AttachMenuBots.Bot.Flags
}
public enum GetAttachMenuBotError {
  case generic
  public static func == (a: TelegramCore.GetAttachMenuBotError, b: TelegramCore.GetAttachMenuBotError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func _internal_getAttachMenuBot(postbox: PostboxKit.Postbox, network: TelegramCore.Network, botId: PostboxKit.PeerId, cached: Swift.Bool) -> SwiftSignalKit.Signal<TelegramCore.AttachMenuBot, TelegramCore.GetAttachMenuBotError>
final public class RemoteStorageConfiguration : Swift.Codable, Swift.Equatable {
  final public let webDocumentsHostDatacenterId: Swift.Int32
  public init(webDocumentsHostDatacenterId: Swift.Int32)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.RemoteStorageConfiguration, rhs: TelegramCore.RemoteStorageConfiguration) -> Swift.Bool
  @objc deinit
}
public enum RemoveGroupAdminError {
  case generic
  public static func == (a: TelegramCore.RemoveGroupAdminError, b: TelegramCore.RemoveGroupAdminError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AddGroupAdminError {
  case generic
  case addMemberError(TelegramCore.AddGroupMemberError)
  case adminsTooMuch
}
public enum UpdateChannelAdminRightsError {
  case generic
  case addMemberError(TelegramCore.AddChannelMemberError)
  case adminsTooMuch
}
final public class SecretChatEncryptionConfig : PostboxKit.PostboxCoding {
  final public let g: Swift.Int32
  final public let p: PostboxKit.MemoryBuffer
  final public let version: Swift.Int32
  public init(g: Swift.Int32, p: PostboxKit.MemoryBuffer, version: Swift.Int32)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
final public class FeaturedStickersConfiguration : Swift.Codable {
  final public let isPremium: Swift.Bool
  public init(isPremium: Swift.Bool)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public class AutoremoveTimeoutMessageAttribute : PostboxKit.MessageAttribute {
  final public let timeout: Swift.Int32
  final public let countdownBeginTime: Swift.Int32?
  public var associatedMessageIds: [PostboxKit.MessageId]
  final public let automaticTimestampBasedAttribute: (Swift.UInt16, Swift.Int32)?
  public init(timeout: Swift.Int32, countdownBeginTime: Swift.Int32?)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public class AutoclearTimeoutMessageAttribute : PostboxKit.MessageAttribute {
  final public let timeout: Swift.Int32
  final public let countdownBeginTime: Swift.Int32?
  public var associatedMessageIds: [PostboxKit.MessageId]
  final public let automaticTimestampBasedAttribute: (Swift.UInt16, Swift.Int32)?
  public init(timeout: Swift.Int32, countdownBeginTime: Swift.Int32?)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
extension PostboxKit.Message {
  final public var autoremoveAttribute: TelegramCore.AutoremoveTimeoutMessageAttribute? {
    get
  }
  final public var autoclearAttribute: TelegramCore.AutoclearTimeoutMessageAttribute? {
    get
  }
  final public var minAutoremoveOrClearTimeout: Swift.Int32? {
    get
  }
  final public var containsSecretMedia: Swift.Bool {
    get
  }
  final public var isSelfExpiring: Swift.Bool {
    get
  }
}
public class ReplyThreadMessageAttribute : PostboxKit.MessageAttribute {
  final public let count: Swift.Int32
  final public let latestUsers: [PostboxKit.PeerId]
  final public let commentsPeerId: PostboxKit.PeerId?
  final public let maxMessageId: PostboxKit.MessageId.Id?
  final public let maxReadMessageId: PostboxKit.MessageId.Id?
  public var associatedPeerIds: [PostboxKit.PeerId] {
    get
  }
  public init(count: Swift.Int32, latestUsers: [PostboxKit.PeerId], commentsPeerId: PostboxKit.PeerId?, maxMessageId: PostboxKit.MessageId.Id?, maxReadMessageId: PostboxKit.MessageId.Id?)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class Notices {
    final public func set<T>(id: PostboxKit.NoticeEntryKey, item: T?) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError> where T : Swift.Decodable, T : Swift.Encodable
    @objc deinit
  }
}
public enum UpdatePeerTitleError {
  case generic
  public static func == (a: TelegramCore.UpdatePeerTitleError, b: TelegramCore.UpdatePeerTitleError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UpdatePeerDescriptionError {
  case generic
  public static func == (a: TelegramCore.UpdatePeerDescriptionError, b: TelegramCore.UpdatePeerDescriptionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SecureIdPreparePhoneVerificationError {
  case generic
  case flood
  public static func == (a: TelegramCore.SecureIdPreparePhoneVerificationError, b: TelegramCore.SecureIdPreparePhoneVerificationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SecureIdPreparePhoneVerificationPayload {
  public let type: TelegramCore.SentAuthorizationCodeType
  public let nextType: TelegramCore.AuthorizationCodeNextType?
  public let timeout: Swift.Int32?
}
public func secureIdPreparePhoneVerification(network: TelegramCore.Network, value: TelegramCore.SecureIdPhoneValue) -> SwiftSignalKit.Signal<TelegramCore.SecureIdPreparePhoneVerificationPayload, TelegramCore.SecureIdPreparePhoneVerificationError>
public enum SecureIdCommitPhoneVerificationError {
  case generic
  case flood
  case invalid
  public static func == (a: TelegramCore.SecureIdCommitPhoneVerificationError, b: TelegramCore.SecureIdCommitPhoneVerificationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func secureIdCommitPhoneVerification(postbox: PostboxKit.Postbox, network: TelegramCore.Network, context: TelegramCore.SecureIdAccessContext, payload: TelegramCore.SecureIdPreparePhoneVerificationPayload, code: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.SecureIdValueWithContext, TelegramCore.SecureIdCommitPhoneVerificationError>
public enum SecureIdPrepareEmailVerificationError {
  case generic
  case invalidEmail
  case flood
  public static func == (a: TelegramCore.SecureIdPrepareEmailVerificationError, b: TelegramCore.SecureIdPrepareEmailVerificationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SecureIdPrepareEmailVerificationPayload {
  public let length: Swift.Int32
}
public func secureIdPrepareEmailVerification(network: TelegramCore.Network, value: TelegramCore.SecureIdEmailValue) -> SwiftSignalKit.Signal<TelegramCore.SecureIdPrepareEmailVerificationPayload, TelegramCore.SecureIdPrepareEmailVerificationError>
public enum SecureIdCommitEmailVerificationError {
  case generic
  case flood
  case invalid
  public static func == (a: TelegramCore.SecureIdCommitEmailVerificationError, b: TelegramCore.SecureIdCommitEmailVerificationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func secureIdCommitEmailVerification(postbox: PostboxKit.Postbox, network: TelegramCore.Network, context: TelegramCore.SecureIdAccessContext, payload: TelegramCore.SecureIdPrepareEmailVerificationPayload, code: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.SecureIdValueWithContext, TelegramCore.SecureIdCommitEmailVerificationError>
extension TelegramCore.TelegramEngine.EngineData.Item {
  public enum Notices {
    public struct Notice : TelegramCore.TelegramEngineDataItem {
      public typealias Result = PostboxKit.CodableEntry?
      public init(key: PostboxKit.NoticeEntryKey)
    }
  }
}
public func updateLoggingSettings(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, _ f: @escaping (TelegramCore.LoggingSettings) -> TelegramCore.LoggingSettings) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public struct ArchivedStickerPacksInfoId {
  public let rawValue: PostboxKit.MemoryBuffer
  public let id: Swift.Int32
}
@_hasMissingDesignatedInitializers final public class ArchivedStickerPacksInfo : Swift.Codable {
  final public let count: Swift.Int32
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public class SendAsMessageAttribute : PostboxKit.MessageAttribute {
  final public let peerId: PostboxKit.PeerId
  public init(peerId: PostboxKit.PeerId)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public enum CallListViewType {
  case all
  case missed
  public static func == (a: TelegramCore.CallListViewType, b: TelegramCore.CallListViewType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CallListViewEntry {
  case message(PostboxKit.Message, [PostboxKit.Message])
  case hole(PostboxKit.MessageIndex)
}
@_hasMissingDesignatedInitializers final public class CallListView {
  final public let entries: [TelegramCore.CallListViewEntry]
  final public let earlier: PostboxKit.MessageIndex?
  final public let later: PostboxKit.MessageIndex?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AccountViewTracker {
  final public var orderedPreloadMedia: SwiftSignalKit.Signal<[TelegramCore.ChatHistoryPreloadMediaItem], SwiftSignalKit.NoError> {
    get
  }
  final public let chatListPreloadItems: SwiftSignalKit.Promise<Swift.Set<TelegramCore.ChatHistoryPreloadItem>>
  @objc deinit
  public struct UpdatedMessageReplyInfo {
  }
  final public func replyInfoForMessageId(_ id: PostboxKit.MessageId) -> SwiftSignalKit.Signal<TelegramCore.AccountViewTracker.UpdatedMessageReplyInfo?, SwiftSignalKit.NoError>
  final public func updateReplyInfoForMessageId(_ id: PostboxKit.MessageId, info: TelegramCore.AccountViewTracker.UpdatedMessageReplyInfo)
  final public func updateViewCountForMessageIds(messageIds: Swift.Set<PostboxKit.MessageId>, clientId: Swift.Int32)
  final public func updateReactionsForMessageIds(messageIds: Swift.Set<PostboxKit.MessageId>, force: Swift.Bool = false)
  final public func updateSeenLiveLocationForMessageIds(messageIds: Swift.Set<PostboxKit.MessageId>)
  final public func updatedExtendedMediaForMessageIds(messageIds: Swift.Set<PostboxKit.MessageId>)
  final public func updateUnsupportedMediaForMessageIds(messageIds: Swift.Set<PostboxKit.MessageId>)
  final public func refreshSecretMediaMediaForMessageIds(messageIds: Swift.Set<PostboxKit.MessageId>)
  final public func updateMarkAllMentionsSeen(peerId: PostboxKit.PeerId, threadId: Swift.Int64?)
  final public func updateMarkMentionsSeenForMessageIds(messageIds: Swift.Set<PostboxKit.MessageId>)
  final public func updateMarkAllReactionsSeen(peerId: PostboxKit.PeerId, threadId: Swift.Int64?)
  final public func updateMarkReactionsSeenForMessageIds(messageIds: Swift.Set<PostboxKit.MessageId>)
  final public func forceUpdateCachedPeerData(peerId: PostboxKit.PeerId)
  final public func polledChannel(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
  final public func scheduledMessagesViewForLocation(_ chatLocation: PostboxKit.ChatLocationInput, additionalData: [PostboxKit.AdditionalMessageHistoryViewData] = []) -> SwiftSignalKit.Signal<(PostboxKit.MessageHistoryView, PostboxKit.ViewUpdateType, PostboxKit.InitialMessageHistoryData?), SwiftSignalKit.NoError>
  final public func aroundMessageOfInterestHistoryViewForLocation(_ chatLocation: PostboxKit.ChatLocationInput, ignoreMessagesInTimestampRange: Swift.ClosedRange<Swift.Int32>? = nil, count: Swift.Int, tagMask: PostboxKit.MessageTags? = nil, appendMessagesFromTheSameGroup: Swift.Bool = false, orderStatistics: PostboxKit.MessageHistoryViewOrderStatistics = [], additionalData: [PostboxKit.AdditionalMessageHistoryViewData] = []) -> SwiftSignalKit.Signal<(PostboxKit.MessageHistoryView, PostboxKit.ViewUpdateType, PostboxKit.InitialMessageHistoryData?), SwiftSignalKit.NoError>
  final public func aroundIdMessageHistoryViewForLocation(_ chatLocation: PostboxKit.ChatLocationInput, ignoreMessagesInTimestampRange: Swift.ClosedRange<Swift.Int32>? = nil, count: Swift.Int, ignoreRelatedChats: Swift.Bool, messageId: PostboxKit.MessageId, tagMask: PostboxKit.MessageTags? = nil, appendMessagesFromTheSameGroup: Swift.Bool = false, orderStatistics: PostboxKit.MessageHistoryViewOrderStatistics = [], additionalData: [PostboxKit.AdditionalMessageHistoryViewData] = []) -> SwiftSignalKit.Signal<(PostboxKit.MessageHistoryView, PostboxKit.ViewUpdateType, PostboxKit.InitialMessageHistoryData?), SwiftSignalKit.NoError>
  final public func aroundMessageHistoryViewForLocation(_ chatLocation: PostboxKit.ChatLocationInput, ignoreMessagesInTimestampRange: Swift.ClosedRange<Swift.Int32>? = nil, index: PostboxKit.MessageHistoryAnchorIndex, anchorIndex: PostboxKit.MessageHistoryAnchorIndex, count: Swift.Int, clipHoles: Swift.Bool = true, ignoreRelatedChats: Swift.Bool = false, fixedCombinedReadStates: PostboxKit.MessageHistoryViewReadState?, tagMask: PostboxKit.MessageTags? = nil, appendMessagesFromTheSameGroup: Swift.Bool = false, orderStatistics: PostboxKit.MessageHistoryViewOrderStatistics = [], additionalData: [PostboxKit.AdditionalMessageHistoryViewData] = []) -> SwiftSignalKit.Signal<(PostboxKit.MessageHistoryView, PostboxKit.ViewUpdateType, PostboxKit.InitialMessageHistoryData?), SwiftSignalKit.NoError>
  final public func peerView(_ peerId: PostboxKit.PeerId, updateData: Swift.Bool = false) -> SwiftSignalKit.Signal<PostboxKit.PeerView, SwiftSignalKit.NoError>
  final public func featuredStickerPacks() -> SwiftSignalKit.Signal<[TelegramCore.FeaturedStickerPackItem], SwiftSignalKit.NoError>
  final public func featuredEmojiPacks() -> SwiftSignalKit.Signal<[TelegramCore.FeaturedStickerPackItem], SwiftSignalKit.NoError>
  final public func callListView(type: TelegramCore.CallListViewType, index: PostboxKit.MessageIndex, count: Swift.Int) -> SwiftSignalKit.Signal<TelegramCore.CallListView, SwiftSignalKit.NoError>
  final public func unseenPersonalMessagesAndReactionCount(peerId: PostboxKit.PeerId, threadId: Swift.Int64?) -> SwiftSignalKit.Signal<(mentionCount: Swift.Int32, reactionCount: Swift.Int32), SwiftSignalKit.NoError>
  final public func tailChatListView(groupId: PostboxKit.PeerGroupId, filterPredicate: PostboxKit.ChatListFilterPredicate? = nil, count: Swift.Int) -> SwiftSignalKit.Signal<(PostboxKit.ChatListView, PostboxKit.ViewUpdateType), SwiftSignalKit.NoError>
  final public func aroundChatListView(groupId: PostboxKit.PeerGroupId, filterPredicate: PostboxKit.ChatListFilterPredicate? = nil, index: PostboxKit.ChatListIndex, count: Swift.Int) -> SwiftSignalKit.Signal<(PostboxKit.ChatListView, PostboxKit.ViewUpdateType), SwiftSignalKit.NoError>
}
@_hasMissingDesignatedInitializers final public class EngineEncoder {
  public static func encode(_ value: Swift.Encodable) throws -> Foundation.Data
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class EngineDecoder {
  public static func decode<T>(_ type: T.Type, from data: Foundation.Data) throws -> T where T : Swift.Decodable
  @objc deinit
}
public struct TelegramChatAdminRightsFlags : Swift.OptionSet, Swift.Hashable {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public init()
  public static let canChangeInfo: TelegramCore.TelegramChatAdminRightsFlags
  public static let canPostMessages: TelegramCore.TelegramChatAdminRightsFlags
  public static let canEditMessages: TelegramCore.TelegramChatAdminRightsFlags
  public static let canDeleteMessages: TelegramCore.TelegramChatAdminRightsFlags
  public static let canBanUsers: TelegramCore.TelegramChatAdminRightsFlags
  public static let canInviteUsers: TelegramCore.TelegramChatAdminRightsFlags
  public static let canPinMessages: TelegramCore.TelegramChatAdminRightsFlags
  public static let canAddAdmins: TelegramCore.TelegramChatAdminRightsFlags
  public static let canBeAnonymous: TelegramCore.TelegramChatAdminRightsFlags
  public static let canManageCalls: TelegramCore.TelegramChatAdminRightsFlags
  public static let canManageTopics: TelegramCore.TelegramChatAdminRightsFlags
  public static var all: TelegramCore.TelegramChatAdminRightsFlags {
    get
  }
  public static var allChannel: TelegramCore.TelegramChatAdminRightsFlags {
    get
  }
  public static let internal_groupSpecific: TelegramCore.TelegramChatAdminRightsFlags
  public static let internal_broadcastSpecific: TelegramCore.TelegramChatAdminRightsFlags
  public static func peerSpecific(peer: TelegramCore.EnginePeer) -> TelegramCore.TelegramChatAdminRightsFlags
  public var count: Swift.Int {
    get
  }
  public typealias ArrayLiteralElement = TelegramCore.TelegramChatAdminRightsFlags
  public typealias Element = TelegramCore.TelegramChatAdminRightsFlags
  public typealias RawValue = Swift.Int32
}
public struct TelegramChatAdminRights : PostboxKit.PostboxCoding, Swift.Codable, Swift.Equatable {
  public let rights: TelegramCore.TelegramChatAdminRightsFlags
  public init(rights: TelegramCore.TelegramChatAdminRightsFlags)
  public init(decoder: PostboxKit.PostboxDecoder)
  public init(from decoder: Swift.Decoder) throws
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.TelegramChatAdminRights, rhs: TelegramCore.TelegramChatAdminRights) -> Swift.Bool
}
public enum AutodownloadPreset {
  case low
  case medium
  case high
  public static func == (a: TelegramCore.AutodownloadPreset, b: TelegramCore.AutodownloadPreset) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AutodownloadPresetSettings : Swift.Codable {
  public let disabled: Swift.Bool
  public let photoSizeMax: Swift.Int64
  public let videoSizeMax: Swift.Int64
  public let fileSizeMax: Swift.Int64
  public let preloadLargeVideo: Swift.Bool
  public let lessDataForPhoneCalls: Swift.Bool
  public let videoUploadMaxbitrate: Swift.Int32
  public init(disabled: Swift.Bool, photoSizeMax: Swift.Int64, videoSizeMax: Swift.Int64, fileSizeMax: Swift.Int64, preloadLargeVideo: Swift.Bool, lessDataForPhoneCalls: Swift.Bool, videoUploadMaxbitrate: Swift.Int32)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AutodownloadSettings : Swift.Codable {
  public let lowPreset: TelegramCore.AutodownloadPresetSettings
  public let mediumPreset: TelegramCore.AutodownloadPresetSettings
  public let highPreset: TelegramCore.AutodownloadPresetSettings
  public static var defaultSettings: TelegramCore.AutodownloadSettings {
    get
  }
  public init(lowPreset: TelegramCore.AutodownloadPresetSettings, mediumPreset: TelegramCore.AutodownloadPresetSettings, highPreset: TelegramCore.AutodownloadPresetSettings)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum SecureIdRequestedFormField : Swift.Equatable {
  case just(TelegramCore.SecureIdRequestedFormFieldValue)
  case oneOf([TelegramCore.SecureIdRequestedFormFieldValue])
  public static func == (a: TelegramCore.SecureIdRequestedFormField, b: TelegramCore.SecureIdRequestedFormField) -> Swift.Bool
}
public enum SecureIdRequestedFormFieldValue : Swift.Equatable {
  case personalDetails(nativeName: Swift.Bool)
  case passport(selfie: Swift.Bool, translation: Swift.Bool)
  case driversLicense(selfie: Swift.Bool, translation: Swift.Bool)
  case idCard(selfie: Swift.Bool, translation: Swift.Bool)
  case internalPassport(selfie: Swift.Bool, translation: Swift.Bool)
  case passportRegistration(translation: Swift.Bool)
  case address
  case utilityBill(translation: Swift.Bool)
  case bankStatement(translation: Swift.Bool)
  case rentalAgreement(translation: Swift.Bool)
  case phone
  case email
  case temporaryRegistration(translation: Swift.Bool)
  public static func == (a: TelegramCore.SecureIdRequestedFormFieldValue, b: TelegramCore.SecureIdRequestedFormFieldValue) -> Swift.Bool
}
public struct SecureIdForm : Swift.Equatable {
  public let peerId: PostboxKit.PeerId
  public let requestedFields: [TelegramCore.SecureIdRequestedFormField]
  public let values: [TelegramCore.SecureIdValueWithContext]
  public init(peerId: PostboxKit.PeerId, requestedFields: [TelegramCore.SecureIdRequestedFormField], values: [TelegramCore.SecureIdValueWithContext])
  public static func == (lhs: TelegramCore.SecureIdForm, rhs: TelegramCore.SecureIdForm) -> Swift.Bool
}
public enum StickerPackReference : PostboxKit.PostboxCoding, Swift.Hashable, Swift.Equatable, Swift.Codable {
  case id(id: Swift.Int64, accessHash: Swift.Int64)
  case name(Swift.String)
  case animatedEmoji
  case dice(Swift.String)
  case animatedEmojiAnimations
  case premiumGifts
  case emojiGenericAnimations
  case iconStatusEmoji
  case iconTopicEmoji
  public init(decoder: PostboxKit.PostboxDecoder)
  public init(from decoder: Swift.Decoder) throws
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.StickerPackReference, rhs: TelegramCore.StickerPackReference) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TelegramMediaVideoFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init()
  public init(rawValue: Swift.Int32)
  public static let instantRoundVideo: TelegramCore.TelegramMediaVideoFlags
  public static let supportsStreaming: TelegramCore.TelegramMediaVideoFlags
  public typealias ArrayLiteralElement = TelegramCore.TelegramMediaVideoFlags
  public typealias Element = TelegramCore.TelegramMediaVideoFlags
  public typealias RawValue = Swift.Int32
}
public struct StickerMaskCoords : PostboxKit.PostboxCoding, Swift.Equatable {
  public let n: Swift.Int32
  public let x: Swift.Double
  public let y: Swift.Double
  public let zoom: Swift.Double
  public init(n: Swift.Int32, x: Swift.Double, y: Swift.Double, zoom: Swift.Double)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.StickerMaskCoords, b: TelegramCore.StickerMaskCoords) -> Swift.Bool
}
public enum TelegramMediaFileAttribute : PostboxKit.PostboxCoding, Swift.Equatable {
  case FileName(fileName: Swift.String)
  case Sticker(displayText: Swift.String, packReference: TelegramCore.StickerPackReference?, maskData: TelegramCore.StickerMaskCoords?)
  case ImageSize(size: TelegramCore.PixelDimensions)
  case Animated
  case Video(duration: Swift.Int, size: TelegramCore.PixelDimensions, flags: TelegramCore.TelegramMediaVideoFlags)
  case Audio(isVoice: Swift.Bool, duration: Swift.Int, title: Swift.String?, performer: Swift.String?, waveform: Foundation.Data?)
  case HasLinkedStickers
  case hintFileIsLarge
  case hintIsValidated
  case NoPremium
  case CustomEmoji(isPremium: Swift.Bool, isSingleColor: Swift.Bool, alt: Swift.String, packReference: TelegramCore.StickerPackReference?)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.TelegramMediaFileAttribute, b: TelegramCore.TelegramMediaFileAttribute) -> Swift.Bool
}
public enum TelegramMediaFileReference : PostboxKit.PostboxCoding, Swift.Equatable {
  case cloud(fileId: Swift.Int64, accessHash: Swift.Int64, fileReference: Foundation.Data?)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.TelegramMediaFileReference, b: TelegramCore.TelegramMediaFileReference) -> Swift.Bool
}
public enum TelegramMediaFileDecodingError : Swift.Error {
  case generic
  public static func == (a: TelegramCore.TelegramMediaFileDecodingError, b: TelegramCore.TelegramMediaFileDecodingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class TelegramMediaFile : PostboxKit.Media, Swift.Equatable, Swift.Codable {
  final public class VideoThumbnail : Swift.Equatable, PostboxKit.PostboxCoding {
    final public let dimensions: TelegramCore.PixelDimensions
    final public let resource: TelegramCore.TelegramMediaResource
    public init(dimensions: TelegramCore.PixelDimensions, resource: TelegramCore.TelegramMediaResource)
    public init(decoder: PostboxKit.PostboxDecoder)
    final public func encode(_ encoder: PostboxKit.PostboxEncoder)
    public static func == (lhs: TelegramCore.TelegramMediaFile.VideoThumbnail, rhs: TelegramCore.TelegramMediaFile.VideoThumbnail) -> Swift.Bool
    @objc deinit
  }
  final public let fileId: PostboxKit.MediaId
  final public let partialReference: TelegramCore.PartialMediaReference?
  final public let resource: TelegramCore.TelegramMediaResource
  final public let previewRepresentations: [TelegramCore.TelegramMediaImageRepresentation]
  final public let videoThumbnails: [TelegramCore.TelegramMediaFile.VideoThumbnail]
  final public let immediateThumbnailData: Foundation.Data?
  final public let mimeType: Swift.String
  final public let size: Swift.Int64?
  final public let attributes: [TelegramCore.TelegramMediaFileAttribute]
  final public let peerIds: [PostboxKit.PeerId]
  final public var id: PostboxKit.MediaId? {
    get
  }
  final public var indexableText: Swift.String? {
    get
  }
  public init(fileId: PostboxKit.MediaId, partialReference: TelegramCore.PartialMediaReference?, resource: TelegramCore.TelegramMediaResource, previewRepresentations: [TelegramCore.TelegramMediaImageRepresentation], videoThumbnails: [TelegramCore.TelegramMediaFile.VideoThumbnail], immediateThumbnailData: Foundation.Data?, mimeType: Swift.String, size: Swift.Int64?, attributes: [TelegramCore.TelegramMediaFileAttribute])
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  required public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  final public var fileName: Swift.String? {
    get
  }
  final public var isSticker: Swift.Bool {
    get
  }
  final public var isStaticSticker: Swift.Bool {
    get
  }
  final public var isStaticEmoji: Swift.Bool {
    get
  }
  final public var isVideo: Swift.Bool {
    get
  }
  final public var isInstantVideo: Swift.Bool {
    get
  }
  final public var isAnimated: Swift.Bool {
    get
  }
  final public var isAnimatedSticker: Swift.Bool {
    get
  }
  final public var isPremiumSticker: Swift.Bool {
    get
  }
  final public var noPremium: Swift.Bool {
    get
  }
  final public var premiumEffect: TelegramCore.TelegramMediaFile.VideoThumbnail? {
    get
  }
  final public var isVideoSticker: Swift.Bool {
    get
  }
  final public var isCustomEmoji: Swift.Bool {
    get
  }
  final public var isCustomTemplateEmoji: Swift.Bool {
    get
  }
  final public var isPremiumEmoji: Swift.Bool {
    get
  }
  final public var isVideoEmoji: Swift.Bool {
    get
  }
  final public var hasLinkedStickers: Swift.Bool {
    get
  }
  final public var isMusic: Swift.Bool {
    get
  }
  final public var isVoice: Swift.Bool {
    get
  }
  final public func isEqual(to other: PostboxKit.Media) -> Swift.Bool
  final public func isSemanticallyEqual(to other: PostboxKit.Media) -> Swift.Bool
  final public func withUpdatedPartialReference(_ partialReference: TelegramCore.PartialMediaReference?) -> TelegramCore.TelegramMediaFile
  final public func withUpdatedResource(_ resource: TelegramCore.TelegramMediaResource) -> TelegramCore.TelegramMediaFile
  final public func withUpdatedSize(_ size: Swift.Int64?) -> TelegramCore.TelegramMediaFile
  final public func withUpdatedPreviewRepresentations(_ previewRepresentations: [TelegramCore.TelegramMediaImageRepresentation]) -> TelegramCore.TelegramMediaFile
  final public func withUpdatedAttributes(_ attributes: [TelegramCore.TelegramMediaFileAttribute]) -> TelegramCore.TelegramMediaFile
  @objc deinit
}
public func == (lhs: TelegramCore.TelegramMediaFile, rhs: TelegramCore.TelegramMediaFile) -> Swift.Bool
final public class RecentDownloadItem : Swift.Codable, Swift.Equatable {
  final public let messageId: PostboxKit.MessageId
  final public let resourceId: Swift.String
  final public let timestamp: Swift.Int32
  final public let isSeen: Swift.Bool
  public init(messageId: PostboxKit.MessageId, resourceId: Swift.String, timestamp: Swift.Int32, isSeen: Swift.Bool)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.RecentDownloadItem, rhs: TelegramCore.RecentDownloadItem) -> Swift.Bool
  @objc deinit
}
final public class RenderedRecentDownloadItem : Swift.Equatable {
  final public let message: PostboxKit.Message
  final public let timestamp: Swift.Int32
  final public let isSeen: Swift.Bool
  final public let resourceId: Swift.String
  final public let size: Swift.Int64
  public init(message: PostboxKit.Message, timestamp: Swift.Int32, isSeen: Swift.Bool, resourceId: Swift.String, size: Swift.Int64)
  public static func == (lhs: TelegramCore.RenderedRecentDownloadItem, rhs: TelegramCore.RenderedRecentDownloadItem) -> Swift.Bool
  @objc deinit
}
public func recentDownloadItems(postbox: PostboxKit.Postbox) -> SwiftSignalKit.Signal<[TelegramCore.RenderedRecentDownloadItem], SwiftSignalKit.NoError>
public func addRecentDownloadItem(postbox: PostboxKit.Postbox, item: TelegramCore.RecentDownloadItem) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
public func clearRecentDownloadList(postbox: PostboxKit.Postbox) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
public func markRecentDownloadItemsAsSeen(postbox: PostboxKit.Postbox, items: [(messageId: PostboxKit.MessageId, resourceId: Swift.String)]) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
public func markAllRecentDownloadItemsAsSeen(postbox: PostboxKit.Postbox) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
public struct SecureIdUtilityBillValue : Swift.Equatable {
  public var verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference]
  public var translations: [TelegramCore.SecureIdVerificationDocumentReference]
  public init(verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference], translations: [TelegramCore.SecureIdVerificationDocumentReference])
  public static func == (lhs: TelegramCore.SecureIdUtilityBillValue, rhs: TelegramCore.SecureIdUtilityBillValue) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class PendingUpdateMessageManager {
  final public var updatingMessageMedia: SwiftSignalKit.Signal<[PostboxKit.MessageId : TelegramCore.ChatUpdatingMessageMedia], SwiftSignalKit.NoError> {
    get
  }
  final public var errors: SwiftSignalKit.Signal<(PostboxKit.MessageId, TelegramCore.RequestEditMessageError), SwiftSignalKit.NoError> {
    get
  }
  final public func add(messageId: PostboxKit.MessageId, text: Swift.String, media: TelegramCore.RequestEditMessageMedia, entities: TelegramCore.TextEntitiesMessageAttribute?, inlineStickers: [PostboxKit.MediaId : PostboxKit.Media], disableUrlPreview: Swift.Bool = false)
  final public func cancel(messageId: PostboxKit.MessageId)
  @objc deinit
}
public struct TelegramChatBannedRightsFlags : Swift.OptionSet, Swift.Hashable {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public init()
  public static let banReadMessages: TelegramCore.TelegramChatBannedRightsFlags
  public static let banSendMedia: TelegramCore.TelegramChatBannedRightsFlags
  public static let banSendStickers: TelegramCore.TelegramChatBannedRightsFlags
  public static let banSendGifs: TelegramCore.TelegramChatBannedRightsFlags
  public static let banSendGames: TelegramCore.TelegramChatBannedRightsFlags
  public static let banSendInline: TelegramCore.TelegramChatBannedRightsFlags
  public static let banEmbedLinks: TelegramCore.TelegramChatBannedRightsFlags
  public static let banSendPolls: TelegramCore.TelegramChatBannedRightsFlags
  public static let banChangeInfo: TelegramCore.TelegramChatBannedRightsFlags
  public static let banAddMembers: TelegramCore.TelegramChatBannedRightsFlags
  public static let banPinMessages: TelegramCore.TelegramChatBannedRightsFlags
  public static let banManageTopics: TelegramCore.TelegramChatBannedRightsFlags
  public static let banSendPhotos: TelegramCore.TelegramChatBannedRightsFlags
  public static let banSendVideos: TelegramCore.TelegramChatBannedRightsFlags
  public static let banSendInstantVideos: TelegramCore.TelegramChatBannedRightsFlags
  public static let banSendMusic: TelegramCore.TelegramChatBannedRightsFlags
  public static let banSendVoice: TelegramCore.TelegramChatBannedRightsFlags
  public static let banSendFiles: TelegramCore.TelegramChatBannedRightsFlags
  public static let banSendText: TelegramCore.TelegramChatBannedRightsFlags
  public typealias ArrayLiteralElement = TelegramCore.TelegramChatBannedRightsFlags
  public typealias Element = TelegramCore.TelegramChatBannedRightsFlags
  public typealias RawValue = Swift.Int32
}
public struct TelegramChatBannedRights : PostboxKit.PostboxCoding, Swift.Equatable {
  public let flags: TelegramCore.TelegramChatBannedRightsFlags
  public let untilDate: Swift.Int32
  public init(flags: TelegramCore.TelegramChatBannedRightsFlags, untilDate: Swift.Int32)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.TelegramChatBannedRights, rhs: TelegramCore.TelegramChatBannedRights) -> Swift.Bool
}
public struct InactiveChannel : Swift.Equatable {
  public let peer: PostboxKit.Peer
  public let lastActivityDate: Swift.Int32
  public let participantsCount: Swift.Int32?
  public static func == (lhs: TelegramCore.InactiveChannel, rhs: TelegramCore.InactiveChannel) -> Swift.Bool
}
final public class ChannelState : PostboxKit.PeerChatState, Swift.Equatable, Swift.CustomStringConvertible {
  final public let pts: Swift.Int32
  final public let invalidatedPts: Swift.Int32?
  final public let synchronizedUntilMessageId: Swift.Int32?
  public init(pts: Swift.Int32, invalidatedPts: Swift.Int32?, synchronizedUntilMessageId: Swift.Int32?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func withUpdatedPts(_ pts: Swift.Int32) -> TelegramCore.ChannelState
  final public func withUpdatedInvalidatedPts(_ invalidatedPts: Swift.Int32?) -> TelegramCore.ChannelState
  final public func withUpdatedSynchronizedUntilMessageId(_ synchronizedUntilMessageId: Swift.Int32?) -> TelegramCore.ChannelState
  final public func equals(_ other: PostboxKit.PeerChatState) -> Swift.Bool
  final public var description: Swift.String {
    get
  }
  public static func == (lhs: TelegramCore.ChannelState, rhs: TelegramCore.ChannelState) -> Swift.Bool
  @objc deinit
}
public enum RequestChatContextResultsError {
  case generic
  case locationRequired
  public static func == (a: TelegramCore.RequestChatContextResultsError, b: TelegramCore.RequestChatContextResultsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class CachedChatContextResult : Swift.Codable {
  final public let data: Foundation.Data
  final public let timestamp: Swift.Int32
  public init(data: Foundation.Data, timestamp: Swift.Int32)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public struct RequestChatContextResultsResult {
  public let results: TelegramCore.ChatContextResultCollection
  public let isStale: Swift.Bool
  public init(results: TelegramCore.ChatContextResultCollection, isStale: Swift.Bool)
}
extension TelegramCore.TelegramEngine.EngineData.Item {
  public enum ItemCache {
    public struct Item : TelegramCore.TelegramEngineDataItem {
      public typealias Result = PostboxKit.CodableEntry?
      public init(collectionId: Swift.Int8, id: PostboxKit.ValueBoxKey)
    }
  }
}
extension TelegramCore.TelegramEngine.EngineData.Item {
  public enum ChatList {
  }
}
public enum RequestEditMessageMedia : Swift.Equatable {
  case keep
  case update(TelegramCore.AnyMediaReference)
  public static func == (a: TelegramCore.RequestEditMessageMedia, b: TelegramCore.RequestEditMessageMedia) -> Swift.Bool
}
public enum RequestEditMessageResult {
  case progress(Swift.Float)
  case done(Swift.Bool)
}
public enum RequestEditMessageError {
  case generic
  case restricted
  case textTooLong
  case invalidGrouping
  public static func == (a: TelegramCore.RequestEditMessageError, b: TelegramCore.RequestEditMessageError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TelegramMediaInvoiceFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public init()
  public static let isTest: TelegramCore.TelegramMediaInvoiceFlags
  public static let shippingAddressRequested: TelegramCore.TelegramMediaInvoiceFlags
  public typealias ArrayLiteralElement = TelegramCore.TelegramMediaInvoiceFlags
  public typealias Element = TelegramCore.TelegramMediaInvoiceFlags
  public typealias RawValue = Swift.Int32
}
public enum TelegramExtendedMedia : PostboxKit.PostboxCoding, Swift.Equatable {
  public static func == (lhs: TelegramCore.TelegramExtendedMedia, rhs: TelegramCore.TelegramExtendedMedia) -> Swift.Bool
  case preview(dimensions: TelegramCore.PixelDimensions?, immediateThumbnailData: Foundation.Data?, videoDuration: Swift.Int32?)
  case full(media: PostboxKit.Media)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
}
final public class TelegramMediaInvoice : PostboxKit.Media {
  public static let lastVersion: Swift.Int32
  final public var peerIds: [PostboxKit.PeerId]
  final public var id: PostboxKit.MediaId?
  final public let title: Swift.String
  final public let description: Swift.String
  final public let receiptMessageId: PostboxKit.MessageId?
  final public let currency: Swift.String
  final public let totalAmount: Swift.Int64
  final public let startParam: Swift.String
  final public let photo: TelegramCore.TelegramMediaWebFile?
  final public let flags: TelegramCore.TelegramMediaInvoiceFlags
  final public let extendedMedia: TelegramCore.TelegramExtendedMedia?
  final public let version: Swift.Int32
  public init(title: Swift.String, description: Swift.String, photo: TelegramCore.TelegramMediaWebFile?, receiptMessageId: PostboxKit.MessageId?, currency: Swift.String, totalAmount: Swift.Int64, startParam: Swift.String, extendedMedia: TelegramCore.TelegramExtendedMedia?, flags: TelegramCore.TelegramMediaInvoiceFlags, version: Swift.Int32)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to other: PostboxKit.Media) -> Swift.Bool
  final public func isSemanticallyEqual(to other: PostboxKit.Media) -> Swift.Bool
  final public func withUpdatedExtendedMedia(_ extendedMedia: TelegramCore.TelegramExtendedMedia) -> TelegramCore.TelegramMediaInvoice
  @objc deinit
}
public enum SynchronizeSavedStickersOperationContent : PostboxKit.PostboxCoding {
  case add(id: Swift.Int64, accessHash: Swift.Int64, fileReference: TelegramCore.FileMediaReference?)
  case remove(id: Swift.Int64, accessHash: Swift.Int64)
  case sync
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
}
final public class SynchronizeSavedStickersOperation : PostboxKit.PostboxCoding {
  final public let content: TelegramCore.SynchronizeSavedStickersOperationContent
  public init(content: TelegramCore.SynchronizeSavedStickersOperationContent)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
final public class FoundStickerItem : Swift.Equatable {
  final public let file: TelegramCore.TelegramMediaFile
  final public let stringRepresentations: [Swift.String]
  public init(file: TelegramCore.TelegramMediaFile, stringRepresentations: [Swift.String])
  public static func == (lhs: TelegramCore.FoundStickerItem, rhs: TelegramCore.FoundStickerItem) -> Swift.Bool
  @objc deinit
}
public struct SearchStickersScope : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public static let installed: TelegramCore.SearchStickersScope
  public static let remote: TelegramCore.SearchStickersScope
  public typealias ArrayLiteralElement = TelegramCore.SearchStickersScope
  public typealias Element = TelegramCore.SearchStickersScope
  public typealias RawValue = Swift.Int32
}
public struct FoundStickerSets {
  public var infos: [(PostboxKit.ItemCollectionId, PostboxKit.ItemCollectionInfo, PostboxKit.ItemCollectionItem?, Swift.Bool)]
  public let entries: [PostboxKit.ItemCollectionViewEntry]
  public init(infos: [(PostboxKit.ItemCollectionId, PostboxKit.ItemCollectionInfo, PostboxKit.ItemCollectionItem?, Swift.Bool)] = [], entries: [PostboxKit.ItemCollectionViewEntry] = [])
  public func withUpdatedInfosAndEntries(infos: [(PostboxKit.ItemCollectionId, PostboxKit.ItemCollectionInfo, PostboxKit.ItemCollectionItem?, Swift.Bool)], entries: [PostboxKit.ItemCollectionViewEntry]) -> TelegramCore.FoundStickerSets
  public func merge(with other: TelegramCore.FoundStickerSets) -> TelegramCore.FoundStickerSets
}
public func canSendMessagesToPeer(_ peer: PostboxKit.Peer) -> Swift.Bool
public struct SecureIdValueAccessContext : Swift.Equatable {
  public static func == (lhs: TelegramCore.SecureIdValueAccessContext, rhs: TelegramCore.SecureIdValueAccessContext) -> Swift.Bool
}
public func generateSecureIdValueEmptyAccessContext() -> TelegramCore.SecureIdValueAccessContext?
public func generateSecureIdValueAccessContext() -> TelegramCore.SecureIdValueAccessContext?
public struct NetworkSettings : Swift.Codable {
  public var reducedBackupDiscoveryTimeout: Swift.Bool
  public var applicationUpdateUrlPrefix: Swift.String?
  public var backupHostOverride: Swift.String?
  public static var defaultSettings: TelegramCore.NetworkSettings {
    get
  }
  public init(reducedBackupDiscoveryTimeout: Swift.Bool, applicationUpdateUrlPrefix: Swift.String?, backupHostOverride: Swift.String?)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PhoneNumberWithLabel : Swift.Equatable {
  public let label: Swift.String
  public let number: Swift.String
  public init(label: Swift.String, number: Swift.String)
  public static func == (lhs: TelegramCore.PhoneNumberWithLabel, rhs: TelegramCore.PhoneNumberWithLabel) -> Swift.Bool
}
public struct EmojiInteraction : Swift.Equatable {
  public struct Animation : Swift.Equatable {
    public let index: Swift.Int
    public let timeOffset: Swift.Float
    public init(index: Swift.Int, timeOffset: Swift.Float)
    public static func == (a: TelegramCore.EmojiInteraction.Animation, b: TelegramCore.EmojiInteraction.Animation) -> Swift.Bool
  }
  public let animations: [TelegramCore.EmojiInteraction.Animation]
  public init(animations: [TelegramCore.EmojiInteraction.Animation])
  public init?(apiDataJson: TelegramApi.Api.DataJSON)
  public var apiDataJson: TelegramApi.Api.DataJSON {
    get
  }
  public static func == (a: TelegramCore.EmojiInteraction, b: TelegramCore.EmojiInteraction) -> Swift.Bool
}
public enum PeerInputActivity : Swift.Comparable {
  case typingText
  case uploadingFile(progress: Swift.Int32)
  case recordingVoice
  case uploadingPhoto(progress: Swift.Int32)
  case uploadingVideo(progress: Swift.Int32)
  case playingGame
  case recordingInstantVideo
  case uploadingInstantVideo(progress: Swift.Int32)
  case speakingInGroupCall(timestamp: Swift.Int32)
  case choosingSticker
  case interactingWithEmoji(emoticon: Swift.String, messageId: PostboxKit.MessageId, interaction: TelegramCore.EmojiInteraction?)
  case seeingEmojiInteraction(emoticon: Swift.String)
  public var key: Swift.Int32 {
    get
  }
  public static func < (lhs: TelegramCore.PeerInputActivity, rhs: TelegramCore.PeerInputActivity) -> Swift.Bool
  public static func == (a: TelegramCore.PeerInputActivity, b: TelegramCore.PeerInputActivity) -> Swift.Bool
}
public func updateAutodownloadSettingsInteractively(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, _ f: @escaping (TelegramCore.AutodownloadSettings) -> TelegramCore.AutodownloadSettings) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public enum SynchronizeRecentlyUsedMediaOperationContent : PostboxKit.PostboxCoding {
  case add(id: Swift.Int64, accessHash: Swift.Int64, fileReference: TelegramCore.FileMediaReference?)
  case remove(id: Swift.Int64, accessHash: Swift.Int64)
  case clear
  case sync
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
}
final public class SynchronizeRecentlyUsedMediaOperation : PostboxKit.PostboxCoding {
  final public let content: TelegramCore.SynchronizeRecentlyUsedMediaOperationContent
  public init(content: TelegramCore.SynchronizeRecentlyUsedMediaOperationContent)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
final public class RegularChatState : PostboxKit.PeerChatState, Swift.Equatable {
  final public let invalidatedPts: Swift.Int32?
  public init(invalidatedPts: Swift.Int32?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func withUpdatedInvalidatedPts(_ invalidatedPts: Swift.Int32?) -> TelegramCore.RegularChatState
  final public func equals(_ other: PostboxKit.PeerChatState) -> Swift.Bool
  public static func == (lhs: TelegramCore.RegularChatState, rhs: TelegramCore.RegularChatState) -> Swift.Bool
  @objc deinit
}
public struct SecureIdAddressValue : Swift.Equatable {
  public var street1: Swift.String
  public var street2: Swift.String
  public var city: Swift.String
  public var state: Swift.String
  public var countryCode: Swift.String
  public var postcode: Swift.String
  public init(street1: Swift.String, street2: Swift.String, city: Swift.String, state: Swift.String, countryCode: Swift.String, postcode: Swift.String)
  public static func == (lhs: TelegramCore.SecureIdAddressValue, rhs: TelegramCore.SecureIdAddressValue) -> Swift.Bool
}
indirect public enum JSON : Swift.Codable, Swift.Equatable {
  case null
  case number(Swift.Double)
  case string(Swift.String)
  case bool(Swift.Bool)
  case array([TelegramCore.JSON])
  case dictionary([Swift.String : TelegramCore.JSON])
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public enum Index : Swift.Comparable {
    case array(Swift.Int)
    case dictionary(Swift.DictionaryIndex<Swift.String, TelegramCore.JSON>)
    case null
    public static func == (lhs: TelegramCore.JSON.Index, rhs: TelegramCore.JSON.Index) -> Swift.Bool
    public static func < (lhs: TelegramCore.JSON.Index, rhs: TelegramCore.JSON.Index) -> Swift.Bool
  }
  public static func == (a: TelegramCore.JSON, b: TelegramCore.JSON) -> Swift.Bool
}
public class PeerGroupMessageStateVersionAttribute : PostboxKit.MessageAttribute {
  final public let stateIndex: Swift.Int32
  public init(stateIndex: Swift.Int32)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public func standaloneMultipartFetch(postbox: PostboxKit.Postbox, network: TelegramCore.Network, resource: TelegramCore.TelegramMediaResource, datacenterId: Swift.Int, size: Swift.Int64?, intervals: SwiftSignalKit.Signal<[(Swift.Range<Swift.Int64>, PostboxKit.MediaBoxFetchPriority)], SwiftSignalKit.NoError>, parameters: PostboxKit.MediaResourceFetchParameters?, encryptionKey: TelegramCore.SecretFileEncryptionKey? = nil, decryptedSize: Swift.Int32? = nil, continueInBackground: Swift.Bool = false, useMainConnection: Swift.Bool = false) -> SwiftSignalKit.Signal<PostboxKit.MediaResourceDataFetchResult, PostboxKit.MediaResourceDataFetchError>
public func resourceFetchInfo(resource: TelegramCore.TelegramMediaResource) -> PostboxKit.MediaResourceFetchInfo?
public struct ChannelParticipantAdminInfo : PostboxKit.PostboxCoding, Swift.Equatable {
  public let rights: TelegramCore.TelegramChatAdminRights
  public let promotedBy: PostboxKit.PeerId
  public let canBeEditedByAccountPeer: Swift.Bool
  public init(rights: TelegramCore.TelegramChatAdminRights, promotedBy: PostboxKit.PeerId, canBeEditedByAccountPeer: Swift.Bool)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.ChannelParticipantAdminInfo, rhs: TelegramCore.ChannelParticipantAdminInfo) -> Swift.Bool
}
public struct ChannelParticipantBannedInfo : PostboxKit.PostboxCoding, Swift.Equatable {
  public let rights: TelegramCore.TelegramChatBannedRights
  public let restrictedBy: PostboxKit.PeerId
  public let timestamp: Swift.Int32
  public let isMember: Swift.Bool
  public init(rights: TelegramCore.TelegramChatBannedRights, restrictedBy: PostboxKit.PeerId, timestamp: Swift.Int32, isMember: Swift.Bool)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.ChannelParticipantBannedInfo, rhs: TelegramCore.ChannelParticipantBannedInfo) -> Swift.Bool
}
public enum ChannelParticipant : PostboxKit.PostboxCoding, Swift.Equatable {
  case creator(id: PostboxKit.PeerId, adminInfo: TelegramCore.ChannelParticipantAdminInfo?, rank: Swift.String?)
  case member(id: PostboxKit.PeerId, invitedAt: Swift.Int32, adminInfo: TelegramCore.ChannelParticipantAdminInfo?, banInfo: TelegramCore.ChannelParticipantBannedInfo?, rank: Swift.String?)
  public var peerId: PostboxKit.PeerId {
    get
  }
  public var rank: Swift.String? {
    get
  }
  public static func == (lhs: TelegramCore.ChannelParticipant, rhs: TelegramCore.ChannelParticipant) -> Swift.Bool
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
}
@_hasMissingDesignatedInitializers final public class CachedChannelParticipants : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let participants: [TelegramCore.ChannelParticipant]
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.CachedChannelParticipants, rhs: TelegramCore.CachedChannelParticipants) -> Swift.Bool
  @objc deinit
}
final public class TelegramEngine {
  final public let account: TelegramCore.Account
  public init(account: TelegramCore.Account)
  final public var secureId: TelegramCore.TelegramEngine.SecureId {
    get
    set
  }
  final public var peersNearby: TelegramCore.TelegramEngine.PeersNearby {
    get
    set
  }
  final public var payments: TelegramCore.TelegramEngine.Payments {
    get
    set
  }
  final public var peers: TelegramCore.TelegramEngine.Peers {
    get
    set
  }
  final public var auth: TelegramCore.TelegramEngine.Auth {
    get
    set
  }
  final public var accountData: TelegramCore.TelegramEngine.AccountData {
    get
    set
  }
  final public var stickers: TelegramCore.TelegramEngine.Stickers {
    get
    set
  }
  final public var localization: TelegramCore.TelegramEngine.Localization {
    get
    set
  }
  final public var themes: TelegramCore.TelegramEngine.Themes {
    get
    set
  }
  final public var messages: TelegramCore.TelegramEngine.Messages {
    get
    set
  }
  final public var privacy: TelegramCore.TelegramEngine.Privacy {
    get
    set
  }
  final public var calls: TelegramCore.TelegramEngine.Calls {
    get
    set
  }
  final public var historyImport: TelegramCore.TelegramEngine.HistoryImport {
    get
    set
  }
  final public var contacts: TelegramCore.TelegramEngine.Contacts {
    get
    set
  }
  final public var resources: TelegramCore.TelegramEngine.Resources {
    get
    set
  }
  final public var resolve: TelegramCore.TelegramEngine.Resolve {
    get
    set
  }
  final public var data: TelegramCore.TelegramEngine.EngineData {
    get
    set
  }
  final public var orderedLists: TelegramCore.TelegramEngine.OrderedLists {
    get
    set
  }
  final public var itemCache: TelegramCore.TelegramEngine.ItemCache {
    get
    set
  }
  final public var notices: TelegramCore.TelegramEngine.Notices {
    get
    set
  }
  final public var preferences: TelegramCore.TelegramEngine.Preferences {
    get
    set
  }
  @objc deinit
}
final public class TelegramEngineUnauthorized {
  final public let account: TelegramCore.UnauthorizedAccount
  public init(account: TelegramCore.UnauthorizedAccount)
  final public var auth: TelegramCore.TelegramEngineUnauthorized.Auth {
    get
    set
  }
  final public var localization: TelegramCore.TelegramEngineUnauthorized.Localization {
    get
    set
  }
  @objc deinit
}
public enum SomeTelegramEngine {
  case unauthorized(TelegramCore.TelegramEngineUnauthorized)
  case authorized(TelegramCore.TelegramEngine)
}
public func updatePeers(transaction: PostboxKit.Transaction, peers: [PostboxKit.Peer], update: (PostboxKit.Peer?, PostboxKit.Peer) -> PostboxKit.Peer?)
public enum UpdateGroupSpecificStickersetError {
  case generic
  public static func == (a: TelegramCore.UpdateGroupSpecificStickersetError, b: TelegramCore.UpdateGroupSpecificStickersetError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CachedPeerAutoremoveTimeout : Swift.Equatable, PostboxKit.PostboxCoding {
  public struct Value : Swift.Equatable, PostboxKit.PostboxCoding {
    public var peerValue: Swift.Int32
    public init(peerValue: Swift.Int32)
    public init(decoder: PostboxKit.PostboxDecoder)
    public func encode(_ encoder: PostboxKit.PostboxEncoder)
    public var effectiveValue: Swift.Int32 {
      get
    }
    public static func == (a: TelegramCore.CachedPeerAutoremoveTimeout.Value, b: TelegramCore.CachedPeerAutoremoveTimeout.Value) -> Swift.Bool
  }
  case unknown
  case known(TelegramCore.CachedPeerAutoremoveTimeout.Value?)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.CachedPeerAutoremoveTimeout, b: TelegramCore.CachedPeerAutoremoveTimeout) -> Swift.Bool
}
public enum CachedPeerProfilePhoto : Swift.Equatable, PostboxKit.PostboxCoding {
  case unknown
  case known(TelegramCore.TelegramMediaImage?)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.CachedPeerProfilePhoto, b: TelegramCore.CachedPeerProfilePhoto) -> Swift.Bool
}
public struct CachedPremiumGiftOption : Swift.Equatable, PostboxKit.PostboxCoding {
  public let months: Swift.Int32
  public let currency: Swift.String
  public let amount: Swift.Int64
  public let botUrl: Swift.String
  public let storeProductId: Swift.String?
  public init(months: Swift.Int32, currency: Swift.String, amount: Swift.Int64, botUrl: Swift.String, storeProductId: Swift.String?)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.CachedPremiumGiftOption, b: TelegramCore.CachedPremiumGiftOption) -> Swift.Bool
}
public struct PeerEmojiStatus : Swift.Equatable, Swift.Codable {
  public var fileId: Swift.Int64
  public var expirationDate: Swift.Int32?
  public init(fileId: Swift.Int64, expirationDate: Swift.Int32?)
  public static func == (a: TelegramCore.PeerEmojiStatus, b: TelegramCore.PeerEmojiStatus) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CachedUserFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init()
  public init(rawValue: Swift.Int32)
  public static let translationHidden: TelegramCore.CachedUserFlags
  public typealias ArrayLiteralElement = TelegramCore.CachedUserFlags
  public typealias Element = TelegramCore.CachedUserFlags
  public typealias RawValue = Swift.Int32
}
final public class CachedUserData : PostboxKit.CachedPeerData {
  final public let about: Swift.String?
  final public let botInfo: TelegramCore.BotInfo?
  final public let peerStatusSettings: TelegramCore.PeerStatusSettings?
  final public let pinnedMessageId: PostboxKit.MessageId?
  final public let isBlocked: Swift.Bool
  final public let commonGroupCount: Swift.Int32
  final public let voiceCallsAvailable: Swift.Bool
  final public let videoCallsAvailable: Swift.Bool
  final public let callsPrivate: Swift.Bool
  final public let canPinMessages: Swift.Bool
  final public let hasScheduledMessages: Swift.Bool
  final public let autoremoveTimeout: TelegramCore.CachedPeerAutoremoveTimeout
  final public let themeEmoticon: Swift.String?
  final public let photo: TelegramCore.CachedPeerProfilePhoto
  final public let personalPhoto: TelegramCore.CachedPeerProfilePhoto
  final public let fallbackPhoto: TelegramCore.CachedPeerProfilePhoto
  final public let premiumGiftOptions: [TelegramCore.CachedPremiumGiftOption]
  final public let voiceMessagesAvailable: Swift.Bool
  final public let flags: TelegramCore.CachedUserFlags
  final public let peerIds: Swift.Set<PostboxKit.PeerId>
  final public let messageIds: Swift.Set<PostboxKit.MessageId>
  final public let associatedHistoryMessageId: PostboxKit.MessageId?
  public init()
  public init(about: Swift.String?, botInfo: TelegramCore.BotInfo?, peerStatusSettings: TelegramCore.PeerStatusSettings?, pinnedMessageId: PostboxKit.MessageId?, isBlocked: Swift.Bool, commonGroupCount: Swift.Int32, voiceCallsAvailable: Swift.Bool, videoCallsAvailable: Swift.Bool, callsPrivate: Swift.Bool, canPinMessages: Swift.Bool, hasScheduledMessages: Swift.Bool, autoremoveTimeout: TelegramCore.CachedPeerAutoremoveTimeout, themeEmoticon: Swift.String?, photo: TelegramCore.CachedPeerProfilePhoto, personalPhoto: TelegramCore.CachedPeerProfilePhoto, fallbackPhoto: TelegramCore.CachedPeerProfilePhoto, premiumGiftOptions: [TelegramCore.CachedPremiumGiftOption], voiceMessagesAvailable: Swift.Bool, flags: TelegramCore.CachedUserFlags)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to: PostboxKit.CachedPeerData) -> Swift.Bool
  final public func withUpdatedAbout(_ about: Swift.String?) -> TelegramCore.CachedUserData
  final public func withUpdatedBotInfo(_ botInfo: TelegramCore.BotInfo?) -> TelegramCore.CachedUserData
  final public func withUpdatedPeerStatusSettings(_ peerStatusSettings: TelegramCore.PeerStatusSettings) -> TelegramCore.CachedUserData
  final public func withUpdatedPinnedMessageId(_ pinnedMessageId: PostboxKit.MessageId?) -> TelegramCore.CachedUserData
  final public func withUpdatedIsBlocked(_ isBlocked: Swift.Bool) -> TelegramCore.CachedUserData
  final public func withUpdatedCommonGroupCount(_ commonGroupCount: Swift.Int32) -> TelegramCore.CachedUserData
  final public func withUpdatedVoiceCallsAvailable(_ voiceCallsAvailable: Swift.Bool) -> TelegramCore.CachedUserData
  final public func withUpdatedVideoCallsAvailable(_ videoCallsAvailable: Swift.Bool) -> TelegramCore.CachedUserData
  final public func withUpdatedCallsPrivate(_ callsPrivate: Swift.Bool) -> TelegramCore.CachedUserData
  final public func withUpdatedCanPinMessages(_ canPinMessages: Swift.Bool) -> TelegramCore.CachedUserData
  final public func withUpdatedHasScheduledMessages(_ hasScheduledMessages: Swift.Bool) -> TelegramCore.CachedUserData
  final public func withUpdatedAutoremoveTimeout(_ autoremoveTimeout: TelegramCore.CachedPeerAutoremoveTimeout) -> TelegramCore.CachedUserData
  final public func withUpdatedThemeEmoticon(_ themeEmoticon: Swift.String?) -> TelegramCore.CachedUserData
  final public func withUpdatedPhoto(_ photo: TelegramCore.CachedPeerProfilePhoto) -> TelegramCore.CachedUserData
  final public func withUpdatedPersonalPhoto(_ personalPhoto: TelegramCore.CachedPeerProfilePhoto) -> TelegramCore.CachedUserData
  final public func withUpdatedFallbackPhoto(_ fallbackPhoto: TelegramCore.CachedPeerProfilePhoto) -> TelegramCore.CachedUserData
  final public func withUpdatedPremiumGiftOptions(_ premiumGiftOptions: [TelegramCore.CachedPremiumGiftOption]) -> TelegramCore.CachedUserData
  final public func withUpdatedVoiceMessagesAvailable(_ voiceMessagesAvailable: Swift.Bool) -> TelegramCore.CachedUserData
  final public func withUpdatedFlags(_ flags: TelegramCore.CachedUserFlags) -> TelegramCore.CachedUserData
  @objc deinit
}
public enum EngineConfiguration {
  public struct Limits : Swift.Equatable {
    public static let timeIntervalForever: Swift.Int32
    public var maxPinnedChatCount: Swift.Int32
    public var maxArchivedPinnedChatCount: Swift.Int32
    public var maxGroupMemberCount: Swift.Int32
    public var maxSupergroupMemberCount: Swift.Int32
    public var maxMessageForwardBatchSize: Swift.Int32
    public var maxSavedGifCount: Swift.Int32
    public var maxFavedStickerCount: Swift.Int32
    public var maxRecentStickerCount: Swift.Int32
    public var maxMessageEditingInterval: Swift.Int32
    public var maxMediaCaptionLength: Swift.Int32
    public var canRemoveIncomingMessagesInPrivateChats: Swift.Bool
    public var maxMessageRevokeInterval: Swift.Int32
    public var maxMessageRevokeIntervalInPrivateChats: Swift.Int32
    public init(maxPinnedChatCount: Swift.Int32, maxArchivedPinnedChatCount: Swift.Int32, maxGroupMemberCount: Swift.Int32, maxSupergroupMemberCount: Swift.Int32, maxMessageForwardBatchSize: Swift.Int32, maxSavedGifCount: Swift.Int32, maxFavedStickerCount: Swift.Int32, maxRecentStickerCount: Swift.Int32, maxMessageEditingInterval: Swift.Int32, maxMediaCaptionLength: Swift.Int32, canRemoveIncomingMessagesInPrivateChats: Swift.Bool, maxMessageRevokeInterval: Swift.Int32, maxMessageRevokeIntervalInPrivateChats: Swift.Int32)
    public static func == (a: TelegramCore.EngineConfiguration.Limits, b: TelegramCore.EngineConfiguration.Limits) -> Swift.Bool
  }
  public struct UserLimits : Swift.Equatable {
    public let maxPinnedChatCount: Swift.Int32
    public let maxChannelsCount: Swift.Int32
    public let maxPublicLinksCount: Swift.Int32
    public let maxSavedGifCount: Swift.Int32
    public let maxFavedStickerCount: Swift.Int32
    public let maxFoldersCount: Swift.Int32
    public let maxFolderChatsCount: Swift.Int32
    public let maxCaptionLength: Swift.Int32
    public let maxUploadFileParts: Swift.Int32
    public let maxAboutLength: Swift.Int32
    public let maxAnimatedEmojisInText: Swift.Int32
    public let maxReactionsPerMessage: Swift.Int32
    public static var defaultValue: TelegramCore.EngineConfiguration.UserLimits {
      get
    }
    public init(maxPinnedChatCount: Swift.Int32, maxChannelsCount: Swift.Int32, maxPublicLinksCount: Swift.Int32, maxSavedGifCount: Swift.Int32, maxFavedStickerCount: Swift.Int32, maxFoldersCount: Swift.Int32, maxFolderChatsCount: Swift.Int32, maxCaptionLength: Swift.Int32, maxUploadFileParts: Swift.Int32, maxAboutLength: Swift.Int32, maxAnimatedEmojisInText: Swift.Int32, maxReactionsPerMessage: Swift.Int32)
    public static func == (a: TelegramCore.EngineConfiguration.UserLimits, b: TelegramCore.EngineConfiguration.UserLimits) -> Swift.Bool
  }
}
public typealias EngineContentSettings = TelegramCore.ContentSettings
extension TelegramCore.EngineConfiguration.Limits {
  public init(_ limitsConfiguration: TelegramCore.LimitsConfiguration)
  public func _asLimits() -> TelegramCore.LimitsConfiguration
}
extension TelegramCore.EngineConfiguration.UserLimits {
  public init(_ userLimitsConfiguration: TelegramCore.UserLimitsConfiguration)
}
extension TelegramCore.EngineConfiguration {
  public struct SearchBots {
    public var imageBotUsername: Swift.String?
    public var gifBotUsername: Swift.String?
    public var venueBotUsername: Swift.String?
    public init(imageBotUsername: Swift.String?, gifBotUsername: Swift.String?, venueBotUsername: Swift.String?)
  }
}
extension TelegramCore.EngineConfiguration.SearchBots {
  public init(_ configuration: TelegramCore.SearchBotsConfiguration)
}
extension TelegramCore.TelegramEngine.EngineData.Item {
  public enum Configuration {
    public struct App : TelegramCore.TelegramEngineDataItem {
      public typealias Result = TelegramCore.AppConfiguration
      public init()
    }
    public struct Limits : TelegramCore.TelegramEngineDataItem {
      public typealias Result = TelegramCore.EngineConfiguration.Limits
      public init()
    }
    public struct UserLimits : TelegramCore.TelegramEngineDataItem {
      public typealias Result = TelegramCore.EngineConfiguration.UserLimits
      public init(isPremium: Swift.Bool)
    }
    public struct SuggestedLocalization : TelegramCore.TelegramEngineDataItem {
      public typealias Result = TelegramCore.SuggestedLocalizationEntry?
      public init()
    }
    public struct SearchBots : TelegramCore.TelegramEngineDataItem {
      public typealias Result = TelegramCore.EngineConfiguration.SearchBots
      public init()
    }
    public struct ApplicationSpecificPreference : TelegramCore.TelegramEngineDataItem {
      public typealias Result = PostboxKit.PreferencesEntry?
      public init(key: PostboxKit.ValueBoxKey)
    }
    public struct ContentSettings : TelegramCore.TelegramEngineDataItem {
      public typealias Result = TelegramCore.EngineContentSettings
      public init()
    }
    public struct LocalizationList : TelegramCore.TelegramEngineDataItem {
      public typealias Result = TelegramCore.LocalizationListState
      public init()
    }
    public struct PremiumPromo : TelegramCore.TelegramEngineDataItem {
      public typealias Result = TelegramCore.PremiumPromoConfiguration
      public init()
    }
    public struct GlobalAutoremoveTimeout : TelegramCore.TelegramEngineDataItem {
      public typealias Result = Swift.Int32?
      public init()
    }
  }
}
public func mergedMessageReactionsAndPeers(accountPeer: TelegramCore.EnginePeer?, message: PostboxKit.Message) -> (reactions: [TelegramCore.MessageReaction], peers: [(TelegramCore.MessageReaction.Reaction, TelegramCore.EnginePeer)])
public func mergedMessageReactions(attributes: [PostboxKit.MessageAttribute]) -> TelegramCore.ReactionsMessageAttribute?
public struct WallpaperSettings : Swift.Codable, Swift.Equatable {
  public var blur: Swift.Bool
  public var motion: Swift.Bool
  public var colors: [Swift.UInt32]
  public var intensity: Swift.Int32?
  public var rotation: Swift.Int32?
  public init(blur: Swift.Bool = false, motion: Swift.Bool = false, colors: [Swift.UInt32] = [], intensity: Swift.Int32? = nil, rotation: Swift.Int32? = nil)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.WallpaperSettings, rhs: TelegramCore.WallpaperSettings) -> Swift.Bool
}
public struct TelegramWallpaperNativeCodable : Swift.Codable {
  public let value: TelegramCore.TelegramWallpaper
  public init(_ value: TelegramCore.TelegramWallpaper)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum TelegramWallpaper : Swift.Equatable {
  public struct Gradient : Swift.Equatable {
    public var id: Swift.Int64?
    public var colors: [Swift.UInt32]
    public var settings: TelegramCore.WallpaperSettings
    public init(id: Swift.Int64?, colors: [Swift.UInt32], settings: TelegramCore.WallpaperSettings)
    public static func == (a: TelegramCore.TelegramWallpaper.Gradient, b: TelegramCore.TelegramWallpaper.Gradient) -> Swift.Bool
  }
  public struct File : Swift.Equatable {
    public var id: Swift.Int64
    public var accessHash: Swift.Int64
    public var isCreator: Swift.Bool
    public var isDefault: Swift.Bool
    public var isPattern: Swift.Bool
    public var isDark: Swift.Bool
    public var slug: Swift.String
    public var file: TelegramCore.TelegramMediaFile
    public var settings: TelegramCore.WallpaperSettings
    public init(id: Swift.Int64, accessHash: Swift.Int64, isCreator: Swift.Bool, isDefault: Swift.Bool, isPattern: Swift.Bool, isDark: Swift.Bool, slug: Swift.String, file: TelegramCore.TelegramMediaFile, settings: TelegramCore.WallpaperSettings)
    public static func == (a: TelegramCore.TelegramWallpaper.File, b: TelegramCore.TelegramWallpaper.File) -> Swift.Bool
  }
  case builtin(TelegramCore.WallpaperSettings)
  case color(Swift.UInt32)
  case gradient(TelegramCore.TelegramWallpaper.Gradient)
  case image([TelegramCore.TelegramMediaImageRepresentation], TelegramCore.WallpaperSettings)
  case file(TelegramCore.TelegramWallpaper.File)
  public var hasWallpaper: Swift.Bool {
    get
  }
  public static func == (lhs: TelegramCore.TelegramWallpaper, rhs: TelegramCore.TelegramWallpaper) -> Swift.Bool
  public func isBasicallyEqual(to wallpaper: TelegramCore.TelegramWallpaper) -> Swift.Bool
  public var settings: TelegramCore.WallpaperSettings? {
    get
  }
  public func withUpdatedSettings(_ settings: TelegramCore.WallpaperSettings) -> TelegramCore.TelegramWallpaper
}
public enum MessageActionCallbackResult {
  case none
  case alert(Swift.String)
  case toast(Swift.String)
  case url(Swift.String)
}
public enum MessageActionCallbackError {
  case generic
  case twoStepAuthMissing
  case twoStepAuthTooFresh(Swift.Int32)
  case authSessionTooFresh(Swift.Int32)
  case limitExceeded
  case requestPassword
  case invalidPassword
  case restricted
  case userBlocked
}
public enum MessageActionUrlAuthResult {
  case `default`
  case accepted(Swift.String)
  case request(Swift.String, PostboxKit.Peer, Swift.Bool)
}
public enum MessageActionUrlSubject {
  case message(id: PostboxKit.MessageId, buttonId: Swift.Int32)
  case url(Swift.String)
}
public enum SearchMessagesLocation : Swift.Equatable {
  case general(tags: PostboxKit.MessageTags?, minDate: Swift.Int32?, maxDate: Swift.Int32?)
  case group(groupId: PostboxKit.PeerGroupId, tags: PostboxKit.MessageTags?, minDate: Swift.Int32?, maxDate: Swift.Int32?)
  case peer(peerId: PostboxKit.PeerId, fromId: PostboxKit.PeerId?, tags: PostboxKit.MessageTags?, topMsgId: PostboxKit.MessageId?, minDate: Swift.Int32?, maxDate: Swift.Int32?)
  case publicForwards(messageId: PostboxKit.MessageId, datacenterId: Swift.Int?)
  case sentMedia(tags: PostboxKit.MessageTags?)
  public static func == (a: TelegramCore.SearchMessagesLocation, b: TelegramCore.SearchMessagesLocation) -> Swift.Bool
}
public struct SearchMessagesResult {
  public let messages: [PostboxKit.Message]
  public let threadInfo: [PostboxKit.MessageId : TelegramCore.MessageHistoryThreadData]
  public let readStates: [PostboxKit.PeerId : PostboxKit.CombinedPeerReadState]
  public let totalCount: Swift.Int32
  public let completed: Swift.Bool
  public init(messages: [PostboxKit.Message], readStates: [PostboxKit.PeerId : PostboxKit.CombinedPeerReadState], threadInfo: [PostboxKit.MessageId : TelegramCore.MessageHistoryThreadData], totalCount: Swift.Int32, completed: Swift.Bool)
}
public struct SearchMessagesState : Swift.Equatable {
  public static func == (a: TelegramCore.SearchMessagesState, b: TelegramCore.SearchMessagesState) -> Swift.Bool
}
public enum UpdatedRemotePeerError {
  case generic
  public static func == (a: TelegramCore.UpdatedRemotePeerError, b: TelegramCore.UpdatedRemotePeerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class Privacy {
    final public func requestUpdatePeerIsBlocked(peerId: PostboxKit.PeerId, isBlocked: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func activeSessions() -> TelegramCore.ActiveSessionsContext
    final public func webSessions() -> TelegramCore.WebSessionsContext
    final public func requestAccountPrivacySettings() -> SwiftSignalKit.Signal<TelegramCore.AccountPrivacySettings, SwiftSignalKit.NoError>
    final public func updateAccountAutoArchiveChats(value: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func updateAccountRemovalTimeout(timeout: Swift.Int32) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func updateGlobalMessageRemovalTimeout(timeout: Swift.Int32?) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func updatePhoneNumberDiscovery(value: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func updateSelectiveAccountPrivacySettings(type: TelegramCore.UpdateSelectiveAccountPrivacySettingsType, settings: TelegramCore.SelectivePrivacySettings) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    @objc deinit
  }
}
public func trace2(_ what: @autoclosure () -> Swift.String)
public func trace1(_ domain: Swift.String, what: @autoclosure () -> Swift.String)
public func registerLoggingFunctions()
final public class Logger {
  final public var logToFile: Swift.Bool {
    get
    set
  }
  final public var logToConsole: Swift.Bool {
    get
    set
  }
  final public var redactSensitiveData: Swift.Bool
  public static func setSharedLogger(_ logger: TelegramCore.Logger)
  public static var shared: TelegramCore.Logger {
    get
  }
  public init(rootPath: Swift.String, basePath: Swift.String)
  final public func collectLogs(prefix: Swift.String? = nil) -> SwiftSignalKit.Signal<[(Swift.String, Swift.String)], SwiftSignalKit.NoError>
  final public func collectLogs(basePath: Swift.String) -> SwiftSignalKit.Signal<[(Swift.String, Swift.String)], SwiftSignalKit.NoError>
  final public func collectShortLogFiles() -> SwiftSignalKit.Signal<[(Swift.String, Swift.String)], SwiftSignalKit.NoError>
  final public func collectShortLog() -> SwiftSignalKit.Signal<[(Swift.Double, Swift.String)], SwiftSignalKit.NoError>
  final public func log(_ tag: Swift.String, _ what: @autoclosure () -> Swift.String)
  final public func shortLog(_ tag: Swift.String, _ what: @autoclosure () -> Swift.String)
  @objc deinit
}
public struct DeepLinkInfo {
  public let message: Swift.String
  public let entities: [TelegramCore.MessageTextEntity]
  public let updateApp: Swift.Bool
}
final public class CachedRecentPeers : Swift.Codable {
  final public let enabled: Swift.Bool
  final public let ids: [PostboxKit.PeerId]
  public init(enabled: Swift.Bool, ids: [PostboxKit.PeerId])
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func cacheKey() -> PostboxKit.ValueBoxKey
  @objc deinit
}
final public class SecretChatFileReference : PostboxKit.PostboxCoding {
  final public let id: Swift.Int64
  final public let accessHash: Swift.Int64
  final public let size: Swift.Int64
  final public let datacenterId: Swift.Int32
  final public let keyFingerprint: Swift.Int32
  public init(id: Swift.Int64, accessHash: Swift.Int64, size: Swift.Int64, datacenterId: Swift.Int32, keyFingerprint: Swift.Int32)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public typealias AdminLogEventId = Swift.Int64
public struct AdminLogEvent : Swift.Comparable {
  public let id: TelegramCore.AdminLogEventId
  public let peerId: PostboxKit.PeerId
  public let date: Swift.Int32
  public let action: TelegramCore.AdminLogEventAction
  public static func == (lhs: TelegramCore.AdminLogEvent, rhs: TelegramCore.AdminLogEvent) -> Swift.Bool
  public static func < (lhs: TelegramCore.AdminLogEvent, rhs: TelegramCore.AdminLogEvent) -> Swift.Bool
}
public struct AdminLogEventsResult {
  public let peerId: PostboxKit.PeerId
  public let peers: [PostboxKit.PeerId : PostboxKit.Peer]
  public let events: [TelegramCore.AdminLogEvent]
}
public enum AdminLogEventAction {
  public struct ForumTopicInfo {
    public var info: PostboxKit.EngineMessageHistoryThread.Info
    public var isClosed: Swift.Bool
    public var isHidden: Swift.Bool
    public init(info: PostboxKit.EngineMessageHistoryThread.Info, isClosed: Swift.Bool, isHidden: Swift.Bool)
  }
  case changeTitle(prev: Swift.String, new: Swift.String)
  case changeAbout(prev: Swift.String, new: Swift.String)
  case changeUsername(prev: Swift.String, new: Swift.String)
  case changePhoto(prev: ([TelegramCore.TelegramMediaImageRepresentation], [TelegramCore.TelegramMediaImage.VideoRepresentation]), new: ([TelegramCore.TelegramMediaImageRepresentation], [TelegramCore.TelegramMediaImage.VideoRepresentation]))
  case toggleInvites(Swift.Bool)
  case toggleSignatures(Swift.Bool)
  case updatePinned(PostboxKit.Message?)
  case editMessage(prev: PostboxKit.Message, new: PostboxKit.Message)
  case deleteMessage(PostboxKit.Message)
  case participantJoin
  case participantLeave
  case participantInvite(TelegramCore.RenderedChannelParticipant)
  case participantToggleBan(prev: TelegramCore.RenderedChannelParticipant, new: TelegramCore.RenderedChannelParticipant)
  case participantToggleAdmin(prev: TelegramCore.RenderedChannelParticipant, new: TelegramCore.RenderedChannelParticipant)
  case changeStickerPack(prev: TelegramCore.StickerPackReference?, new: TelegramCore.StickerPackReference?)
  case togglePreHistoryHidden(Swift.Bool)
  case updateDefaultBannedRights(prev: TelegramCore.TelegramChatBannedRights, new: TelegramCore.TelegramChatBannedRights)
  case pollStopped(PostboxKit.Message)
  case linkedPeerUpdated(previous: PostboxKit.Peer?, updated: PostboxKit.Peer?)
  case changeGeoLocation(previous: TelegramCore.PeerGeoLocation?, updated: TelegramCore.PeerGeoLocation?)
  case updateSlowmode(previous: Swift.Int32?, updated: Swift.Int32?)
  case startGroupCall
  case endGroupCall
  case groupCallUpdateParticipantMuteStatus(peerId: PostboxKit.PeerId, isMuted: Swift.Bool)
  case updateGroupCallSettings(joinMuted: Swift.Bool)
  case groupCallUpdateParticipantVolume(peerId: PostboxKit.PeerId, volume: Swift.Int32)
  case deleteExportedInvitation(TelegramCore.ExportedInvitation)
  case revokeExportedInvitation(TelegramCore.ExportedInvitation)
  case editExportedInvitation(previous: TelegramCore.ExportedInvitation, updated: TelegramCore.ExportedInvitation)
  case participantJoinedViaInvite(TelegramCore.ExportedInvitation)
  case changeHistoryTTL(previousValue: Swift.Int32?, updatedValue: Swift.Int32?)
  case changeTheme(previous: Swift.String?, updated: Swift.String?)
  case participantJoinByRequest(invitation: TelegramCore.ExportedInvitation, approvedBy: PostboxKit.PeerId)
  case toggleCopyProtection(Swift.Bool)
  case sendMessage(PostboxKit.Message)
  case changeAvailableReactions(previousValue: TelegramCore.PeerAllowedReactions, updatedValue: TelegramCore.PeerAllowedReactions)
  case changeUsernames(prev: [Swift.String], new: [Swift.String])
  case createTopic(info: PostboxKit.EngineMessageHistoryThread.Info)
  case deleteTopic(info: PostboxKit.EngineMessageHistoryThread.Info)
  case editTopic(prevInfo: TelegramCore.AdminLogEventAction.ForumTopicInfo, newInfo: TelegramCore.AdminLogEventAction.ForumTopicInfo)
  case pinTopic(prevInfo: PostboxKit.EngineMessageHistoryThread.Info?, newInfo: PostboxKit.EngineMessageHistoryThread.Info?)
  case toggleForum(isForum: Swift.Bool)
  case toggleAntiSpam(isEnabled: Swift.Bool)
}
public enum ChannelAdminLogEventError {
  case generic
  public static func == (a: TelegramCore.ChannelAdminLogEventError, b: TelegramCore.ChannelAdminLogEventError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AdminLogEventsFlags : Swift.OptionSet {
  public var rawValue: Swift.UInt32
  public init(rawValue: Swift.UInt32)
  public init()
  public static let join: TelegramCore.AdminLogEventsFlags
  public static let leave: TelegramCore.AdminLogEventsFlags
  public static let invite: TelegramCore.AdminLogEventsFlags
  public static let ban: TelegramCore.AdminLogEventsFlags
  public static let unban: TelegramCore.AdminLogEventsFlags
  public static let kick: TelegramCore.AdminLogEventsFlags
  public static let unkick: TelegramCore.AdminLogEventsFlags
  public static let promote: TelegramCore.AdminLogEventsFlags
  public static let demote: TelegramCore.AdminLogEventsFlags
  public static let info: TelegramCore.AdminLogEventsFlags
  public static let settings: TelegramCore.AdminLogEventsFlags
  public static let pinnedMessages: TelegramCore.AdminLogEventsFlags
  public static let editMessages: TelegramCore.AdminLogEventsFlags
  public static let deleteMessages: TelegramCore.AdminLogEventsFlags
  public static let calls: TelegramCore.AdminLogEventsFlags
  public static let invites: TelegramCore.AdminLogEventsFlags
  public static let sendMessages: TelegramCore.AdminLogEventsFlags
  public static let forums: TelegramCore.AdminLogEventsFlags
  public static var all: TelegramCore.AdminLogEventsFlags {
    get
  }
  public static var flags: TelegramCore.AdminLogEventsFlags {
    get
  }
  public typealias ArrayLiteralElement = TelegramCore.AdminLogEventsFlags
  public typealias Element = TelegramCore.AdminLogEventsFlags
  public typealias RawValue = Swift.UInt32
}
public struct SecureIdPersonalDetailsValue : Swift.Equatable {
  public var latinName: TelegramCore.SecureIdPersonName
  public var nativeName: TelegramCore.SecureIdPersonName?
  public var birthdate: TelegramCore.SecureIdDate
  public var countryCode: Swift.String
  public var residenceCountryCode: Swift.String
  public var gender: TelegramCore.SecureIdGender
  public init(latinName: TelegramCore.SecureIdPersonName, nativeName: TelegramCore.SecureIdPersonName?, birthdate: TelegramCore.SecureIdDate, countryCode: Swift.String, residenceCountryCode: Swift.String, gender: TelegramCore.SecureIdGender)
  public static func == (a: TelegramCore.SecureIdPersonalDetailsValue, b: TelegramCore.SecureIdPersonalDetailsValue) -> Swift.Bool
}
final public class SuggestedLocalizationEntry : Swift.Codable {
  final public let languageCode: Swift.String
  final public let isSeen: Swift.Bool
  public init(languageCode: Swift.String, isSeen: Swift.Bool)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.SuggestedLocalizationEntry, rhs: TelegramCore.SuggestedLocalizationEntry) -> Swift.Bool
  @objc deinit
}
public enum AvailableChannelDiscussionGroupError {
  case generic
  public static func == (a: TelegramCore.AvailableChannelDiscussionGroupError, b: TelegramCore.AvailableChannelDiscussionGroupError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ChannelDiscussionGroupError {
  case generic
  case groupHistoryIsCurrentlyPrivate
  case hasNotPermissions
  case tooManyChannels
  public static func == (a: TelegramCore.ChannelDiscussionGroupError, b: TelegramCore.ChannelDiscussionGroupError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class ViewCountMessageAttribute : PostboxKit.MessageAttribute {
  final public let count: Swift.Int
  public var associatedMessageIds: [PostboxKit.MessageId]
  public init(count: Swift.Int)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public enum RequestStartBotInGroupError {
  case generic
  public static func == (a: TelegramCore.RequestStartBotInGroupError, b: TelegramCore.RequestStartBotInGroupError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum StartBotInGroupResult {
  case none
  case channelParticipant(TelegramCore.RenderedChannelParticipant)
}
public func updateNetworkSettingsInteractively(postbox: PostboxKit.Postbox, network: TelegramCore.Network, _ f: @escaping (TelegramCore.NetworkSettings) -> TelegramCore.NetworkSettings) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public func updateNetworkSettingsInteractively(transaction: PostboxKit.Transaction, network: TelegramCore.Network?, _ f: @escaping (TelegramCore.NetworkSettings) -> TelegramCore.NetworkSettings)
public struct PeerActivitySpace : Swift.Hashable {
  public enum Category : Swift.Equatable, Swift.Hashable {
    case global
    case thread(Swift.Int64)
    case voiceChat
    public static func == (a: TelegramCore.PeerActivitySpace.Category, b: TelegramCore.PeerActivitySpace.Category) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var peerId: PostboxKit.PeerId
  public var category: TelegramCore.PeerActivitySpace.Category
  public init(peerId: PostboxKit.PeerId, category: TelegramCore.PeerActivitySpace.Category)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.PeerActivitySpace, b: TelegramCore.PeerActivitySpace) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum SecretChatRole : Swift.Int32 {
  case creator
  case participant
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum SecretChatLayer : Swift.Int32 {
  case layer8
  case layer46
  case layer73
  case layer101
  case layer144
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public struct SecretChatKeySha1Fingerprint : PostboxKit.PostboxCoding, Swift.Equatable {
  public let k0: Swift.Int64
  public let k1: Swift.Int64
  public let k2: Swift.Int32
  public init(digest: Foundation.Data)
  public init(k0: Swift.Int64, k1: Swift.Int64, k2: Swift.Int32)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func data() -> Foundation.Data
  public static func == (lhs: TelegramCore.SecretChatKeySha1Fingerprint, rhs: TelegramCore.SecretChatKeySha1Fingerprint) -> Swift.Bool
}
public struct SecretChatKeySha256Fingerprint : PostboxKit.PostboxCoding, Swift.Equatable {
  public let k0: Swift.Int64
  public let k1: Swift.Int64
  public let k2: Swift.Int64
  public let k3: Swift.Int64
  public init(digest: Foundation.Data)
  public init(k0: Swift.Int64, k1: Swift.Int64, k2: Swift.Int64, k3: Swift.Int64)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func data() -> Foundation.Data
  public static func == (lhs: TelegramCore.SecretChatKeySha256Fingerprint, rhs: TelegramCore.SecretChatKeySha256Fingerprint) -> Swift.Bool
}
public struct SecretChatKeyFingerprint : PostboxKit.PostboxCoding, Swift.Equatable {
  public let sha1: TelegramCore.SecretChatKeySha1Fingerprint
  public let sha256: TelegramCore.SecretChatKeySha256Fingerprint
  public init(sha1: TelegramCore.SecretChatKeySha1Fingerprint, sha256: TelegramCore.SecretChatKeySha256Fingerprint)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.SecretChatKeyFingerprint, rhs: TelegramCore.SecretChatKeyFingerprint) -> Swift.Bool
}
public enum SecretChatEmbeddedPeerState : Swift.Int32 {
  case terminated
  case handshake
  case active
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum SecretChatHandshakeState : PostboxKit.PostboxCoding, Swift.Equatable {
  case accepting
  case requested(g: Swift.Int32, p: PostboxKit.MemoryBuffer, a: PostboxKit.MemoryBuffer)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.SecretChatHandshakeState, rhs: TelegramCore.SecretChatHandshakeState) -> Swift.Bool
}
public struct SecretChatLayerNegotiationState : PostboxKit.PostboxCoding, Swift.Equatable {
  public let activeLayer: TelegramCore.SecretChatSequenceBasedLayer
  public let locallyRequestedLayer: Swift.Int32?
  public let remotelyRequestedLayer: Swift.Int32?
  public init(activeLayer: TelegramCore.SecretChatSequenceBasedLayer, locallyRequestedLayer: Swift.Int32?, remotelyRequestedLayer: Swift.Int32?)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.SecretChatLayerNegotiationState, rhs: TelegramCore.SecretChatLayerNegotiationState) -> Swift.Bool
  public func withUpdatedActiveLayer(_ activeLayer: TelegramCore.SecretChatSequenceBasedLayer) -> TelegramCore.SecretChatLayerNegotiationState
  public func withUpdatedLocallyRequestedLayer(_ locallyRequestedLayer: Swift.Int32?) -> TelegramCore.SecretChatLayerNegotiationState
  public func withUpdatedRemotelyRequestedLayer(_ remotelyRequestedLayer: Swift.Int32?) -> TelegramCore.SecretChatLayerNegotiationState
}
public enum SecretChatRekeySessionData : PostboxKit.PostboxCoding, Swift.Equatable {
  case requesting
  case requested(a: PostboxKit.MemoryBuffer, config: TelegramCore.SecretChatEncryptionConfig)
  case accepting
  case accepted(key: PostboxKit.MemoryBuffer, keyFingerprint: Swift.Int64)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.SecretChatRekeySessionData, rhs: TelegramCore.SecretChatRekeySessionData) -> Swift.Bool
}
public struct SecretChatRekeySessionState : PostboxKit.PostboxCoding, Swift.Equatable {
  public let id: Swift.Int64
  public let data: TelegramCore.SecretChatRekeySessionData
  public init(id: Swift.Int64, data: TelegramCore.SecretChatRekeySessionData)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.SecretChatRekeySessionState, rhs: TelegramCore.SecretChatRekeySessionState) -> Swift.Bool
}
public struct SecretChatSequenceBasedLayerState : PostboxKit.PostboxCoding, Swift.Equatable {
  public let layerNegotiationState: TelegramCore.SecretChatLayerNegotiationState
  public let rekeyState: TelegramCore.SecretChatRekeySessionState?
  public let baseIncomingOperationIndex: Swift.Int32
  public let baseOutgoingOperationIndex: Swift.Int32
  public let topProcessedCanonicalIncomingOperationIndex: Swift.Int32?
  public init(layerNegotiationState: TelegramCore.SecretChatLayerNegotiationState, rekeyState: TelegramCore.SecretChatRekeySessionState?, baseIncomingOperationIndex: Swift.Int32, baseOutgoingOperationIndex: Swift.Int32, topProcessedCanonicalIncomingOperationIndex: Swift.Int32?)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func canonicalIncomingOperationIndex(_ index: Swift.Int32) -> Swift.Int32
  public func canonicalOutgoingOperationIndex(_ index: Swift.Int32) -> Swift.Int32
  public func outgoingOperationIndexFromCanonicalOperationIndex(_ index: Swift.Int32) -> Swift.Int32
  public func withUpdatedLayerNegotiationState(_ layerNegotiationState: TelegramCore.SecretChatLayerNegotiationState) -> TelegramCore.SecretChatSequenceBasedLayerState
  public func withUpdatedRekeyState(_ rekeyState: TelegramCore.SecretChatRekeySessionState?) -> TelegramCore.SecretChatSequenceBasedLayerState
  public func withUpdatedTopProcessedCanonicalIncomingOperationIndex(_ topProcessedCanonicalIncomingOperationIndex: Swift.Int32?) -> TelegramCore.SecretChatSequenceBasedLayerState
  public static func == (lhs: TelegramCore.SecretChatSequenceBasedLayerState, rhs: TelegramCore.SecretChatSequenceBasedLayerState) -> Swift.Bool
}
public enum SecretChatEmbeddedState : PostboxKit.PostboxCoding, Swift.Equatable {
  case terminated
  case handshake(TelegramCore.SecretChatHandshakeState)
  case basicLayer
  case sequenceBasedLayer(TelegramCore.SecretChatSequenceBasedLayerState)
  public var peerState: TelegramCore.SecretChatEmbeddedPeerState {
    get
  }
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.SecretChatEmbeddedState, rhs: TelegramCore.SecretChatEmbeddedState) -> Swift.Bool
}
public protocol SecretChatKeyState {
  var keyFingerprint: TelegramCore.SecretChatKeyFingerprint? { get }
}
final public class SecretChatState : PostboxKit.PeerChatState, TelegramCore.SecretChatKeyState, Swift.Equatable {
  final public let role: TelegramCore.SecretChatRole
  final public let embeddedState: TelegramCore.SecretChatEmbeddedState
  final public let keychain: TelegramCore.SecretChatKeychain
  final public let keyFingerprint: TelegramCore.SecretChatKeyFingerprint?
  final public let messageAutoremoveTimeout: Swift.Int32?
  public init(role: TelegramCore.SecretChatRole, embeddedState: TelegramCore.SecretChatEmbeddedState, keychain: TelegramCore.SecretChatKeychain, keyFingerprint: TelegramCore.SecretChatKeyFingerprint?, messageAutoremoveTimeout: Swift.Int32?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func equals(_ other: PostboxKit.PeerChatState) -> Swift.Bool
  public static func == (lhs: TelegramCore.SecretChatState, rhs: TelegramCore.SecretChatState) -> Swift.Bool
  final public func withUpdatedKeyFingerprint(_ keyFingerprint: TelegramCore.SecretChatKeyFingerprint?) -> TelegramCore.SecretChatState
  final public func withUpdatedEmbeddedState(_ embeddedState: TelegramCore.SecretChatEmbeddedState) -> TelegramCore.SecretChatState
  final public func withUpdatedKeychain(_ keychain: TelegramCore.SecretChatKeychain) -> TelegramCore.SecretChatState
  final public func withUpdatedMessageAutoremoveTimeout(_ messageAutoremoveTimeout: Swift.Int32?) -> TelegramCore.SecretChatState
  @objc deinit
}
public enum ArchivedStickerPacksNamespace : Swift.Int32 {
  case stickers
  case masks
  case emoji
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
final public class ArchivedStickerPackItem {
  final public let info: TelegramCore.StickerPackCollectionInfo
  final public let topItems: [TelegramCore.StickerPackItem]
  public init(info: TelegramCore.StickerPackCollectionInfo, topItems: [TelegramCore.StickerPackItem])
  @objc deinit
}
public class EditedMessageAttribute : PostboxKit.MessageAttribute {
  final public let date: Swift.Int32
  final public let isHidden: Swift.Bool
  public init(date: Swift.Int32, isHidden: Swift.Bool)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public struct AuthTransferExportedToken {
  public let value: Foundation.Data
  public let validUntil: Swift.Int32
}
public enum ExportAuthTransferTokenError {
  case generic
  case limitExceeded
  public static func == (a: TelegramCore.ExportAuthTransferTokenError, b: TelegramCore.ExportAuthTransferTokenError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ExportAuthTransferTokenResult {
  case displayToken(TelegramCore.AuthTransferExportedToken)
  case changeAccountAndRetry(TelegramCore.UnauthorizedAccount)
  case loggedIn
  case passwordRequested(TelegramCore.UnauthorizedAccount)
}
public enum ApproveAuthTransferTokenError {
  case generic
  case invalid
  case expired
  case alreadyAccepted
  public static func == (a: TelegramCore.ApproveAuthTransferTokenError, b: TelegramCore.ApproveAuthTransferTokenError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func approveAuthTransferToken(account: TelegramCore.Account, token: Foundation.Data, activeSessionsContext: TelegramCore.ActiveSessionsContext) -> SwiftSignalKit.Signal<TelegramCore.RecentAccountSession, TelegramCore.ApproveAuthTransferTokenError>
public struct LimitsConfiguration : Swift.Codable, Swift.Equatable {
  public static let timeIntervalForever: Swift.Int32
  public var maxPinnedChatCount: Swift.Int32
  public var maxArchivedPinnedChatCount: Swift.Int32
  public var maxGroupMemberCount: Swift.Int32
  public var maxSupergroupMemberCount: Swift.Int32
  public var maxMessageForwardBatchSize: Swift.Int32
  public var maxSavedGifCount: Swift.Int32
  public var maxRecentStickerCount: Swift.Int32
  public var maxFavedStickerCount: Swift.Int32
  public var maxMessageEditingInterval: Swift.Int32
  public var maxMediaCaptionLength: Swift.Int32
  public var canRemoveIncomingMessagesInPrivateChats: Swift.Bool
  public var maxMessageRevokeInterval: Swift.Int32
  public var maxMessageRevokeIntervalInPrivateChats: Swift.Int32
  public static var defaultValue: TelegramCore.LimitsConfiguration {
    get
  }
  public init(maxPinnedChatCount: Swift.Int32, maxArchivedPinnedChatCount: Swift.Int32, maxGroupMemberCount: Swift.Int32, maxSupergroupMemberCount: Swift.Int32, maxMessageForwardBatchSize: Swift.Int32, maxSavedGifCount: Swift.Int32, maxRecentStickerCount: Swift.Int32, maxFavedStickerCount: Swift.Int32, maxMessageEditingInterval: Swift.Int32, maxMediaCaptionLength: Swift.Int32, canRemoveIncomingMessagesInPrivateChats: Swift.Bool, maxMessageRevokeInterval: Swift.Int32, maxMessageRevokeIntervalInPrivateChats: Swift.Int32)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.LimitsConfiguration, b: TelegramCore.LimitsConfiguration) -> Swift.Bool
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class SecureId {
    final public func accessSecureId(password: Swift.String) -> SwiftSignalKit.Signal<(context: TelegramCore.SecureIdAccessContext, settings: TelegramCore.TwoStepVerificationSettings), TelegramCore.SecureIdAccessError>
    @objc deinit
  }
}
indirect public enum InstantPageBlock : PostboxKit.PostboxCoding, Swift.Equatable {
  case unsupported
  case title(TelegramCore.RichText)
  case subtitle(TelegramCore.RichText)
  case authorDate(author: TelegramCore.RichText, date: Swift.Int32)
  case header(TelegramCore.RichText)
  case subheader(TelegramCore.RichText)
  case paragraph(TelegramCore.RichText)
  case preformatted(TelegramCore.RichText)
  case footer(TelegramCore.RichText)
  case divider
  case anchor(Swift.String)
  case list(items: [TelegramCore.InstantPageListItem], ordered: Swift.Bool)
  case blockQuote(text: TelegramCore.RichText, caption: TelegramCore.RichText)
  case pullQuote(text: TelegramCore.RichText, caption: TelegramCore.RichText)
  case image(id: PostboxKit.MediaId, caption: TelegramCore.InstantPageCaption, url: Swift.String?, webpageId: PostboxKit.MediaId?)
  case video(id: PostboxKit.MediaId, caption: TelegramCore.InstantPageCaption, autoplay: Swift.Bool, loop: Swift.Bool)
  case audio(id: PostboxKit.MediaId, caption: TelegramCore.InstantPageCaption)
  case cover(TelegramCore.InstantPageBlock)
  case webEmbed(url: Swift.String?, html: Swift.String?, dimensions: TelegramCore.PixelDimensions?, caption: TelegramCore.InstantPageCaption, stretchToWidth: Swift.Bool, allowScrolling: Swift.Bool, coverId: PostboxKit.MediaId?)
  case postEmbed(url: Swift.String, webpageId: PostboxKit.MediaId?, avatarId: PostboxKit.MediaId?, author: Swift.String, date: Swift.Int32, blocks: [TelegramCore.InstantPageBlock], caption: TelegramCore.InstantPageCaption)
  case collage(items: [TelegramCore.InstantPageBlock], caption: TelegramCore.InstantPageCaption)
  case slideshow(items: [TelegramCore.InstantPageBlock], caption: TelegramCore.InstantPageCaption)
  case channelBanner(TelegramCore.TelegramChannel?)
  case kicker(TelegramCore.RichText)
  case table(title: TelegramCore.RichText, rows: [TelegramCore.InstantPageTableRow], bordered: Swift.Bool, striped: Swift.Bool)
  case details(title: TelegramCore.RichText, blocks: [TelegramCore.InstantPageBlock], expanded: Swift.Bool)
  case relatedArticles(title: TelegramCore.RichText, articles: [TelegramCore.InstantPageRelatedArticle])
  case map(latitude: Swift.Double, longitude: Swift.Double, zoom: Swift.Int32, dimensions: TelegramCore.PixelDimensions, caption: TelegramCore.InstantPageCaption)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.InstantPageBlock, rhs: TelegramCore.InstantPageBlock) -> Swift.Bool
}
final public class InstantPageCaption : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let text: TelegramCore.RichText
  final public let credit: TelegramCore.RichText
  public init(text: TelegramCore.RichText, credit: TelegramCore.RichText)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.InstantPageCaption, rhs: TelegramCore.InstantPageCaption) -> Swift.Bool
  @objc deinit
}
indirect public enum InstantPageListItem : PostboxKit.PostboxCoding, Swift.Equatable {
  case unknown
  case text(TelegramCore.RichText, Swift.String?)
  case blocks([TelegramCore.InstantPageBlock], Swift.String?)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.InstantPageListItem, rhs: TelegramCore.InstantPageListItem) -> Swift.Bool
}
public enum TableHorizontalAlignment : Swift.Int32 {
  case left
  case center
  case right
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum TableVerticalAlignment : Swift.Int32 {
  case top
  case middle
  case bottom
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
final public class InstantPageTableCell : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let text: TelegramCore.RichText?
  final public let header: Swift.Bool
  final public let alignment: TelegramCore.TableHorizontalAlignment
  final public let verticalAlignment: TelegramCore.TableVerticalAlignment
  final public let colspan: Swift.Int32
  final public let rowspan: Swift.Int32
  public init(text: TelegramCore.RichText?, header: Swift.Bool, alignment: TelegramCore.TableHorizontalAlignment, verticalAlignment: TelegramCore.TableVerticalAlignment, colspan: Swift.Int32, rowspan: Swift.Int32)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.InstantPageTableCell, rhs: TelegramCore.InstantPageTableCell) -> Swift.Bool
  @objc deinit
}
final public class InstantPageTableRow : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let cells: [TelegramCore.InstantPageTableCell]
  public init(cells: [TelegramCore.InstantPageTableCell])
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.InstantPageTableRow, rhs: TelegramCore.InstantPageTableRow) -> Swift.Bool
  @objc deinit
}
final public class InstantPageRelatedArticle : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let url: Swift.String
  final public let webpageId: PostboxKit.MediaId
  final public let title: Swift.String?
  final public let description: Swift.String?
  final public let photoId: PostboxKit.MediaId?
  final public let author: Swift.String?
  final public let date: Swift.Int32?
  public init(url: Swift.String, webpageId: PostboxKit.MediaId, title: Swift.String?, description: Swift.String?, photoId: PostboxKit.MediaId?, author: Swift.String?, date: Swift.Int32?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.InstantPageRelatedArticle, rhs: TelegramCore.InstantPageRelatedArticle) -> Swift.Bool
  @objc deinit
}
final public class InstantPage : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let blocks: [TelegramCore.InstantPageBlock]
  final public let media: [PostboxKit.MediaId : PostboxKit.Media]
  final public let isComplete: Swift.Bool
  final public let rtl: Swift.Bool
  final public let url: Swift.String
  final public let views: Swift.Int32?
  public init(blocks: [TelegramCore.InstantPageBlock], media: [PostboxKit.MediaId : PostboxKit.Media], isComplete: Swift.Bool, rtl: Swift.Bool, url: Swift.String, views: Swift.Int32?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.InstantPage, rhs: TelegramCore.InstantPage) -> Swift.Bool
  @objc deinit
}
public enum UpdateChannelJoinToSendError {
  case generic
  public static func == (a: TelegramCore.UpdateChannelJoinToSendError, b: TelegramCore.UpdateChannelJoinToSendError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UpdateChannelJoinRequestError {
  case generic
  public static func == (a: TelegramCore.UpdateChannelJoinRequestError, b: TelegramCore.UpdateChannelJoinRequestError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AccountSharedDataView<Types> where Types : TelegramCore.AccountManagerTypes {
  final public let entries: [PostboxKit.ValueBoxKey : PostboxKit.PreferencesEntry]
  @objc deinit
}
public struct ReactionSettings : Swift.Equatable, Swift.Codable {
  public static var `default`: TelegramCore.ReactionSettings
  public var quickReaction: TelegramCore.MessageReaction.Reaction
  public init(quickReaction: TelegramCore.MessageReaction.Reaction)
  public static func == (a: TelegramCore.ReactionSettings, b: TelegramCore.ReactionSettings) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension TelegramCore.ReactionSettings {
  public func effectiveQuickReaction(hasPremium: Swift.Bool) -> TelegramCore.MessageReaction.Reaction
}
public func updateReactionSettingsInteractively(postbox: PostboxKit.Postbox, _ f: @escaping (TelegramCore.ReactionSettings) -> TelegramCore.ReactionSettings) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
public struct NotificationSoundSettings : Swift.Equatable {
  public var maxDuration: Swift.Int {
    get
  }
  public var maxSize: Swift.Int {
    get
  }
  public var maxSavedCount: Swift.Int {
    get
  }
  public static func extract(from appConfiguration: TelegramCore.AppConfiguration) -> TelegramCore.NotificationSoundSettings
  public static func == (a: TelegramCore.NotificationSoundSettings, b: TelegramCore.NotificationSoundSettings) -> Swift.Bool
}
final public class NotificationSoundList : Swift.Equatable, Swift.Codable {
  final public class NotificationSound : Swift.Equatable, Swift.Codable {
    final public let file: TelegramCore.TelegramMediaFile
    public init(file: TelegramCore.TelegramMediaFile)
    public static func == (lhs: TelegramCore.NotificationSoundList.NotificationSound, rhs: TelegramCore.NotificationSoundList.NotificationSound) -> Swift.Bool
    public init(from decoder: Swift.Decoder) throws
    final public func encode(to encoder: Swift.Encoder) throws
    @objc deinit
  }
  final public let hash: Swift.Int64
  final public let sounds: [TelegramCore.NotificationSoundList.NotificationSound]
  public init(hash: Swift.Int64, sounds: [TelegramCore.NotificationSoundList.NotificationSound])
  public static func == (lhs: TelegramCore.NotificationSoundList, rhs: TelegramCore.NotificationSoundList) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public func _internal_cachedNotificationSoundList(transaction: PostboxKit.Transaction) -> TelegramCore.NotificationSoundList?
public func ensureDownloadedNotificationSoundList(postbox: PostboxKit.Postbox) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
public enum UploadNotificationSoundError {
  case generic
  public static func == (a: TelegramCore.UploadNotificationSoundError, b: TelegramCore.UploadNotificationSoundError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DeleteNotificationSoundError {
  case generic
  public static func == (a: TelegramCore.DeleteNotificationSoundError, b: TelegramCore.DeleteNotificationSoundError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func resolvedNotificationSound(sound: TelegramCore.PeerMessageSound, notificationSoundList: TelegramCore.NotificationSoundList?) -> TelegramCore.PeerMessageSound
final public class LoggingSettings : Swift.Codable {
  final public let logToFile: Swift.Bool
  final public let logToConsole: Swift.Bool
  final public let redactSensitiveData: Swift.Bool
  public static var defaultSettings: TelegramCore.LoggingSettings
  public init(logToFile: Swift.Bool, logToConsole: Swift.Bool, redactSensitiveData: Swift.Bool)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  final public func withUpdatedLogToFile(_ logToFile: Swift.Bool) -> TelegramCore.LoggingSettings
  final public func withUpdatedLogToConsole(_ logToConsole: Swift.Bool) -> TelegramCore.LoggingSettings
  final public func withUpdatedRedactSensitiveData(_ redactSensitiveData: Swift.Bool) -> TelegramCore.LoggingSettings
  public static func == (lhs: TelegramCore.LoggingSettings, rhs: TelegramCore.LoggingSettings) -> Swift.Bool
  @objc deinit
}
public func actualizedPeer(postbox: PostboxKit.Postbox, network: TelegramCore.Network, peer: PostboxKit.Peer) -> SwiftSignalKit.Signal<PostboxKit.Peer, SwiftSignalKit.NoError>
final public class CachedStickerQueryResult : Swift.Codable {
  final public let items: [TelegramCore.TelegramMediaFile]
  final public let hash: Swift.Int64
  final public let timestamp: Swift.Int32
  public init(items: [TelegramCore.TelegramMediaFile], hash: Swift.Int64, timestamp: Swift.Int32)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func cacheKey(_ query: Swift.String) -> PostboxKit.ValueBoxKey
  @objc deinit
}
public func updatePremiumPromoConfigurationOnce(account: TelegramCore.Account) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public enum CreateSecretChatError {
  case generic
  case limitExceeded
  public static func == (a: TelegramCore.CreateSecretChatError, b: TelegramCore.CreateSecretChatError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct VisibleMessageRange {
  public var lowerBound: PostboxKit.MessageIndex
  public var upperBound: PostboxKit.MessageIndex?
  public init(lowerBound: PostboxKit.MessageIndex, upperBound: PostboxKit.MessageIndex?)
}
public func updateProxySettingsInteractively(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, _ f: @escaping (TelegramCore.ProxySettings) -> TelegramCore.ProxySettings) -> SwiftSignalKit.Signal<Swift.Bool, SwiftSignalKit.NoError>
public func updateProxySettingsInteractively(transaction: TelegramCore.AccountManagerModifier<TelegramCore.TelegramAccountManagerTypes>, _ f: @escaping (TelegramCore.ProxySettings) -> TelegramCore.ProxySettings) -> Swift.Bool
public class EmbeddedMediaStickersMessageAttribute : PostboxKit.MessageAttribute {
  final public let files: [TelegramCore.TelegramMediaFile]
  public init(files: [TelegramCore.TelegramMediaFile])
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public enum EngineMedia {
  public typealias Id = PostboxKit.MediaId
  case image(TelegramCore.TelegramMediaImage)
  case file(TelegramCore.TelegramMediaFile)
  case geo(TelegramCore.TelegramMediaMap)
  case contact(TelegramCore.TelegramMediaContact)
  case action(TelegramCore.TelegramMediaAction)
  case dice(TelegramCore.TelegramMediaDice)
  case expiredContent(TelegramCore.TelegramMediaExpiredContent)
  case game(TelegramCore.TelegramMediaGame)
  case invoice(TelegramCore.TelegramMediaInvoice)
  case poll(TelegramCore.TelegramMediaPoll)
  case unsupported(TelegramCore.TelegramMediaUnsupported)
  case webFile(TelegramCore.TelegramMediaWebFile)
  case webpage(TelegramCore.TelegramMediaWebpage)
}
extension TelegramCore.EngineMedia {
  public var id: TelegramCore.EngineMedia.Id? {
    get
  }
}
extension TelegramCore.EngineMedia {
  public init(_ media: PostboxKit.Media)
  public func _asMedia() -> PostboxKit.Media
}
public struct HistoryPreloadIndex : Swift.Hashable, Swift.Comparable, Swift.CustomStringConvertible {
  public let index: PostboxKit.ChatListIndex?
  public let threadId: Swift.Int64?
  public let hasUnread: Swift.Bool
  public let isMuted: Swift.Bool
  public let isPriority: Swift.Bool
  public init(index: PostboxKit.ChatListIndex?, threadId: Swift.Int64?, hasUnread: Swift.Bool, isMuted: Swift.Bool, isPriority: Swift.Bool)
  public static func < (lhs: TelegramCore.HistoryPreloadIndex, rhs: TelegramCore.HistoryPreloadIndex) -> Swift.Bool
  public var description: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.HistoryPreloadIndex, b: TelegramCore.HistoryPreloadIndex) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class ChatHistoryPreloadMediaItem : Swift.Comparable {
  final public let preloadIndex: TelegramCore.HistoryPreloadIndex
  final public let media: PostboxKit.HolesViewMedia
  public static func == (lhs: TelegramCore.ChatHistoryPreloadMediaItem, rhs: TelegramCore.ChatHistoryPreloadMediaItem) -> Swift.Bool
  public static func < (lhs: TelegramCore.ChatHistoryPreloadMediaItem, rhs: TelegramCore.ChatHistoryPreloadMediaItem) -> Swift.Bool
  @objc deinit
}
public struct ChatHistoryPreloadItem : Swift.Equatable, Swift.Hashable {
  public let index: PostboxKit.ChatListIndex
  public let threadId: Swift.Int64?
  public let isMuted: Swift.Bool
  public let hasUnread: Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public init(index: PostboxKit.ChatListIndex, threadId: Swift.Int64?, isMuted: Swift.Bool, hasUnread: Swift.Bool)
  public static func == (a: TelegramCore.ChatHistoryPreloadItem, b: TelegramCore.ChatHistoryPreloadItem) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public func updateGlobalNotificationSettingsInteractively(postbox: PostboxKit.Postbox, _ f: @escaping (TelegramCore.GlobalNotificationSettingsSet) -> TelegramCore.GlobalNotificationSettingsSet) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public func resetPeerNotificationSettings(network: TelegramCore.Network) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public protocol AccountState : PostboxKit.PostboxCoding {
  func equalsTo(_ other: TelegramCore.AccountState) -> Swift.Bool
}
public func == (lhs: TelegramCore.AccountState, rhs: TelegramCore.AccountState) -> Swift.Bool
public class AuthorizedAccountState : TelegramCore.AccountState {
  final public class State : PostboxKit.PostboxCoding, Swift.Equatable, Swift.CustomStringConvertible {
    final public let pts: Swift.Int32
    final public let qts: Swift.Int32
    final public let date: Swift.Int32
    final public let seq: Swift.Int32
    public init(pts: Swift.Int32, qts: Swift.Int32, date: Swift.Int32, seq: Swift.Int32)
    public init(decoder: PostboxKit.PostboxDecoder)
    final public func encode(_ encoder: PostboxKit.PostboxEncoder)
    final public var description: Swift.String {
      get
    }
    @objc deinit
  }
  public struct InvalidatedChannel : PostboxKit.PostboxCoding, Swift.Equatable {
    public var peerId: PostboxKit.PeerId
    public var pts: Swift.Int32?
    public var validityMarker: Swift.Int64
    public init(peerId: PostboxKit.PeerId, pts: Swift.Int32?, validityMarker: Swift.Int64)
    public init(decoder: PostboxKit.PostboxDecoder)
    public func encode(_ encoder: PostboxKit.PostboxEncoder)
    public static func == (a: TelegramCore.AuthorizedAccountState.InvalidatedChannel, b: TelegramCore.AuthorizedAccountState.InvalidatedChannel) -> Swift.Bool
  }
  final public let isTestingEnvironment: Swift.Bool
  final public let masterDatacenterId: Swift.Int32
  final public let peerId: PostboxKit.PeerId
  final public let state: TelegramCore.AuthorizedAccountState.State?
  final public let invalidatedChannels: [TelegramCore.AuthorizedAccountState.InvalidatedChannel]
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public init(isTestingEnvironment: Swift.Bool, masterDatacenterId: Swift.Int32, peerId: PostboxKit.PeerId, state: TelegramCore.AuthorizedAccountState.State?, invalidatedChannels: [TelegramCore.AuthorizedAccountState.InvalidatedChannel])
  public func changedState(_ state: TelegramCore.AuthorizedAccountState.State) -> TelegramCore.AuthorizedAccountState
  public func withInvalidatedChannels(_ invalidatedChannels: [TelegramCore.AuthorizedAccountState.InvalidatedChannel]) -> TelegramCore.AuthorizedAccountState
  public func equalsTo(_ other: TelegramCore.AccountState) -> Swift.Bool
  @objc deinit
}
public func == (lhs: TelegramCore.AuthorizedAccountState.State, rhs: TelegramCore.AuthorizedAccountState.State) -> Swift.Bool
public enum EarliestUnseenPersonalMentionMessageResult : Swift.Equatable {
  case loading
  case result(PostboxKit.MessageId?)
  public static func == (a: TelegramCore.EarliestUnseenPersonalMentionMessageResult, b: TelegramCore.EarliestUnseenPersonalMentionMessageResult) -> Swift.Bool
}
public struct SecureIdRentalAgreementValue : Swift.Equatable {
  public var verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference]
  public var translations: [TelegramCore.SecureIdVerificationDocumentReference]
  public init(verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference], translations: [TelegramCore.SecureIdVerificationDocumentReference])
  public static func == (lhs: TelegramCore.SecureIdRentalAgreementValue, rhs: TelegramCore.SecureIdRentalAgreementValue) -> Swift.Bool
}
public enum RequestStickerSetError {
  case generic
  case invalid
  public static func == (a: TelegramCore.RequestStickerSetError, b: TelegramCore.RequestStickerSetError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RequestStickerSetResult {
  case local(info: PostboxKit.ItemCollectionInfo, items: [PostboxKit.ItemCollectionItem])
  case remote(info: PostboxKit.ItemCollectionInfo, items: [PostboxKit.ItemCollectionItem], installed: Swift.Bool)
  public var items: [PostboxKit.ItemCollectionItem] {
    get
  }
}
public enum InstallStickerSetError {
  case generic
  public static func == (a: TelegramCore.InstallStickerSetError, b: TelegramCore.InstallStickerSetError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum InstallStickerSetResult {
  case successful
  case archived([TelegramCore.CoveredStickerSet])
}
final public class CoveredStickerSet : Swift.Equatable {
  public init(info: TelegramCore.StickerPackCollectionInfo, items: [TelegramCore.StickerPackItem])
  public static func == (lhs: TelegramCore.CoveredStickerSet, rhs: TelegramCore.CoveredStickerSet) -> Swift.Bool
  @objc deinit
}
public struct MessageStats : Swift.Equatable {
  public let views: Swift.Int
  public let forwards: Swift.Int
  public let interactionsGraph: TelegramCore.StatsGraph
  public let interactionsGraphDelta: Swift.Int64
  public static func == (lhs: TelegramCore.MessageStats, rhs: TelegramCore.MessageStats) -> Swift.Bool
  public func withUpdatedInteractionsGraph(_ interactionsGraph: TelegramCore.StatsGraph) -> TelegramCore.MessageStats
}
public struct MessageStatsContextState : Swift.Equatable {
  public var stats: TelegramCore.MessageStats?
  public static func == (a: TelegramCore.MessageStatsContextState, b: TelegramCore.MessageStatsContextState) -> Swift.Bool
}
final public class MessageStatsContext {
  final public var state: SwiftSignalKit.Signal<TelegramCore.MessageStatsContextState, SwiftSignalKit.NoError> {
    get
  }
  public init(postbox: PostboxKit.Postbox, network: TelegramCore.Network, datacenterId: Swift.Int32, messageId: PostboxKit.MessageId)
  final public func loadDetailedGraph(_ graph: TelegramCore.StatsGraph, x: Swift.Int64) -> SwiftSignalKit.Signal<TelegramCore.StatsGraph?, SwiftSignalKit.NoError>
  @objc deinit
}
public enum CellularNetworkType {
  case unknown
  case gprs
  case edge
  case thirdG
  case lte
  public static func == (a: TelegramCore.CellularNetworkType, b: TelegramCore.CellularNetworkType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum NetworkType : Swift.Equatable {
  case none
  case wifi
  case cellular(TelegramCore.CellularNetworkType)
  public static func == (a: TelegramCore.NetworkType, b: TelegramCore.NetworkType) -> Swift.Bool
}
public struct TelegramMediaPollOption : Swift.Equatable, PostboxKit.PostboxCoding {
  public let text: Swift.String
  public let opaqueIdentifier: Foundation.Data
  public init(text: Swift.String, opaqueIdentifier: Foundation.Data)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.TelegramMediaPollOption, b: TelegramCore.TelegramMediaPollOption) -> Swift.Bool
}
public struct TelegramMediaPollOptionVoters : Swift.Equatable, PostboxKit.PostboxCoding {
  public let selected: Swift.Bool
  public let opaqueIdentifier: Foundation.Data
  public let count: Swift.Int32
  public let isCorrect: Swift.Bool
  public init(selected: Swift.Bool, opaqueIdentifier: Foundation.Data, count: Swift.Int32, isCorrect: Swift.Bool)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.TelegramMediaPollOptionVoters, b: TelegramCore.TelegramMediaPollOptionVoters) -> Swift.Bool
}
public struct TelegramMediaPollResults : Swift.Equatable, PostboxKit.PostboxCoding {
  public struct Solution : Swift.Equatable {
    public let text: Swift.String
    public let entities: [TelegramCore.MessageTextEntity]
    public init(text: Swift.String, entities: [TelegramCore.MessageTextEntity])
    public static func == (a: TelegramCore.TelegramMediaPollResults.Solution, b: TelegramCore.TelegramMediaPollResults.Solution) -> Swift.Bool
  }
  public let voters: [TelegramCore.TelegramMediaPollOptionVoters]?
  public let totalVoters: Swift.Int32?
  public let recentVoters: [PostboxKit.PeerId]
  public let solution: TelegramCore.TelegramMediaPollResults.Solution?
  public init(voters: [TelegramCore.TelegramMediaPollOptionVoters]?, totalVoters: Swift.Int32?, recentVoters: [PostboxKit.PeerId], solution: TelegramCore.TelegramMediaPollResults.Solution?)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.TelegramMediaPollResults, b: TelegramCore.TelegramMediaPollResults) -> Swift.Bool
}
public enum TelegramMediaPollPublicity : Swift.Int32 {
  case anonymous
  case `public`
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum TelegramMediaPollKind : Swift.Equatable, PostboxKit.PostboxCoding {
  case poll(multipleAnswers: Swift.Bool)
  case quiz
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.TelegramMediaPollKind, b: TelegramCore.TelegramMediaPollKind) -> Swift.Bool
}
final public class TelegramMediaPoll : PostboxKit.Media, Swift.Equatable {
  final public var id: PostboxKit.MediaId? {
    get
  }
  final public let pollId: PostboxKit.MediaId
  final public var peerIds: [PostboxKit.PeerId] {
    get
  }
  final public let publicity: TelegramCore.TelegramMediaPollPublicity
  final public let kind: TelegramCore.TelegramMediaPollKind
  final public let text: Swift.String
  final public let options: [TelegramCore.TelegramMediaPollOption]
  final public let correctAnswers: [Foundation.Data]?
  final public let results: TelegramCore.TelegramMediaPollResults
  final public let isClosed: Swift.Bool
  final public let deadlineTimeout: Swift.Int32?
  public init(pollId: PostboxKit.MediaId, publicity: TelegramCore.TelegramMediaPollPublicity, kind: TelegramCore.TelegramMediaPollKind, text: Swift.String, options: [TelegramCore.TelegramMediaPollOption], correctAnswers: [Foundation.Data]?, results: TelegramCore.TelegramMediaPollResults, isClosed: Swift.Bool, deadlineTimeout: Swift.Int32?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to other: PostboxKit.Media) -> Swift.Bool
  final public func isSemanticallyEqual(to other: PostboxKit.Media) -> Swift.Bool
  public static func == (lhs: TelegramCore.TelegramMediaPoll, rhs: TelegramCore.TelegramMediaPoll) -> Swift.Bool
  final public func withUpdatedResults(_ results: TelegramCore.TelegramMediaPollResults, min: Swift.Bool) -> TelegramCore.TelegramMediaPoll
  @objc deinit
}
public enum CreateChannelError {
  case generic
  case restricted
  case tooMuchJoined
  case tooMuchLocationBasedGroups
  case serverProvided(Swift.String)
}
public enum CreateChannelMode {
  case channel
  case supergroup(isForum: Swift.Bool)
}
public enum DeleteChannelError {
  case generic
  public static func == (a: TelegramCore.DeleteChannelError, b: TelegramCore.DeleteChannelError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class AccountSortOrderAttribute : Swift.Codable, Swift.Equatable {
  final public let order: Swift.Int32
  public init(order: Swift.Int32)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.AccountSortOrderAttribute, rhs: TelegramCore.AccountSortOrderAttribute) -> Swift.Bool
  @objc deinit
}
public struct TemporaryTwoStepPasswordToken : Swift.Codable, Swift.Equatable {
  public let token: Foundation.Data
  public let validUntilDate: Swift.Int32
  public let requiresBiometrics: Swift.Bool
  public init(token: Foundation.Data, validUntilDate: Swift.Int32, requiresBiometrics: Swift.Bool)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.TemporaryTwoStepPasswordToken, rhs: TelegramCore.TemporaryTwoStepPasswordToken) -> Swift.Bool
}
public enum SecureIdVerificationDocumentReference : Swift.Equatable {
  case remote(TelegramCore.SecureIdFileReference)
  case uploaded(TelegramCore.UploadedSecureIdFile)
  public static func == (lhs: TelegramCore.SecureIdVerificationDocumentReference, rhs: TelegramCore.SecureIdVerificationDocumentReference) -> Swift.Bool
}
public enum TelegramGroupRole : Swift.Equatable, PostboxKit.PostboxCoding {
  case creator(rank: Swift.String?)
  case admin(TelegramCore.TelegramChatAdminRights, rank: Swift.String?)
  case member
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.TelegramGroupRole, b: TelegramCore.TelegramGroupRole) -> Swift.Bool
}
public enum TelegramGroupMembership : Swift.Int32 {
  case Member
  case Left
  case Removed
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public struct TelegramGroupFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init()
  public init(rawValue: Swift.Int32)
  public static let deactivated: TelegramCore.TelegramGroupFlags
  public static let hasVoiceChat: TelegramCore.TelegramGroupFlags
  public static let hasActiveVoiceChat: TelegramCore.TelegramGroupFlags
  public static let copyProtectionEnabled: TelegramCore.TelegramGroupFlags
  public typealias ArrayLiteralElement = TelegramCore.TelegramGroupFlags
  public typealias Element = TelegramCore.TelegramGroupFlags
  public typealias RawValue = Swift.Int32
}
public struct TelegramGroupToChannelMigrationReference : Swift.Equatable {
  public let peerId: PostboxKit.PeerId
  public let accessHash: Swift.Int64
  public init(peerId: PostboxKit.PeerId, accessHash: Swift.Int64)
  public static func == (a: TelegramCore.TelegramGroupToChannelMigrationReference, b: TelegramCore.TelegramGroupToChannelMigrationReference) -> Swift.Bool
}
final public class TelegramGroup : PostboxKit.Peer, Swift.Equatable {
  final public let id: PostboxKit.PeerId
  final public let title: Swift.String
  final public let photo: [TelegramCore.TelegramMediaImageRepresentation]
  final public let participantCount: Swift.Int
  final public let role: TelegramCore.TelegramGroupRole
  final public let membership: TelegramCore.TelegramGroupMembership
  final public let flags: TelegramCore.TelegramGroupFlags
  final public let defaultBannedRights: TelegramCore.TelegramChatBannedRights?
  final public let migrationReference: TelegramCore.TelegramGroupToChannelMigrationReference?
  final public let creationDate: Swift.Int32
  final public let version: Swift.Int
  final public var indexName: PostboxKit.PeerIndexNameRepresentation {
    get
  }
  final public var associatedMediaIds: [PostboxKit.MediaId]? {
    get
  }
  final public let associatedPeerId: PostboxKit.PeerId?
  final public let notificationSettingsPeerId: PostboxKit.PeerId?
  final public var timeoutAttribute: Swift.UInt32? {
    get
  }
  public init(id: PostboxKit.PeerId, title: Swift.String, photo: [TelegramCore.TelegramMediaImageRepresentation], participantCount: Swift.Int, role: TelegramCore.TelegramGroupRole, membership: TelegramCore.TelegramGroupMembership, flags: TelegramCore.TelegramGroupFlags, defaultBannedRights: TelegramCore.TelegramChatBannedRights?, migrationReference: TelegramCore.TelegramGroupToChannelMigrationReference?, creationDate: Swift.Int32, version: Swift.Int)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(_ other: PostboxKit.Peer) -> Swift.Bool
  public static func == (lhs: TelegramCore.TelegramGroup, rhs: TelegramCore.TelegramGroup) -> Swift.Bool
  final public func updateFlags(flags: TelegramCore.TelegramGroupFlags, version: Swift.Int) -> TelegramCore.TelegramGroup
  final public func updateDefaultBannedRights(_ defaultBannedRights: TelegramCore.TelegramChatBannedRights?, version: Swift.Int) -> TelegramCore.TelegramGroup
  final public func updateParticipantCount(_ participantCount: Swift.Int) -> TelegramCore.TelegramGroup
  @objc deinit
}
final public class SecretFileEncryptionKey : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let aesKey: Foundation.Data
  final public let aesIv: Foundation.Data
  public init(aesKey: Foundation.Data, aesIv: Foundation.Data)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.SecretFileEncryptionKey, rhs: TelegramCore.SecretFileEncryptionKey) -> Swift.Bool
  @objc deinit
}
public struct ContactsSettings : Swift.Codable {
  public var synchronizeContacts: Swift.Bool
  public static var defaultSettings: TelegramCore.ContactsSettings {
    get
  }
  public init(synchronizeContacts: Swift.Bool)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
final public class LoggedOutAccountAttribute : Swift.Codable, Swift.Equatable {
  public init()
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.LoggedOutAccountAttribute, rhs: TelegramCore.LoggedOutAccountAttribute) -> Swift.Bool
  @objc deinit
}
public class ValidationMessageAttribute : PostboxKit.MessageAttribute {
  public init()
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public struct LocalizationInfo : PostboxKit.PostboxCoding, Swift.Codable, Swift.Equatable {
  public let languageCode: Swift.String
  public let baseLanguageCode: Swift.String?
  public let customPluralizationCode: Swift.String?
  public let title: Swift.String
  public let localizedTitle: Swift.String
  public let isOfficial: Swift.Bool
  public let totalStringCount: Swift.Int32
  public let translatedStringCount: Swift.Int32
  public let platformUrl: Swift.String
  public init(languageCode: Swift.String, baseLanguageCode: Swift.String?, customPluralizationCode: Swift.String?, title: Swift.String, localizedTitle: Swift.String, isOfficial: Swift.Bool, totalStringCount: Swift.Int32, translatedStringCount: Swift.Int32, platformUrl: Swift.String)
  public init(decoder: PostboxKit.PostboxDecoder)
  public init(from decoder: Swift.Decoder) throws
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.LocalizationInfo, b: TelegramCore.LocalizationInfo) -> Swift.Bool
}
extension PostboxKit.MessageFlags {
  public var isSending: Swift.Bool {
    get
  }
}
extension PostboxKit.Message {
  final public var visibleButtonKeyboardMarkup: TelegramCore.ReplyMarkupMessageAttribute? {
    get
  }
  final public var visibleReplyMarkupPlaceholder: Swift.String? {
    get
  }
  final public var muted: Swift.Bool {
    get
  }
  final public var personal: Swift.Bool {
    get
  }
  final public var requestsSetupReply: Swift.Bool {
    get
  }
  final public var isScam: Swift.Bool {
    get
  }
  final public var isFake: Swift.Bool {
    get
  }
  final public var sourceReference: TelegramCore.SourceReferenceMessageAttribute? {
    get
  }
  final public var effectiveAuthor: PostboxKit.Peer? {
    get
  }
}
extension PostboxKit.Message {
  final public func effectivelyIncoming(_ accountPeerId: PostboxKit.PeerId) -> Swift.Bool
  final public func effectivelyFailed(timestamp: Swift.Int32) -> Swift.Bool
  final public func isCopyProtected() -> Swift.Bool
}
extension PostboxKit.Message {
  final public var secretMediaDuration: Swift.Int32? {
    get
  }
}
extension PostboxKit.Message {
  final public var isSentOrAcknowledged: Swift.Bool {
    get
  }
}
extension PostboxKit.Message {
  final public var adAttribute: TelegramCore.AdMessageAttribute? {
    get
  }
}
extension PostboxKit.Message {
  final public var reactionsAttribute: TelegramCore.ReactionsMessageAttribute? {
    get
  }
  final public var effectiveReactions: [TelegramCore.MessageReaction]? {
    get
  }
  final public var hasReactions: Swift.Bool {
    get
  }
  final public var textEntitiesAttribute: TelegramCore.TextEntitiesMessageAttribute? {
    get
  }
  final public var restrictedContentAttribute: TelegramCore.RestrictedContentMessageAttribute? {
    get
  }
}
public func _internal_parseMediaAttachment(data: Foundation.Data) -> PostboxKit.Media?
extension TelegramCore.PeerReference {
  public var id: PostboxKit.PeerId {
    get
  }
}
public enum UpdateChannelSlowModeError {
  case generic
  case tooManyChannels
  public static func == (a: TelegramCore.UpdateChannelSlowModeError, b: TelegramCore.UpdateChannelSlowModeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RemoveStickerPackOption {
  case delete
  case archive
  public static func == (a: TelegramCore.RemoveStickerPackOption, b: TelegramCore.RemoveStickerPackOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Country : Swift.Codable, Swift.Equatable {
  public static func == (lhs: TelegramCore.Country, rhs: TelegramCore.Country) -> Swift.Bool
  public struct CountryCode : Swift.Codable, Swift.Equatable {
    public let code: Swift.String
    public let prefixes: [Swift.String]
    public let patterns: [Swift.String]
    public init(code: Swift.String, prefixes: [Swift.String], patterns: [Swift.String])
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
    public static func == (a: TelegramCore.Country.CountryCode, b: TelegramCore.Country.CountryCode) -> Swift.Bool
  }
  public let id: Swift.String
  public let name: Swift.String
  public let localizedName: Swift.String?
  public let countryCodes: [TelegramCore.Country.CountryCode]
  public let hidden: Swift.Bool
  public init(id: Swift.String, name: Swift.String, localizedName: Swift.String?, countryCodes: [TelegramCore.Country.CountryCode], hidden: Swift.Bool)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
final public class CountriesList : Swift.Codable, Swift.Equatable {
  final public let countries: [TelegramCore.Country]
  final public let hash: Swift.Int32
  public init(countries: [TelegramCore.Country], hash: Swift.Int32)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.CountriesList, rhs: TelegramCore.CountriesList) -> Swift.Bool
  @objc deinit
}
final public class LocalizationComponent : Swift.Equatable, Swift.Codable {
  final public let languageCode: Swift.String
  final public let localizedName: Swift.String
  final public let localization: TelegramCore.Localization
  final public let customPluralizationCode: Swift.String?
  public init(languageCode: Swift.String, localizedName: Swift.String, localization: TelegramCore.Localization, customPluralizationCode: Swift.String?)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.LocalizationComponent, rhs: TelegramCore.LocalizationComponent) -> Swift.Bool
  @objc deinit
}
final public class LocalizationSettings : Swift.Codable, Swift.Equatable {
  final public let primaryComponent: TelegramCore.LocalizationComponent
  final public let secondaryComponent: TelegramCore.LocalizationComponent?
  public init(primaryComponent: TelegramCore.LocalizationComponent, secondaryComponent: TelegramCore.LocalizationComponent?)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.LocalizationSettings, rhs: TelegramCore.LocalizationSettings) -> Swift.Bool
  @objc deinit
}
public struct StatsDateRange : Swift.Equatable {
  public let minDate: Swift.Int32
  public let maxDate: Swift.Int32
  public static func == (a: TelegramCore.StatsDateRange, b: TelegramCore.StatsDateRange) -> Swift.Bool
}
public struct StatsValue : Swift.Equatable {
  public let current: Swift.Double
  public let previous: Swift.Double
  public static func == (a: TelegramCore.StatsValue, b: TelegramCore.StatsValue) -> Swift.Bool
}
public struct StatsPercentValue : Swift.Equatable {
  public let value: Swift.Double
  public let total: Swift.Double
  public static func == (a: TelegramCore.StatsPercentValue, b: TelegramCore.StatsPercentValue) -> Swift.Bool
}
public enum StatsGraph : Swift.Equatable {
  case OnDemand(token: Swift.String)
  case Failed(error: Swift.String)
  case Loaded(token: Swift.String?, data: Swift.String)
  case Empty
  public var isEmpty: Swift.Bool {
    get
  }
  public static func == (a: TelegramCore.StatsGraph, b: TelegramCore.StatsGraph) -> Swift.Bool
}
public struct ChannelStatsMessageInteractions : Swift.Equatable {
  public let messageId: PostboxKit.MessageId
  public let views: Swift.Int32
  public let forwards: Swift.Int32
  public static func == (a: TelegramCore.ChannelStatsMessageInteractions, b: TelegramCore.ChannelStatsMessageInteractions) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class ChannelStats : Swift.Equatable {
  final public let period: TelegramCore.StatsDateRange
  final public let followers: TelegramCore.StatsValue
  final public let viewsPerPost: TelegramCore.StatsValue
  final public let sharesPerPost: TelegramCore.StatsValue
  final public let enabledNotifications: TelegramCore.StatsPercentValue
  final public let growthGraph: TelegramCore.StatsGraph
  final public let followersGraph: TelegramCore.StatsGraph
  final public let muteGraph: TelegramCore.StatsGraph
  final public let topHoursGraph: TelegramCore.StatsGraph
  final public let interactionsGraph: TelegramCore.StatsGraph
  final public let instantPageInteractionsGraph: TelegramCore.StatsGraph
  final public let viewsBySourceGraph: TelegramCore.StatsGraph
  final public let newFollowersBySourceGraph: TelegramCore.StatsGraph
  final public let languagesGraph: TelegramCore.StatsGraph
  final public let messageInteractions: [TelegramCore.ChannelStatsMessageInteractions]
  public static func == (lhs: TelegramCore.ChannelStats, rhs: TelegramCore.ChannelStats) -> Swift.Bool
  final public func withUpdatedGrowthGraph(_ growthGraph: TelegramCore.StatsGraph) -> TelegramCore.ChannelStats
  final public func withUpdatedFollowersGraph(_ followersGraph: TelegramCore.StatsGraph) -> TelegramCore.ChannelStats
  final public func withUpdatedMuteGraph(_ muteGraph: TelegramCore.StatsGraph) -> TelegramCore.ChannelStats
  final public func withUpdatedTopHoursGraph(_ viewsByHourGraph: TelegramCore.StatsGraph) -> TelegramCore.ChannelStats
  final public func withUpdatedInteractionsGraph(_ interactionsGraph: TelegramCore.StatsGraph) -> TelegramCore.ChannelStats
  final public func withUpdatedInstantPageInteractionsGraph(_ instantPageInteractionsGraph: TelegramCore.StatsGraph) -> TelegramCore.ChannelStats
  final public func withUpdatedViewsBySourceGraph(_ viewsBySourceGraph: TelegramCore.StatsGraph) -> TelegramCore.ChannelStats
  final public func withUpdatedNewFollowersBySourceGraph(_ newFollowersBySourceGraph: TelegramCore.StatsGraph) -> TelegramCore.ChannelStats
  final public func withUpdatedLanguagesGraph(_ languagesGraph: TelegramCore.StatsGraph) -> TelegramCore.ChannelStats
  @objc deinit
}
public struct ChannelStatsContextState : Swift.Equatable {
  public var stats: TelegramCore.ChannelStats?
  public static func == (a: TelegramCore.ChannelStatsContextState, b: TelegramCore.ChannelStatsContextState) -> Swift.Bool
}
final public class ChannelStatsContext {
  final public var state: SwiftSignalKit.Signal<TelegramCore.ChannelStatsContextState, SwiftSignalKit.NoError> {
    get
  }
  public init(postbox: PostboxKit.Postbox, network: TelegramCore.Network, datacenterId: Swift.Int32, peerId: PostboxKit.PeerId)
  final public func loadGrowthGraph()
  final public func loadFollowersGraph()
  final public func loadMuteGraph()
  final public func loadTopHoursGraph()
  final public func loadInteractionsGraph()
  final public func loadInstantPageInteractionsGraph()
  final public func loadViewsBySourceGraph()
  final public func loadNewFollowersBySourceGraph()
  final public func loadLanguagesGraph()
  final public func loadDetailedGraph(_ graph: TelegramCore.StatsGraph, x: Swift.Int64) -> SwiftSignalKit.Signal<TelegramCore.StatsGraph?, SwiftSignalKit.NoError>
  @objc deinit
}
public struct GroupStatsTopPoster : Swift.Equatable {
  public let peerId: PostboxKit.PeerId
  public let messageCount: Swift.Int32
  public let averageChars: Swift.Int32
  public static func == (a: TelegramCore.GroupStatsTopPoster, b: TelegramCore.GroupStatsTopPoster) -> Swift.Bool
}
public struct GroupStatsTopAdmin : Swift.Equatable {
  public let peerId: PostboxKit.PeerId
  public let deletedCount: Swift.Int32
  public let kickedCount: Swift.Int32
  public let bannedCount: Swift.Int32
  public static func == (a: TelegramCore.GroupStatsTopAdmin, b: TelegramCore.GroupStatsTopAdmin) -> Swift.Bool
}
public struct GroupStatsTopInviter : Swift.Equatable {
  public let peerId: PostboxKit.PeerId
  public let inviteCount: Swift.Int32
  public static func == (a: TelegramCore.GroupStatsTopInviter, b: TelegramCore.GroupStatsTopInviter) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class GroupStats : Swift.Equatable {
  final public let period: TelegramCore.StatsDateRange
  final public let members: TelegramCore.StatsValue
  final public let messages: TelegramCore.StatsValue
  final public let viewers: TelegramCore.StatsValue
  final public let posters: TelegramCore.StatsValue
  final public let growthGraph: TelegramCore.StatsGraph
  final public let membersGraph: TelegramCore.StatsGraph
  final public let newMembersBySourceGraph: TelegramCore.StatsGraph
  final public let languagesGraph: TelegramCore.StatsGraph
  final public let messagesGraph: TelegramCore.StatsGraph
  final public let actionsGraph: TelegramCore.StatsGraph
  final public let topHoursGraph: TelegramCore.StatsGraph
  final public let topWeekdaysGraph: TelegramCore.StatsGraph
  final public let topPosters: [TelegramCore.GroupStatsTopPoster]
  final public let topAdmins: [TelegramCore.GroupStatsTopAdmin]
  final public let topInviters: [TelegramCore.GroupStatsTopInviter]
  public static func == (lhs: TelegramCore.GroupStats, rhs: TelegramCore.GroupStats) -> Swift.Bool
  final public func withUpdatedGrowthGraph(_ growthGraph: TelegramCore.StatsGraph) -> TelegramCore.GroupStats
  final public func withUpdatedMembersGraph(_ membersGraph: TelegramCore.StatsGraph) -> TelegramCore.GroupStats
  final public func withUpdatedNewMembersBySourceGraph(_ newMembersBySourceGraph: TelegramCore.StatsGraph) -> TelegramCore.GroupStats
  final public func withUpdatedLanguagesGraph(_ languagesGraph: TelegramCore.StatsGraph) -> TelegramCore.GroupStats
  final public func withUpdatedMessagesGraph(_ messagesGraph: TelegramCore.StatsGraph) -> TelegramCore.GroupStats
  final public func withUpdatedActionsGraph(_ actionsGraph: TelegramCore.StatsGraph) -> TelegramCore.GroupStats
  final public func withUpdatedTopHoursGraph(_ topHoursGraph: TelegramCore.StatsGraph) -> TelegramCore.GroupStats
  final public func withUpdatedTopWeekdaysGraph(_ topWeekdaysGraph: TelegramCore.StatsGraph) -> TelegramCore.GroupStats
  @objc deinit
}
public struct GroupStatsContextState : Swift.Equatable {
  public var stats: TelegramCore.GroupStats?
  public static func == (a: TelegramCore.GroupStatsContextState, b: TelegramCore.GroupStatsContextState) -> Swift.Bool
}
final public class GroupStatsContext {
  final public var state: SwiftSignalKit.Signal<TelegramCore.GroupStatsContextState, SwiftSignalKit.NoError> {
    get
  }
  public init(postbox: PostboxKit.Postbox, network: TelegramCore.Network, datacenterId: Swift.Int32, peerId: PostboxKit.PeerId)
  final public func loadGrowthGraph()
  final public func loadMembersGraph()
  final public func loadNewMembersBySourceGraph()
  final public func loadLanguagesGraph()
  final public func loadMessagesGraph()
  final public func loadActionsGraph()
  final public func loadTopHoursGraph()
  final public func loadTopWeekdaysGraph()
  final public func loadDetailedGraph(_ graph: TelegramCore.StatsGraph, x: Swift.Int64) -> SwiftSignalKit.Signal<TelegramCore.StatsGraph?, SwiftSignalKit.NoError>
  @objc deinit
}
public enum TwoStepVerificationConfiguration {
  case notSet(pendingEmail: TelegramCore.TwoStepVerificationPendingEmail?)
  case set(hint: Swift.String, hasRecoveryEmail: Swift.Bool, pendingEmail: TelegramCore.TwoStepVerificationPendingEmail?, hasSecureValues: Swift.Bool, pendingResetTimestamp: Swift.Int32?)
}
public struct TwoStepVerificationSecureSecret {
  public let data: Foundation.Data
  public let derivation: TelegramCore.TwoStepSecurePasswordDerivation
  public let id: Swift.Int64
}
public struct TwoStepVerificationSettings {
  public let email: Swift.String
  public let secureSecret: TelegramCore.TwoStepVerificationSecureSecret?
}
public enum UpdateTwoStepVerificationPasswordError {
  case generic
  case invalidEmail
  public static func == (a: TelegramCore.UpdateTwoStepVerificationPasswordError, b: TelegramCore.UpdateTwoStepVerificationPasswordError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TwoStepVerificationPendingEmail : Swift.Equatable {
  public let pattern: Swift.String
  public let codeLength: Swift.Int32?
  public init(pattern: Swift.String, codeLength: Swift.Int32?)
  public static func == (a: TelegramCore.TwoStepVerificationPendingEmail, b: TelegramCore.TwoStepVerificationPendingEmail) -> Swift.Bool
}
public enum UpdateTwoStepVerificationPasswordResult {
  case none
  case password(password: Swift.String, pendingEmail: TelegramCore.TwoStepVerificationPendingEmail?)
}
public enum UpdatedTwoStepVerificationPassword {
  case none
  case password(password: Swift.String, hint: Swift.String, email: Swift.String?)
}
public enum RequestTwoStepVerificationPasswordRecoveryCodeError {
  case generic
  case limitExceeded
  public static func == (a: TelegramCore.RequestTwoStepVerificationPasswordRecoveryCodeError, b: TelegramCore.RequestTwoStepVerificationPasswordRecoveryCodeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RecoverTwoStepVerificationPasswordError {
  case generic
  case codeExpired
  case limitExceeded
  case invalidCode
  public static func == (a: TelegramCore.RecoverTwoStepVerificationPasswordError, b: TelegramCore.RecoverTwoStepVerificationPasswordError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RequestTwoStepPasswordResetResult {
  public enum ErrorReason {
    case generic
    case limitExceeded(retryAtTimestamp: Swift.Int32?)
  }
  case done
  case waitingForReset(resetAtTimestamp: Swift.Int32)
  case declined
  case error(reason: TelegramCore.RequestTwoStepPasswordResetResult.ErrorReason)
}
public class ContentRequiresValidationMessageAttribute : PostboxKit.MessageAttribute {
  public init()
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public enum BotPaymentInvoiceSource {
  case message(PostboxKit.MessageId)
  case slug(Swift.String)
}
public struct BotPaymentInvoiceFields : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public init()
  public static let name: TelegramCore.BotPaymentInvoiceFields
  public static let phone: TelegramCore.BotPaymentInvoiceFields
  public static let email: TelegramCore.BotPaymentInvoiceFields
  public static let shippingAddress: TelegramCore.BotPaymentInvoiceFields
  public static let flexibleShipping: TelegramCore.BotPaymentInvoiceFields
  public static let phoneAvailableToProvider: TelegramCore.BotPaymentInvoiceFields
  public static let emailAvailableToProvider: TelegramCore.BotPaymentInvoiceFields
  public typealias ArrayLiteralElement = TelegramCore.BotPaymentInvoiceFields
  public typealias Element = TelegramCore.BotPaymentInvoiceFields
  public typealias RawValue = Swift.Int32
}
public struct BotPaymentPrice : Swift.Equatable {
  public let label: Swift.String
  public let amount: Swift.Int64
  public init(label: Swift.String, amount: Swift.Int64)
  public static func == (a: TelegramCore.BotPaymentPrice, b: TelegramCore.BotPaymentPrice) -> Swift.Bool
}
public struct BotPaymentInvoice : Swift.Equatable {
  public struct Tip : Swift.Equatable {
    public var max: Swift.Int64
    public var suggested: [Swift.Int64]
    public static func == (a: TelegramCore.BotPaymentInvoice.Tip, b: TelegramCore.BotPaymentInvoice.Tip) -> Swift.Bool
  }
  public struct RecurrentInfo : Swift.Equatable {
    public var termsUrl: Swift.String
    public static func == (a: TelegramCore.BotPaymentInvoice.RecurrentInfo, b: TelegramCore.BotPaymentInvoice.RecurrentInfo) -> Swift.Bool
  }
  public let isTest: Swift.Bool
  public let requestedFields: TelegramCore.BotPaymentInvoiceFields
  public let currency: Swift.String
  public let prices: [TelegramCore.BotPaymentPrice]
  public let tip: TelegramCore.BotPaymentInvoice.Tip?
  public let recurrentInfo: TelegramCore.BotPaymentInvoice.RecurrentInfo?
  public static func == (a: TelegramCore.BotPaymentInvoice, b: TelegramCore.BotPaymentInvoice) -> Swift.Bool
}
public struct BotPaymentNativeProvider : Swift.Equatable {
  public let name: Swift.String
  public let params: Swift.String
  public static func == (a: TelegramCore.BotPaymentNativeProvider, b: TelegramCore.BotPaymentNativeProvider) -> Swift.Bool
}
public struct BotPaymentShippingAddress : Swift.Equatable {
  public let streetLine1: Swift.String
  public let streetLine2: Swift.String
  public let city: Swift.String
  public let state: Swift.String
  public let countryIso2: Swift.String
  public let postCode: Swift.String
  public init(streetLine1: Swift.String, streetLine2: Swift.String, city: Swift.String, state: Swift.String, countryIso2: Swift.String, postCode: Swift.String)
  public static func == (a: TelegramCore.BotPaymentShippingAddress, b: TelegramCore.BotPaymentShippingAddress) -> Swift.Bool
}
public struct BotPaymentRequestedInfo : Swift.Equatable {
  public var name: Swift.String?
  public var phone: Swift.String?
  public var email: Swift.String?
  public var shippingAddress: TelegramCore.BotPaymentShippingAddress?
  public init(name: Swift.String?, phone: Swift.String?, email: Swift.String?, shippingAddress: TelegramCore.BotPaymentShippingAddress?)
  public static func == (a: TelegramCore.BotPaymentRequestedInfo, b: TelegramCore.BotPaymentRequestedInfo) -> Swift.Bool
}
public enum BotPaymentSavedCredentials : Swift.Equatable {
  case card(id: Swift.String, title: Swift.String)
  public static func == (lhs: TelegramCore.BotPaymentSavedCredentials, rhs: TelegramCore.BotPaymentSavedCredentials) -> Swift.Bool
}
public struct BotPaymentForm : Swift.Equatable {
  public let id: Swift.Int64
  public let canSaveCredentials: Swift.Bool
  public let passwordMissing: Swift.Bool
  public let invoice: TelegramCore.BotPaymentInvoice
  public let paymentBotId: PostboxKit.PeerId
  public let providerId: PostboxKit.PeerId
  public let url: Swift.String
  public let nativeProvider: TelegramCore.BotPaymentNativeProvider?
  public let savedInfo: TelegramCore.BotPaymentRequestedInfo?
  public let savedCredentials: [TelegramCore.BotPaymentSavedCredentials]
  public let additionalPaymentMethods: [TelegramCore.BotPaymentMethod]
  public static func == (a: TelegramCore.BotPaymentForm, b: TelegramCore.BotPaymentForm) -> Swift.Bool
}
public struct BotPaymentMethod : Swift.Equatable {
  public let url: Swift.String
  public let title: Swift.String
  public static func == (a: TelegramCore.BotPaymentMethod, b: TelegramCore.BotPaymentMethod) -> Swift.Bool
}
public enum BotPaymentFormRequestError {
  case generic
  public static func == (a: TelegramCore.BotPaymentFormRequestError, b: TelegramCore.BotPaymentFormRequestError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ValidateBotPaymentFormError {
  case generic
  case shippingNotAvailable
  case addressStateInvalid
  case addressPostcodeInvalid
  case addressCityInvalid
  case nameInvalid
  case emailInvalid
  case phoneInvalid
  public static func == (a: TelegramCore.ValidateBotPaymentFormError, b: TelegramCore.ValidateBotPaymentFormError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct BotPaymentShippingOption : Swift.Equatable {
  public let id: Swift.String
  public let title: Swift.String
  public let prices: [TelegramCore.BotPaymentPrice]
  public static func == (a: TelegramCore.BotPaymentShippingOption, b: TelegramCore.BotPaymentShippingOption) -> Swift.Bool
}
public struct BotPaymentValidatedFormInfo : Swift.Equatable {
  public let id: Swift.String?
  public let shippingOptions: [TelegramCore.BotPaymentShippingOption]?
  public static func == (a: TelegramCore.BotPaymentValidatedFormInfo, b: TelegramCore.BotPaymentValidatedFormInfo) -> Swift.Bool
}
public enum BotPaymentCredentials {
  case generic(data: Swift.String, saveOnServer: Swift.Bool)
  case saved(id: Swift.String, tempPassword: Foundation.Data)
  case applePay(data: Swift.String)
}
public enum SendBotPaymentFormError {
  case generic
  case precheckoutFailed
  case paymentFailed
  case alreadyPaid
  public static func == (a: TelegramCore.SendBotPaymentFormError, b: TelegramCore.SendBotPaymentFormError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SendBotPaymentResult {
  case done(receiptMessageId: PostboxKit.MessageId?)
  case externalVerificationRequired(url: Swift.String)
}
public struct BotPaymentReceipt : Swift.Equatable {
  public let invoice: TelegramCore.BotPaymentInvoice
  public let info: TelegramCore.BotPaymentRequestedInfo?
  public let shippingOption: TelegramCore.BotPaymentShippingOption?
  public let credentialsTitle: Swift.String
  public let invoiceMedia: TelegramCore.TelegramMediaInvoice
  public let tipAmount: Swift.Int64?
  public let botPaymentId: PostboxKit.PeerId
  public static func == (lhs: TelegramCore.BotPaymentReceipt, rhs: TelegramCore.BotPaymentReceipt) -> Swift.Bool
}
public enum RequestBotPaymentReceiptError {
  case generic
  public static func == (a: TelegramCore.RequestBotPaymentReceiptError, b: TelegramCore.RequestBotPaymentReceiptError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct BotPaymentInfo : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public init()
  public static let paymentInfo: TelegramCore.BotPaymentInfo
  public static let shippingInfo: TelegramCore.BotPaymentInfo
  public typealias ArrayLiteralElement = TelegramCore.BotPaymentInfo
  public typealias Element = TelegramCore.BotPaymentInfo
  public typealias RawValue = Swift.Int32
}
public struct SecureIdDriversLicenseValue : Swift.Equatable {
  public var identifier: Swift.String
  public var expiryDate: TelegramCore.SecureIdDate?
  public var verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference]
  public var translations: [TelegramCore.SecureIdVerificationDocumentReference]
  public var selfieDocument: TelegramCore.SecureIdVerificationDocumentReference?
  public var frontSideDocument: TelegramCore.SecureIdVerificationDocumentReference?
  public var backSideDocument: TelegramCore.SecureIdVerificationDocumentReference?
  public init(identifier: Swift.String, expiryDate: TelegramCore.SecureIdDate?, verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference], translations: [TelegramCore.SecureIdVerificationDocumentReference], selfieDocument: TelegramCore.SecureIdVerificationDocumentReference?, frontSideDocument: TelegramCore.SecureIdVerificationDocumentReference?, backSideDocument: TelegramCore.SecureIdVerificationDocumentReference?)
  public static func == (lhs: TelegramCore.SecureIdDriversLicenseValue, rhs: TelegramCore.SecureIdDriversLicenseValue) -> Swift.Bool
}
final public class MessageReadStats {
  final public let reactionCount: Swift.Int
  final public let peers: [TelegramCore.EnginePeer]
  public init(reactionCount: Swift.Int, peers: [TelegramCore.EnginePeer])
  @objc deinit
}
public enum TelegramMediaWebpageAttribute : PostboxKit.PostboxCoding, Swift.Equatable {
  case unsupported
  case theme(TelegramCore.TelegraMediaWebpageThemeAttribute)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.TelegramMediaWebpageAttribute, b: TelegramCore.TelegramMediaWebpageAttribute) -> Swift.Bool
}
final public class TelegraMediaWebpageThemeAttribute : PostboxKit.PostboxCoding, Swift.Equatable {
  public static func == (lhs: TelegramCore.TelegraMediaWebpageThemeAttribute, rhs: TelegramCore.TelegraMediaWebpageThemeAttribute) -> Swift.Bool
  final public let files: [TelegramCore.TelegramMediaFile]
  final public let settings: TelegramCore.TelegramThemeSettings?
  public init(files: [TelegramCore.TelegramMediaFile], settings: TelegramCore.TelegramThemeSettings?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
final public class TelegramMediaWebpageLoadedContent : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let url: Swift.String
  final public let displayUrl: Swift.String
  final public let hash: Swift.Int32
  final public let type: Swift.String?
  final public let websiteName: Swift.String?
  final public let title: Swift.String?
  final public let text: Swift.String?
  final public let embedUrl: Swift.String?
  final public let embedType: Swift.String?
  final public let embedSize: TelegramCore.PixelDimensions?
  final public let duration: Swift.Int?
  final public let author: Swift.String?
  final public let image: TelegramCore.TelegramMediaImage?
  final public let file: TelegramCore.TelegramMediaFile?
  final public let attributes: [TelegramCore.TelegramMediaWebpageAttribute]
  final public let instantPage: TelegramCore.InstantPage?
  public init(url: Swift.String, displayUrl: Swift.String, hash: Swift.Int32, type: Swift.String?, websiteName: Swift.String?, title: Swift.String?, text: Swift.String?, embedUrl: Swift.String?, embedType: Swift.String?, embedSize: TelegramCore.PixelDimensions?, duration: Swift.Int?, author: Swift.String?, image: TelegramCore.TelegramMediaImage?, file: TelegramCore.TelegramMediaFile?, attributes: [TelegramCore.TelegramMediaWebpageAttribute], instantPage: TelegramCore.InstantPage?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public func == (lhs: TelegramCore.TelegramMediaWebpageLoadedContent, rhs: TelegramCore.TelegramMediaWebpageLoadedContent) -> Swift.Bool
public enum TelegramMediaWebpageContent {
  case Pending(Swift.Int32, Swift.String?)
  case Loaded(TelegramCore.TelegramMediaWebpageLoadedContent)
}
final public class TelegramMediaWebpage : PostboxKit.Media, Swift.Equatable {
  final public var id: PostboxKit.MediaId? {
    get
  }
  final public let peerIds: [PostboxKit.PeerId]
  final public let webpageId: PostboxKit.MediaId
  final public let content: TelegramCore.TelegramMediaWebpageContent
  public init(webpageId: PostboxKit.MediaId, content: TelegramCore.TelegramMediaWebpageContent)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isLikelyToBeUpdated() -> Swift.Bool
  final public func isEqual(to other: PostboxKit.Media) -> Swift.Bool
  final public func isSemanticallyEqual(to other: PostboxKit.Media) -> Swift.Bool
  public static func == (lhs: TelegramCore.TelegramMediaWebpage, rhs: TelegramCore.TelegramMediaWebpage) -> Swift.Bool
  @objc deinit
}
public enum TelegramEngineAuthorizationState {
  case unauthorized(TelegramCore.UnauthorizedAccountState)
  case authorized
}
extension TelegramCore.TelegramEngineUnauthorized {
  @_hasMissingDesignatedInitializers final public class Auth {
    final public func exportAuthTransferToken(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, otherAccountUserIds: [PostboxKit.PeerId.Id], syncContacts: Swift.Bool) -> SwiftSignalKit.Signal<TelegramCore.ExportAuthTransferTokenResult, TelegramCore.ExportAuthTransferTokenError>
    final public func twoStepAuthData() -> SwiftSignalKit.Signal<TelegramCore.TwoStepAuthData, MtProtoKit.MTRpcError>
    final public func test() -> SwiftSignalKit.Signal<Swift.Bool, Swift.String>
    final public func updateTwoStepVerificationPassword(currentPassword: Swift.String?, updatedPassword: TelegramCore.UpdatedTwoStepVerificationPassword) -> SwiftSignalKit.Signal<TelegramCore.UpdateTwoStepVerificationPasswordResult, TelegramCore.UpdateTwoStepVerificationPasswordError>
    final public func requestTwoStepVerificationPasswordRecoveryCode() -> SwiftSignalKit.Signal<Swift.String, TelegramCore.RequestTwoStepVerificationPasswordRecoveryCodeError>
    final public func checkPasswordRecoveryCode(code: Swift.String) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.PasswordRecoveryError>
    final public func performPasswordRecovery(code: Swift.String, updatedPassword: TelegramCore.UpdatedTwoStepVerificationPassword) -> SwiftSignalKit.Signal<TelegramCore.RecoveredAccountData, TelegramCore.PasswordRecoveryError>
    final public func resendTwoStepRecoveryEmail() -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.ResendTwoStepRecoveryEmailError>
    final public func uploadedPeerVideo(resource: PostboxKit.MediaResource) -> SwiftSignalKit.Signal<TelegramCore.UploadedPeerPhotoData, SwiftSignalKit.NoError>
    final public func state() -> SwiftSignalKit.Signal<TelegramCore.TelegramEngineAuthorizationState?, SwiftSignalKit.NoError>
    final public func setState(state: TelegramCore.UnauthorizedAccountState) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    @objc deinit
  }
}
public enum DeleteAccountError {
  case generic
  public static func == (a: TelegramCore.DeleteAccountError, b: TelegramCore.DeleteAccountError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class Auth {
    final public func twoStepAuthData() -> SwiftSignalKit.Signal<TelegramCore.TwoStepAuthData, MtProtoKit.MTRpcError>
    final public func updateTwoStepVerificationPassword(currentPassword: Swift.String?, updatedPassword: TelegramCore.UpdatedTwoStepVerificationPassword) -> SwiftSignalKit.Signal<TelegramCore.UpdateTwoStepVerificationPasswordResult, TelegramCore.UpdateTwoStepVerificationPasswordError>
    final public func deleteAccount(reason: Swift.String, password: Swift.String?) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.DeleteAccountError>
    final public func updateTwoStepVerificationEmail(currentPassword: Swift.String, updatedEmail: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.UpdateTwoStepVerificationPasswordResult, TelegramCore.UpdateTwoStepVerificationPasswordError>
    final public func confirmTwoStepRecoveryEmail(code: Swift.String) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.ConfirmTwoStepRecoveryEmailError>
    final public func resendTwoStepRecoveryEmail() -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.ResendTwoStepRecoveryEmailError>
    final public func cancelTwoStepRecoveryEmail() -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.CancelTwoStepRecoveryEmailError>
    final public func twoStepVerificationConfiguration() -> SwiftSignalKit.Signal<TelegramCore.TwoStepVerificationConfiguration, SwiftSignalKit.NoError>
    final public func requestTwoStepVerifiationSettings(password: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.TwoStepVerificationSettings, TelegramCore.AuthorizationPasswordVerificationError>
    final public func requestTwoStepVerificationPasswordRecoveryCode() -> SwiftSignalKit.Signal<Swift.String, TelegramCore.RequestTwoStepVerificationPasswordRecoveryCodeError>
    final public func performPasswordRecovery(code: Swift.String, updatedPassword: TelegramCore.UpdatedTwoStepVerificationPassword) -> SwiftSignalKit.Signal<TelegramCore.RecoveredAccountData, TelegramCore.PasswordRecoveryError>
    final public func cachedTwoStepPasswordToken() -> SwiftSignalKit.Signal<TelegramCore.TemporaryTwoStepPasswordToken?, SwiftSignalKit.NoError>
    final public func cacheTwoStepPasswordToken(token: TelegramCore.TemporaryTwoStepPasswordToken?) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func requestTemporaryTwoStepPasswordToken(password: Swift.String, period: Swift.Int32, requiresBiometrics: Swift.Bool) -> SwiftSignalKit.Signal<TelegramCore.TemporaryTwoStepPasswordToken, TelegramCore.AuthorizationPasswordVerificationError>
    final public func checkPasswordRecoveryCode(code: Swift.String) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.PasswordRecoveryError>
    final public func requestTwoStepPasswordReset() -> SwiftSignalKit.Signal<TelegramCore.RequestTwoStepPasswordResetResult, SwiftSignalKit.NoError>
    final public func declineTwoStepPasswordReset() -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func requestCancelAccountResetData(hash: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.CancelAccountResetData, TelegramCore.RequestCancelAccountResetDataError>
    final public func requestNextCancelAccountResetOption(phoneNumber: Swift.String, phoneCodeHash: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.CancelAccountResetData, TelegramCore.RequestCancelAccountResetDataError>
    final public func requestCancelAccountReset(phoneCodeHash: Swift.String, phoneCode: Swift.String) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.CancelAccountResetError>
    @objc deinit
  }
}
extension TelegramCore.SomeTelegramEngine {
  @_hasMissingDesignatedInitializers final public class Auth {
    final public func twoStepAuthData() -> SwiftSignalKit.Signal<TelegramCore.TwoStepAuthData, MtProtoKit.MTRpcError>
    final public func updateTwoStepVerificationPassword(currentPassword: Swift.String?, updatedPassword: TelegramCore.UpdatedTwoStepVerificationPassword) -> SwiftSignalKit.Signal<TelegramCore.UpdateTwoStepVerificationPasswordResult, TelegramCore.UpdateTwoStepVerificationPasswordError>
    final public func requestTwoStepVerificationPasswordRecoveryCode() -> SwiftSignalKit.Signal<Swift.String, TelegramCore.RequestTwoStepVerificationPasswordRecoveryCodeError>
    final public func checkPasswordRecoveryCode(code: Swift.String) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.PasswordRecoveryError>
    @objc deinit
  }
  public var auth: TelegramCore.SomeTelegramEngine.Auth {
    get
  }
}
final public class SavedStickerItem : Swift.Codable, Swift.Equatable {
  final public let file: TelegramCore.TelegramMediaFile
  final public let stringRepresentations: [Swift.String]
  public init(file: TelegramCore.TelegramMediaFile, stringRepresentations: [Swift.String])
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.SavedStickerItem, rhs: TelegramCore.SavedStickerItem) -> Swift.Bool
  @objc deinit
}
public struct SecureIdIDCardValue : Swift.Equatable {
  public var identifier: Swift.String
  public var expiryDate: TelegramCore.SecureIdDate?
  public var verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference]
  public var translations: [TelegramCore.SecureIdVerificationDocumentReference]
  public var selfieDocument: TelegramCore.SecureIdVerificationDocumentReference?
  public var frontSideDocument: TelegramCore.SecureIdVerificationDocumentReference?
  public var backSideDocument: TelegramCore.SecureIdVerificationDocumentReference?
  public init(identifier: Swift.String, expiryDate: TelegramCore.SecureIdDate?, verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference], translations: [TelegramCore.SecureIdVerificationDocumentReference], selfieDocument: TelegramCore.SecureIdVerificationDocumentReference?, frontSideDocument: TelegramCore.SecureIdVerificationDocumentReference?, backSideDocument: TelegramCore.SecureIdVerificationDocumentReference?)
  public static func == (lhs: TelegramCore.SecureIdIDCardValue, rhs: TelegramCore.SecureIdIDCardValue) -> Swift.Bool
}
final public class SynchronizeGroupedPeersOperation : PostboxKit.PostboxCoding {
  final public let peerId: PostboxKit.PeerId
  final public let groupId: PostboxKit.PeerGroupId
  public init(peerId: PostboxKit.PeerId, groupId: PostboxKit.PeerGroupId)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public func _internal_deleteMessages(transaction: PostboxKit.Transaction, mediaBox: PostboxKit.MediaBox, ids: [PostboxKit.MessageId], deleteMedia: Swift.Bool = true, manualAddMessageThreadStatsDifference: ((PostboxKit.MessageId, Swift.Int, Swift.Int) -> Swift.Void)? = nil)
public enum ClearCallHistoryError {
  case generic
  public static func == (a: TelegramCore.ClearCallHistoryError, b: TelegramCore.ClearCallHistoryError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SetChatMessageAutoremoveTimeoutError {
  case generic
  public static func == (a: TelegramCore.SetChatMessageAutoremoveTimeoutError, b: TelegramCore.SetChatMessageAutoremoveTimeoutError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct FoundPeer : Swift.Equatable {
  public let peer: PostboxKit.Peer
  public let subscribers: Swift.Int32?
  public init(peer: PostboxKit.Peer, subscribers: Swift.Int32?)
  public static func == (lhs: TelegramCore.FoundPeer, rhs: TelegramCore.FoundPeer) -> Swift.Bool
}
final public class TelegramSecretChat : PostboxKit.Peer, Swift.Equatable {
  final public let id: PostboxKit.PeerId
  final public let regularPeerId: PostboxKit.PeerId
  final public let accessHash: Swift.Int64
  final public let creationDate: Swift.Int32
  final public let role: TelegramCore.SecretChatRole
  final public let embeddedState: TelegramCore.SecretChatEmbeddedPeerState
  final public let messageAutoremoveTimeout: Swift.Int32?
  final public var indexName: PostboxKit.PeerIndexNameRepresentation {
    get
  }
  final public var associatedMediaIds: [PostboxKit.MediaId]? {
    get
  }
  final public let associatedPeerId: PostboxKit.PeerId?
  final public let notificationSettingsPeerId: PostboxKit.PeerId?
  final public var timeoutAttribute: Swift.UInt32? {
    get
  }
  public init(id: PostboxKit.PeerId, creationDate: Swift.Int32, regularPeerId: PostboxKit.PeerId, accessHash: Swift.Int64, role: TelegramCore.SecretChatRole, embeddedState: TelegramCore.SecretChatEmbeddedPeerState, messageAutoremoveTimeout: Swift.Int32?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(_ other: PostboxKit.Peer) -> Swift.Bool
  public static func == (lhs: TelegramCore.TelegramSecretChat, rhs: TelegramCore.TelegramSecretChat) -> Swift.Bool
  final public func withUpdatedEmbeddedState(_ embeddedState: TelegramCore.SecretChatEmbeddedPeerState) -> TelegramCore.TelegramSecretChat
  final public func withUpdatedMessageAutoremoveTimeout(_ messageAutoremoveTimeout: Swift.Int32?) -> TelegramCore.TelegramSecretChat
  @objc deinit
}
final public class CachedSecretChatData : PostboxKit.CachedPeerData {
  final public let peerIds: Swift.Set<PostboxKit.PeerId>
  final public let messageIds: Swift.Set<PostboxKit.MessageId>
  final public let associatedHistoryMessageId: PostboxKit.MessageId?
  final public let peerStatusSettings: TelegramCore.PeerStatusSettings?
  public init(peerStatusSettings: TelegramCore.PeerStatusSettings?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to: PostboxKit.CachedPeerData) -> Swift.Bool
  final public func withUpdatedPeerStatusSettings(_ peerStatusSettings: TelegramCore.PeerStatusSettings) -> TelegramCore.CachedSecretChatData
  @objc deinit
}
public enum SavedStickerResult {
  case generic
  case limitExceeded(Swift.Int32, Swift.Int32)
}
public class SourceReferenceMessageAttribute : PostboxKit.MessageAttribute {
  final public let messageId: PostboxKit.MessageId
  final public let associatedMessageIds: [PostboxKit.MessageId]
  final public let associatedPeerIds: [PostboxKit.PeerId]
  public init(messageId: PostboxKit.MessageId)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public enum PeerCacheUsageCategory : Swift.Int32 {
  case image
  case video
  case audio
  case file
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public struct CacheUsageStats {
  public let media: [PostboxKit.PeerId : [TelegramCore.PeerCacheUsageCategory : [PostboxKit.MediaId : Swift.Int64]]]
  public let mediaResourceIds: [PostboxKit.MediaId : [PostboxKit.MediaResourceId]]
  public let peers: [PostboxKit.PeerId : PostboxKit.Peer]
  public let otherSize: Swift.Int64
  public let otherPaths: [Swift.String]
  public let cacheSize: Swift.Int64
  public let tempPaths: [Swift.String]
  public let tempSize: Swift.Int64
  public let immutableSize: Swift.Int64
  public init(media: [PostboxKit.PeerId : [TelegramCore.PeerCacheUsageCategory : [PostboxKit.MediaId : Swift.Int64]]], mediaResourceIds: [PostboxKit.MediaId : [PostboxKit.MediaResourceId]], peers: [PostboxKit.PeerId : PostboxKit.Peer], otherSize: Swift.Int64, otherPaths: [Swift.String], cacheSize: Swift.Int64, tempPaths: [Swift.String], tempSize: Swift.Int64, immutableSize: Swift.Int64)
}
public enum CacheUsageStatsResult {
  case progress(Swift.Float)
  case result(TelegramCore.CacheUsageStats)
}
final public class StorageUsageStats {
  public enum CategoryKey : Swift.Hashable {
    case photos
    case videos
    case files
    case music
    case stickers
    case avatars
    case misc
    public static func == (a: TelegramCore.StorageUsageStats.CategoryKey, b: TelegramCore.StorageUsageStats.CategoryKey) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct CategoryData {
    public var size: Swift.Int64
    public var messages: [TelegramCore.EngineMessage.Id : Swift.Int64]
    public init(size: Swift.Int64, messages: [TelegramCore.EngineMessage.Id : Swift.Int64])
  }
  final public var categories: [TelegramCore.StorageUsageStats.CategoryKey : TelegramCore.StorageUsageStats.CategoryData] {
    get
  }
  public init(categories: [TelegramCore.StorageUsageStats.CategoryKey : TelegramCore.StorageUsageStats.CategoryData])
  @objc deinit
}
final public class AllStorageUsageStats {
  final public class PeerStats {
    final public let peer: TelegramCore.EnginePeer
    final public let stats: TelegramCore.StorageUsageStats
    public init(peer: TelegramCore.EnginePeer, stats: TelegramCore.StorageUsageStats)
    @objc deinit
  }
  final public var deviceAvailableSpace: Swift.Int64
  final public var deviceFreeSpace: Swift.Int64
  final public var totalStats: TelegramCore.StorageUsageStats {
    get
  }
  final public var peers: [TelegramCore.EnginePeer.Id : TelegramCore.AllStorageUsageStats.PeerStats] {
    get
  }
  public init(deviceAvailableSpace: Swift.Int64, deviceFreeSpace: Swift.Int64, totalStats: TelegramCore.StorageUsageStats, peers: [TelegramCore.EnginePeer.Id : TelegramCore.AllStorageUsageStats.PeerStats])
  @objc deinit
}
public func collectRawStorageUsageReport(containerPath: Swift.String) -> Swift.String
final public class CachedStickerPack : Swift.Codable {
  final public let info: TelegramCore.StickerPackCollectionInfo?
  final public let items: [TelegramCore.StickerPackItem]
  final public let hash: Swift.Int32
  public init(info: TelegramCore.StickerPackCollectionInfo?, items: [TelegramCore.StickerPackItem], hash: Swift.Int32)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func cacheKey(_ id: PostboxKit.ItemCollectionId) -> PostboxKit.ValueBoxKey
  public static func cacheKey(shortName: Swift.String) -> PostboxKit.ValueBoxKey
  @objc deinit
}
public struct AccountBackupData : Swift.Codable, Swift.Equatable {
  public struct DatacenterKey : Swift.Codable, Swift.Equatable {
    public var id: Swift.Int32
    public var keyId: Swift.Int64
    public var key: Foundation.Data
    public init(id: Swift.Int32, keyId: Swift.Int64, key: Foundation.Data)
    public static func == (a: TelegramCore.AccountBackupData.DatacenterKey, b: TelegramCore.AccountBackupData.DatacenterKey) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public var masterDatacenterId: Swift.Int32
  public var peerId: Swift.Int64
  public var masterDatacenterKey: Foundation.Data
  public var masterDatacenterKeyId: Swift.Int64
  public var notificationEncryptionKeyId: Foundation.Data?
  public var notificationEncryptionKey: Foundation.Data?
  public var additionalDatacenterKeys: [Swift.Int32 : TelegramCore.AccountBackupData.DatacenterKey]
  public init(masterDatacenterId: Swift.Int32, peerId: Swift.Int64, masterDatacenterKey: Foundation.Data, masterDatacenterKeyId: Swift.Int64, notificationEncryptionKeyId: Foundation.Data?, notificationEncryptionKey: Foundation.Data?, additionalDatacenterKeys: [Swift.Int32 : TelegramCore.AccountBackupData.DatacenterKey])
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.AccountBackupData, b: TelegramCore.AccountBackupData) -> Swift.Bool
}
final public class AccountBackupDataAttribute : Swift.Codable, Swift.Equatable {
  final public let data: TelegramCore.AccountBackupData?
  public init(data: TelegramCore.AccountBackupData?)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.AccountBackupDataAttribute, rhs: TelegramCore.AccountBackupDataAttribute) -> Swift.Bool
  @objc deinit
}
public struct SecureIdInternalPassportValue : Swift.Equatable {
  public var identifier: Swift.String
  public var expiryDate: TelegramCore.SecureIdDate?
  public var verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference]
  public var translations: [TelegramCore.SecureIdVerificationDocumentReference]
  public var selfieDocument: TelegramCore.SecureIdVerificationDocumentReference?
  public var frontSideDocument: TelegramCore.SecureIdVerificationDocumentReference?
  public init(identifier: Swift.String, expiryDate: TelegramCore.SecureIdDate?, verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference], translations: [TelegramCore.SecureIdVerificationDocumentReference], selfieDocument: TelegramCore.SecureIdVerificationDocumentReference?, frontSideDocument: TelegramCore.SecureIdVerificationDocumentReference?)
  public static func == (lhs: TelegramCore.SecureIdInternalPassportValue, rhs: TelegramCore.SecureIdInternalPassportValue) -> Swift.Bool
}
public struct TermsOfServiceUpdate : Swift.Equatable {
  public let id: Swift.String
  public let text: Swift.String
  public let entities: [TelegramCore.MessageTextEntity]
  public let ageConfirmation: Swift.Int32?
  public static func == (a: TelegramCore.TermsOfServiceUpdate, b: TelegramCore.TermsOfServiceUpdate) -> Swift.Bool
}
public class ForwardCountMessageAttribute : PostboxKit.MessageAttribute {
  final public let count: Swift.Int
  public var associatedMessageIds: [PostboxKit.MessageId]
  public init(count: Swift.Int)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public enum RequestMessageSelectPollOptionError {
  case generic
  public static func == (a: TelegramCore.RequestMessageSelectPollOptionError, b: TelegramCore.RequestMessageSelectPollOptionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PollResultsOptionState : Swift.Equatable {
  public var peers: [PostboxKit.RenderedPeer]
  public var isLoadingMore: Swift.Bool
  public var hasLoadedOnce: Swift.Bool
  public var canLoadMore: Swift.Bool
  public var count: Swift.Int
  public static func == (a: TelegramCore.PollResultsOptionState, b: TelegramCore.PollResultsOptionState) -> Swift.Bool
}
public struct PollResultsState : Swift.Equatable {
  public var options: [Foundation.Data : TelegramCore.PollResultsOptionState]
  public static func == (a: TelegramCore.PollResultsState, b: TelegramCore.PollResultsState) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class PollResultsContext {
  final public var state: SwiftSignalKit.Signal<TelegramCore.PollResultsState, SwiftSignalKit.NoError> {
    get
  }
  final public func loadMore(optionOpaqueIdentifier: Foundation.Data)
  @objc deinit
}
extension TelegramCore.TelegramEngine.EngineData.Item {
  public enum OrderedLists {
    public struct ListItems : TelegramCore.TelegramEngineDataItem {
      public typealias Result = [PostboxKit.OrderedItemListEntry]
      public init(collectionId: Swift.Int32)
    }
  }
}
public enum ReplyMarkupButtonRequestPeerType : Swift.Codable, Swift.Equatable {
  public struct User : Swift.Codable, Swift.Equatable {
    public var isBot: Swift.Bool?
    public var isPremium: Swift.Bool?
    public init(isBot: Swift.Bool?, isPremium: Swift.Bool?)
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
    public static func == (a: TelegramCore.ReplyMarkupButtonRequestPeerType.User, b: TelegramCore.ReplyMarkupButtonRequestPeerType.User) -> Swift.Bool
  }
  public struct Group : Swift.Codable, Swift.Equatable {
    public var isCreator: Swift.Bool
    public var hasUsername: Swift.Bool?
    public var isForum: Swift.Bool?
    public var botParticipant: Swift.Bool
    public var userAdminRights: TelegramCore.TelegramChatAdminRights?
    public var botAdminRights: TelegramCore.TelegramChatAdminRights?
    public init(isCreator: Swift.Bool, hasUsername: Swift.Bool?, isForum: Swift.Bool?, botParticipant: Swift.Bool, userAdminRights: TelegramCore.TelegramChatAdminRights?, botAdminRights: TelegramCore.TelegramChatAdminRights?)
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
    public static func == (a: TelegramCore.ReplyMarkupButtonRequestPeerType.Group, b: TelegramCore.ReplyMarkupButtonRequestPeerType.Group) -> Swift.Bool
  }
  public struct Channel : Swift.Codable, Swift.Equatable {
    public var isCreator: Swift.Bool
    public var hasUsername: Swift.Bool?
    public var userAdminRights: TelegramCore.TelegramChatAdminRights?
    public var botAdminRights: TelegramCore.TelegramChatAdminRights?
    public init(isCreator: Swift.Bool, hasUsername: Swift.Bool?, userAdminRights: TelegramCore.TelegramChatAdminRights?, botAdminRights: TelegramCore.TelegramChatAdminRights?)
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
    public static func == (a: TelegramCore.ReplyMarkupButtonRequestPeerType.Channel, b: TelegramCore.ReplyMarkupButtonRequestPeerType.Channel) -> Swift.Bool
  }
  case user(TelegramCore.ReplyMarkupButtonRequestPeerType.User)
  case group(TelegramCore.ReplyMarkupButtonRequestPeerType.Group)
  case channel(TelegramCore.ReplyMarkupButtonRequestPeerType.Channel)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.ReplyMarkupButtonRequestPeerType, b: TelegramCore.ReplyMarkupButtonRequestPeerType) -> Swift.Bool
}
public enum ReplyMarkupButtonAction : PostboxKit.PostboxCoding, Swift.Equatable {
  case text
  case url(Swift.String)
  case callback(requiresPassword: Swift.Bool, data: PostboxKit.MemoryBuffer)
  case requestPhone
  case requestMap
  case switchInline(samePeer: Swift.Bool, query: Swift.String)
  case openWebApp
  case payment
  case urlAuth(url: Swift.String, buttonId: Swift.Int32)
  case setupPoll(isQuiz: Swift.Bool?)
  case openUserProfile(peerId: PostboxKit.PeerId)
  case openWebView(url: Swift.String, simple: Swift.Bool)
  case requestPeer(peerType: TelegramCore.ReplyMarkupButtonRequestPeerType, buttonId: Swift.Int32)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.ReplyMarkupButtonAction, b: TelegramCore.ReplyMarkupButtonAction) -> Swift.Bool
}
public struct ReplyMarkupButton : PostboxKit.PostboxCoding, Swift.Equatable {
  public let title: Swift.String
  public let titleWhenForwarded: Swift.String?
  public let action: TelegramCore.ReplyMarkupButtonAction
  public init(title: Swift.String, titleWhenForwarded: Swift.String?, action: TelegramCore.ReplyMarkupButtonAction)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.ReplyMarkupButton, rhs: TelegramCore.ReplyMarkupButton) -> Swift.Bool
}
public struct ReplyMarkupRow : PostboxKit.PostboxCoding, Swift.Equatable {
  public let buttons: [TelegramCore.ReplyMarkupButton]
  public init(buttons: [TelegramCore.ReplyMarkupButton])
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.ReplyMarkupRow, rhs: TelegramCore.ReplyMarkupRow) -> Swift.Bool
}
public struct ReplyMarkupMessageFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public init()
  public static let once: TelegramCore.ReplyMarkupMessageFlags
  public static let personal: TelegramCore.ReplyMarkupMessageFlags
  public static let setupReply: TelegramCore.ReplyMarkupMessageFlags
  public static let inline: TelegramCore.ReplyMarkupMessageFlags
  public static let fit: TelegramCore.ReplyMarkupMessageFlags
  public static let persistent: TelegramCore.ReplyMarkupMessageFlags
  public typealias ArrayLiteralElement = TelegramCore.ReplyMarkupMessageFlags
  public typealias Element = TelegramCore.ReplyMarkupMessageFlags
  public typealias RawValue = Swift.Int32
}
public class ReplyMarkupMessageAttribute : PostboxKit.MessageAttribute, Swift.Equatable {
  final public let rows: [TelegramCore.ReplyMarkupRow]
  final public let flags: TelegramCore.ReplyMarkupMessageFlags
  final public let placeholder: Swift.String?
  public init(rows: [TelegramCore.ReplyMarkupRow], flags: TelegramCore.ReplyMarkupMessageFlags, placeholder: Swift.String?)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.ReplyMarkupMessageAttribute, rhs: TelegramCore.ReplyMarkupMessageAttribute) -> Swift.Bool
  @objc deinit
}
public class EmojiSearchQueryMessageAttribute : PostboxKit.MessageAttribute {
  final public let query: Swift.String
  public var associatedMessageIds: [PostboxKit.MessageId]
  public init(query: Swift.String)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public func fetchedMediaResource(mediaBox: PostboxKit.MediaBox, userLocation: TelegramCore.MediaResourceUserLocation, userContentType: PostboxKit.MediaResourceUserContentType, reference: TelegramCore.MediaResourceReference, range: (Swift.Range<Swift.Int64>, PostboxKit.MediaBoxFetchPriority)? = nil, statsCategory: TelegramCore.MediaResourceStatsCategory = .generic, reportResultStatus: Swift.Bool = false, preferBackgroundReferenceRevalidation: Swift.Bool = false, continueInBackground: Swift.Bool = false) -> SwiftSignalKit.Signal<PostboxKit.FetchResourceSourceType, PostboxKit.FetchResourceError>
extension PostboxKit.MediaResourceStorageLocation {
  convenience public init?(userLocation: TelegramCore.MediaResourceUserLocation, reference: TelegramCore.MediaResourceReference)
}
public enum MediaResourceUserLocation : Swift.Equatable {
  case peer(TelegramCore.EnginePeer.Id)
  case other
  public static func == (a: TelegramCore.MediaResourceUserLocation, b: TelegramCore.MediaResourceUserLocation) -> Swift.Bool
}
public func fetchedMediaResource(mediaBox: PostboxKit.MediaBox, userLocation: TelegramCore.MediaResourceUserLocation, userContentType: PostboxKit.MediaResourceUserContentType, reference: TelegramCore.MediaResourceReference, ranges: [(Swift.Range<Swift.Int64>, PostboxKit.MediaBoxFetchPriority)]?, statsCategory: TelegramCore.MediaResourceStatsCategory = .generic, reportResultStatus: Swift.Bool = false, preferBackgroundReferenceRevalidation: Swift.Bool = false, continueInBackground: Swift.Bool = false) -> SwiftSignalKit.Signal<PostboxKit.FetchResourceSourceType, PostboxKit.FetchResourceError>
public func stickerPackFileReference(_ file: TelegramCore.TelegramMediaFile) -> TelegramCore.FileMediaReference
public func findMediaResourceById(message: TelegramCore.EngineMessage, resourceId: PostboxKit.MediaResourceId) -> TelegramCore.TelegramMediaResource?
public enum CallSessionError : Swift.Equatable {
  case generic
  case privacyRestricted
  case notSupportedByPeer(isVideo: Swift.Bool)
  case serverProvided(text: Swift.String)
  case disconnected
  public static func == (a: TelegramCore.CallSessionError, b: TelegramCore.CallSessionError) -> Swift.Bool
}
public enum CallSessionEndedType {
  case hungUp
  case busy
  case missed
  public static func == (a: TelegramCore.CallSessionEndedType, b: TelegramCore.CallSessionEndedType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CallSessionTerminationReason : Swift.Equatable {
  case ended(TelegramCore.CallSessionEndedType)
  case error(TelegramCore.CallSessionError)
  public static func == (lhs: TelegramCore.CallSessionTerminationReason, rhs: TelegramCore.CallSessionTerminationReason) -> Swift.Bool
}
public struct CallId : Swift.Equatable {
  public let id: Swift.Int64
  public let accessHash: Swift.Int64
  public init(id: Swift.Int64, accessHash: Swift.Int64)
  public static func == (a: TelegramCore.CallId, b: TelegramCore.CallId) -> Swift.Bool
}
public typealias CallSessionInternalId = Foundation.UUID
public struct CallSessionRingingState : Swift.Equatable {
  public let id: TelegramCore.CallSessionInternalId
  public let peerId: PostboxKit.PeerId
  public let isVideo: Swift.Bool
  public let isVideoPossible: Swift.Bool
  public static func == (a: TelegramCore.CallSessionRingingState, b: TelegramCore.CallSessionRingingState) -> Swift.Bool
}
public enum DropCallReason {
  case hangUp
  case busy
  case disconnect
  case missed
  public static func == (a: TelegramCore.DropCallReason, b: TelegramCore.DropCallReason) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CallTerminationOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public init()
  public static let reportRating: TelegramCore.CallTerminationOptions
  public static let sendDebugLogs: TelegramCore.CallTerminationOptions
  public typealias ArrayLiteralElement = TelegramCore.CallTerminationOptions
  public typealias Element = TelegramCore.CallTerminationOptions
  public typealias RawValue = Swift.Int
}
public enum CallSessionState {
  case ringing
  case accepting
  case requesting(ringing: Swift.Bool)
  case active(id: TelegramCore.CallId, key: Foundation.Data, keyVisualHash: Foundation.Data, connections: TelegramCore.CallSessionConnectionSet, maxLayer: Swift.Int32, version: Swift.String, allowsP2P: Swift.Bool)
  case dropping(reason: TelegramCore.CallSessionTerminationReason)
  case terminated(id: TelegramCore.CallId?, reason: TelegramCore.CallSessionTerminationReason, options: TelegramCore.CallTerminationOptions)
}
public struct CallSession {
  public enum CallType {
    case audio
    case video
    public static func == (a: TelegramCore.CallSession.CallType, b: TelegramCore.CallSession.CallType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let id: TelegramCore.CallSessionInternalId
  public let stableId: Swift.Int64?
  public let isOutgoing: Swift.Bool
  public let type: TelegramCore.CallSession.CallType
  public let state: TelegramCore.CallSessionState
  public let isVideoPossible: Swift.Bool
}
public enum CallSessionConnection : Swift.Equatable {
  public struct Reflector : Swift.Equatable {
    public let id: Swift.Int64
    public let ip: Swift.String
    public let ipv6: Swift.String
    public let isTcp: Swift.Bool
    public let port: Swift.Int32
    public let peerTag: Foundation.Data
    public init(id: Swift.Int64, ip: Swift.String, ipv6: Swift.String, isTcp: Swift.Bool, port: Swift.Int32, peerTag: Foundation.Data)
    public static func == (a: TelegramCore.CallSessionConnection.Reflector, b: TelegramCore.CallSessionConnection.Reflector) -> Swift.Bool
  }
  public struct WebRtcReflector : Swift.Equatable {
    public let id: Swift.Int64
    public let hasStun: Swift.Bool
    public let hasTurn: Swift.Bool
    public let ip: Swift.String
    public let ipv6: Swift.String
    public let port: Swift.Int32
    public let username: Swift.String
    public let password: Swift.String
    public init(id: Swift.Int64, hasStun: Swift.Bool, hasTurn: Swift.Bool, ip: Swift.String, ipv6: Swift.String, port: Swift.Int32, username: Swift.String, password: Swift.String)
    public static func == (a: TelegramCore.CallSessionConnection.WebRtcReflector, b: TelegramCore.CallSessionConnection.WebRtcReflector) -> Swift.Bool
  }
  case reflector(TelegramCore.CallSessionConnection.Reflector)
  case webRtcReflector(TelegramCore.CallSessionConnection.WebRtcReflector)
  public static func == (a: TelegramCore.CallSessionConnection, b: TelegramCore.CallSessionConnection) -> Swift.Bool
}
public struct CallSessionConnectionSet {
  public let primary: TelegramCore.CallSessionConnection
  public let alternatives: [TelegramCore.CallSessionConnection]
  public init(primary: TelegramCore.CallSessionConnection, alternatives: [TelegramCore.CallSessionConnection])
}
public struct CallSessionManagerImplementationVersion : Swift.Hashable {
  public var version: Swift.String
  public var supportsVideo: Swift.Bool
  public init(version: Swift.String, supportsVideo: Swift.Bool)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.CallSessionManagerImplementationVersion, b: TelegramCore.CallSessionManagerImplementationVersion) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum CallRequestError {
  case generic
  public static func == (a: TelegramCore.CallRequestError, b: TelegramCore.CallRequestError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class CallSessionManager {
  public static func getStableIncomingUUID(stableId: Swift.Int64) -> Foundation.UUID
  @objc deinit
  final public func drop(internalId: TelegramCore.CallSessionInternalId, reason: TelegramCore.DropCallReason, debugLog: SwiftSignalKit.Signal<Swift.String?, SwiftSignalKit.NoError>)
  final public func accept(internalId: TelegramCore.CallSessionInternalId)
  final public func request(peerId: PostboxKit.PeerId, isVideo: Swift.Bool, enableVideo: Swift.Bool, internalId: TelegramCore.CallSessionInternalId = CallSessionInternalId()) -> SwiftSignalKit.Signal<TelegramCore.CallSessionInternalId, SwiftSignalKit.NoError>
  final public func sendSignalingData(internalId: TelegramCore.CallSessionInternalId, data: Foundation.Data)
  final public func updateCallType(internalId: TelegramCore.CallSessionInternalId, type: TelegramCore.CallSession.CallType)
  final public func updateVersions(versions: [TelegramCore.CallSessionManagerImplementationVersion])
  final public func ringingStates() -> SwiftSignalKit.Signal<[TelegramCore.CallSessionRingingState], SwiftSignalKit.NoError>
  final public func callState(internalId: TelegramCore.CallSessionInternalId) -> SwiftSignalKit.Signal<TelegramCore.CallSession, SwiftSignalKit.NoError>
  final public func beginReceivingCallSignalingData(internalId: TelegramCore.CallSessionInternalId, _ receiver: @escaping ([Foundation.Data]) -> Swift.Void) -> SwiftSignalKit.Disposable
}
public enum UpdateAboutError {
  case generic
  public static func == (a: TelegramCore.UpdateAboutError, b: TelegramCore.UpdateAboutError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SecretChatSettings : Swift.Equatable, Swift.Codable {
  public var acceptOnThisDevice: Swift.Bool {
    get
  }
  public static var defaultSettings: TelegramCore.SecretChatSettings {
    get
  }
  public init(acceptOnThisDevice: Swift.Bool)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.SecretChatSettings, b: TelegramCore.SecretChatSettings) -> Swift.Bool
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class Messages {
    final public func clearCloudDraftsInteractively() -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func applyMaxReadIndexInteractively(index: PostboxKit.MessageIndex) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func sendScheduledMessageNowInteractively(messageId: PostboxKit.MessageId) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func requestMessageActionCallbackPasswordCheck(messageId: PostboxKit.MessageId, isGame: Swift.Bool, data: PostboxKit.MemoryBuffer?) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.MessageActionCallbackError>
    final public func requestMessageActionCallback(messageId: PostboxKit.MessageId, isGame: Swift.Bool, password: Swift.String?, data: PostboxKit.MemoryBuffer?) -> SwiftSignalKit.Signal<TelegramCore.MessageActionCallbackResult, TelegramCore.MessageActionCallbackError>
    final public func requestMessageActionUrlAuth(subject: TelegramCore.MessageActionUrlSubject) -> SwiftSignalKit.Signal<TelegramCore.MessageActionUrlAuthResult, SwiftSignalKit.NoError>
    final public func acceptMessageActionUrlAuth(subject: TelegramCore.MessageActionUrlSubject, allowWriteAccess: Swift.Bool) -> SwiftSignalKit.Signal<TelegramCore.MessageActionUrlAuthResult, SwiftSignalKit.NoError>
    final public func searchMessages(location: TelegramCore.SearchMessagesLocation, query: Swift.String, state: TelegramCore.SearchMessagesState?, limit: Swift.Int32 = 100) -> SwiftSignalKit.Signal<(TelegramCore.SearchMessagesResult, TelegramCore.SearchMessagesState), SwiftSignalKit.NoError>
    final public func downloadMessage(messageId: PostboxKit.MessageId) -> SwiftSignalKit.Signal<PostboxKit.Message?, SwiftSignalKit.NoError>
    final public func searchMessageIdByTimestamp(peerId: PostboxKit.PeerId, threadId: Swift.Int64?, timestamp: Swift.Int32) -> SwiftSignalKit.Signal<PostboxKit.MessageId?, SwiftSignalKit.NoError>
    final public func deleteMessages(transaction: PostboxKit.Transaction, ids: [PostboxKit.MessageId])
    final public func deleteAllMessagesWithAuthor(peerId: PostboxKit.PeerId, authorId: PostboxKit.PeerId, namespace: PostboxKit.MessageId.Namespace) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func deleteAllMessagesWithForwardAuthor(peerId: TelegramCore.EnginePeer.Id, forwardAuthorId: TelegramCore.EnginePeer.Id, namespace: PostboxKit.MessageId.Namespace) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func clearCallHistory(forEveryone: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.ClearCallHistoryError>
    final public func deleteMessagesInteractively(messageIds: [PostboxKit.MessageId], type: TelegramCore.InteractiveMessagesDeletionType, deleteAllInGroup: Swift.Bool = false) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func clearHistoryInteractively(peerId: PostboxKit.PeerId, threadId: Swift.Int64?, type: TelegramCore.InteractiveHistoryClearingType) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func clearAuthorHistory(peerId: PostboxKit.PeerId, memberId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func requestEditMessage(messageId: PostboxKit.MessageId, text: Swift.String, media: TelegramCore.RequestEditMessageMedia, entities: TelegramCore.TextEntitiesMessageAttribute?, inlineStickers: [PostboxKit.MediaId : PostboxKit.Media], disableUrlPreview: Swift.Bool = false, scheduleTime: Swift.Int32? = nil) -> SwiftSignalKit.Signal<TelegramCore.RequestEditMessageResult, TelegramCore.RequestEditMessageError>
    final public func requestEditLiveLocation(messageId: PostboxKit.MessageId, stop: Swift.Bool, coordinate: (latitude: Swift.Double, longitude: Swift.Double, accuracyRadius: Swift.Int32?)?, heading: Swift.Int32?, proximityNotificationRadius: Swift.Int32?) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func addSecretChatMessageScreenshot(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func forwardGameWithScore(messageId: PostboxKit.MessageId, to peerId: PostboxKit.PeerId, threadId: Swift.Int64?, as senderPeerId: PostboxKit.PeerId?) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func requestUpdatePinnedMessage(peerId: PostboxKit.PeerId, update: TelegramCore.PinnedMessageUpdate) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.UpdatePinnedMessageError>
    final public func requestUnpinAllMessages(peerId: PostboxKit.PeerId, threadId: Swift.Int64?) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.UpdatePinnedMessageError>
    final public func fetchChannelReplyThreadMessage(messageId: PostboxKit.MessageId, atMessageId: PostboxKit.MessageId?) -> SwiftSignalKit.Signal<TelegramCore.ChatReplyThreadMessage, TelegramCore.FetchChannelReplyThreadMessageError>
    final public func requestStartBot(botPeerId: PostboxKit.PeerId, payload: Swift.String?) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func requestStartBotInGroup(botPeerId: PostboxKit.PeerId, groupPeerId: PostboxKit.PeerId, payload: Swift.String?) -> SwiftSignalKit.Signal<TelegramCore.StartBotInGroupResult, TelegramCore.RequestStartBotInGroupError>
    final public func markAllChatsAsRead() -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func getMessagesLoadIfNecessary(_ messageIds: [PostboxKit.MessageId], strategy: TelegramCore.GetMessagesStrategy = .cloud(skipLocal: false)) -> SwiftSignalKit.Signal<[PostboxKit.Message], SwiftSignalKit.NoError>
    final public func markMessageContentAsConsumedInteractively(messageId: PostboxKit.MessageId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func installInteractiveReadMessagesAction(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Disposable
    final public func installInteractiveReadReactionsAction(peerId: PostboxKit.PeerId, getVisibleRange: @escaping () -> TelegramCore.VisibleMessageRange?, didReadReactionsInMessages: @escaping ([PostboxKit.MessageId : [TelegramCore.ReactionsMessageAttribute.RecentPeer]]) -> Swift.Void) -> SwiftSignalKit.Disposable
    final public func requestMessageSelectPollOption(messageId: PostboxKit.MessageId, opaqueIdentifiers: [Foundation.Data]) -> SwiftSignalKit.Signal<TelegramCore.TelegramMediaPoll?, TelegramCore.RequestMessageSelectPollOptionError>
    final public func requestClosePoll(messageId: PostboxKit.MessageId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func pollResults(messageId: PostboxKit.MessageId, poll: TelegramCore.TelegramMediaPoll) -> TelegramCore.PollResultsContext
    final public func earliestUnseenPersonalMentionMessage(peerId: PostboxKit.PeerId, threadId: Swift.Int64?) -> SwiftSignalKit.Signal<TelegramCore.EarliestUnseenPersonalMentionMessageResult, SwiftSignalKit.NoError>
    final public func earliestUnseenPersonalReactionMessage(peerId: PostboxKit.PeerId, threadId: Swift.Int64?) -> SwiftSignalKit.Signal<TelegramCore.EarliestUnseenPersonalMentionMessageResult, SwiftSignalKit.NoError>
    final public func exportMessageLink(peerId: PostboxKit.PeerId, messageId: PostboxKit.MessageId, isThread: Swift.Bool = false) -> SwiftSignalKit.Signal<Swift.String?, SwiftSignalKit.NoError>
    final public func enqueueOutgoingMessageWithChatContextResult(to peerId: PostboxKit.PeerId, threadId: Swift.Int64?, botId: PostboxKit.PeerId, result: TelegramCore.ChatContextResult, replyToMessageId: PostboxKit.MessageId? = nil, hideVia: Swift.Bool = false, silentPosting: Swift.Bool = false, scheduleTime: Swift.Int32? = nil, correlationId: Swift.Int64? = nil) -> Swift.Bool
    final public func outgoingMessageWithChatContextResult(to peerId: PostboxKit.PeerId, threadId: Swift.Int64?, botId: PostboxKit.PeerId, result: TelegramCore.ChatContextResult, replyToMessageId: PostboxKit.MessageId?, hideVia: Swift.Bool, silentPosting: Swift.Bool, scheduleTime: Swift.Int32?, correlationId: Swift.Int64?) -> TelegramCore.EnqueueMessage?
    final public func requestChatContextResults(botId: PostboxKit.PeerId, peerId: PostboxKit.PeerId, query: Swift.String, location: SwiftSignalKit.Signal<(Swift.Double, Swift.Double)?, SwiftSignalKit.NoError> = .single(nil), offset: Swift.String, incompleteResults: Swift.Bool = false, staleCachedResults: Swift.Bool = false) -> SwiftSignalKit.Signal<TelegramCore.RequestChatContextResultsResult?, TelegramCore.RequestChatContextResultsError>
    final public func removeRecentlyUsedHashtag(string: Swift.String) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func recentlyUsedHashtags() -> SwiftSignalKit.Signal<[Swift.String], SwiftSignalKit.NoError>
    final public func topPeerActiveLiveLocationMessages(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<(PostboxKit.Peer?, [PostboxKit.Message]), SwiftSignalKit.NoError>
    final public func chatList(group: TelegramCore.EngineChatList.Group, count: Swift.Int) -> SwiftSignalKit.Signal<TelegramCore.EngineChatList, SwiftSignalKit.NoError>
    final public func callList(scope: TelegramCore.EngineCallList.Scope, index: TelegramCore.EngineMessage.Index, itemCount: Swift.Int) -> SwiftSignalKit.Signal<TelegramCore.EngineCallList, SwiftSignalKit.NoError>
    final public func adMessages(peerId: PostboxKit.PeerId) -> TelegramCore.AdMessagesHistoryContext
    final public func messageReadStats(id: PostboxKit.MessageId) -> SwiftSignalKit.Signal<TelegramCore.MessageReadStats?, SwiftSignalKit.NoError>
    final public func requestCancelLiveLocation(ids: [PostboxKit.MessageId]) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func activeLiveLocationMessages() -> SwiftSignalKit.Signal<[TelegramCore.EngineMessage], SwiftSignalKit.NoError>
    final public func sparseMessageList(peerId: TelegramCore.EnginePeer.Id, threadId: Swift.Int64?, tag: TelegramCore.EngineMessage.Tags) -> TelegramCore.SparseMessageList
    final public func sparseMessageCalendar(peerId: TelegramCore.EnginePeer.Id, threadId: Swift.Int64?, tag: TelegramCore.EngineMessage.Tags) -> TelegramCore.SparseMessageCalendar
    final public func refreshMessageTagStats(peerId: TelegramCore.EnginePeer.Id, threadId: Swift.Int64?, tags: [TelegramCore.EngineMessage.Tags]) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func messageReactionList(message: TelegramCore.EngineMessage, reaction: TelegramCore.MessageReaction.Reaction?) -> TelegramCore.EngineMessageReactionListContext
    final public func translate(text: Swift.String, toLang: Swift.String) -> SwiftSignalKit.Signal<Swift.String?, TelegramCore.TranslationError>
    final public func translateMessages(messageIds: [TelegramCore.EngineMessage.Id], toLang: Swift.String) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.TranslationError>
    final public func togglePeerMessagesTranslationHidden(peerId: TelegramCore.EnginePeer.Id, hidden: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func transcribeAudio(messageId: PostboxKit.MessageId) -> SwiftSignalKit.Signal<TelegramCore.EngineAudioTranscriptionResult, SwiftSignalKit.NoError>
    final public func storeLocallyTranscribedAudio(messageId: PostboxKit.MessageId, text: Swift.String, isFinal: Swift.Bool, error: TelegramCore.AudioTranscriptionMessageAttribute.TranscriptionError?) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func rateAudioTranscription(messageId: PostboxKit.MessageId, id: Swift.Int64, isGood: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func requestWebView(peerId: PostboxKit.PeerId, botId: PostboxKit.PeerId, url: Swift.String?, payload: Swift.String?, themeParams: [Swift.String : Any]?, fromMenu: Swift.Bool, replyToMessageId: PostboxKit.MessageId?, threadId: Swift.Int64?) -> SwiftSignalKit.Signal<TelegramCore.RequestWebViewResult, TelegramCore.RequestWebViewError>
    final public func requestSimpleWebView(botId: PostboxKit.PeerId, url: Swift.String, themeParams: [Swift.String : Any]?) -> SwiftSignalKit.Signal<Swift.String, TelegramCore.RequestSimpleWebViewError>
    final public func sendWebViewData(botId: PostboxKit.PeerId, buttonText: Swift.String, data: Swift.String) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.SendWebViewDataError>
    final public func addBotToAttachMenu(botId: PostboxKit.PeerId, allowWrite: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Bool, TelegramCore.AddBotToAttachMenuError>
    final public func removeBotFromAttachMenu(botId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Bool, SwiftSignalKit.NoError>
    final public func getAttachMenuBot(botId: PostboxKit.PeerId, cached: Swift.Bool = false) -> SwiftSignalKit.Signal<TelegramCore.AttachMenuBot, TelegramCore.GetAttachMenuBotError>
    final public func attachMenuBots() -> SwiftSignalKit.Signal<[TelegramCore.AttachMenuBot], SwiftSignalKit.NoError>
    final public func ensureMessagesAreLocallyAvailable(messages: [TelegramCore.EngineMessage])
    final public func findRandomMessage(peerId: TelegramCore.EnginePeer.Id, namespace: TelegramCore.EngineMessage.Id.Namespace, tag: TelegramCore.EngineMessage.Tags, ignoreIds: ([TelegramCore.EngineMessage.Id], Swift.Set<TelegramCore.EngineMessage.Id>)) -> SwiftSignalKit.Signal<TelegramCore.EngineMessage.Index?, SwiftSignalKit.NoError>
    final public func failedMessageGroup(id: TelegramCore.EngineMessage.Id) -> SwiftSignalKit.Signal<[TelegramCore.EngineMessage], SwiftSignalKit.NoError>
    final public func unreadChatListPeerIds(groupId: TelegramCore.EngineChatList.Group, filterPredicate: PostboxKit.ChatListFilterPredicate?) -> SwiftSignalKit.Signal<[TelegramCore.EnginePeer.Id], SwiftSignalKit.NoError>
    final public func markAllChatsAsReadInteractively(items: [(groupId: TelegramCore.EngineChatList.Group, filterPredicate: PostboxKit.ChatListFilterPredicate?)]) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func getRelativeUnreadChatListIndex(filtered: Swift.Bool, position: TelegramCore.EngineChatList.RelativePosition, groupId: TelegramCore.EngineChatList.Group) -> SwiftSignalKit.Signal<TelegramCore.EngineChatList.Item.Index?, SwiftSignalKit.NoError>
    final public func togglePeersUnreadMarkInteractively(peerIds: [TelegramCore.EnginePeer.Id], setToValue: Swift.Bool?) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func markForumThreadAsRead(peerId: TelegramCore.EnginePeer.Id, threadId: Swift.Int64) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func markForumThreadsAsRead(peerId: TelegramCore.EnginePeer.Id, threadIds: [Swift.Int64]) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func debugAddHoles() -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func debugReindexUnreadCounters() -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func keepMessageCountersSyncrhonized(peerId: TelegramCore.EnginePeer.Id, threadId: Swift.Int64) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func getSynchronizeAutosaveItemOperations() -> SwiftSignalKit.Signal<[(index: Swift.Int32, message: PostboxKit.Message, mediaId: PostboxKit.MediaId)], SwiftSignalKit.NoError>
    @objc deinit
  }
}
public func decryptedResourceData(data: PostboxKit.MediaResourceData, resource: PostboxKit.MediaResource, params: Any) -> Foundation.Data?
@_hasMissingDesignatedInitializers final public class SuggestedLocalizationInfo {
  final public let languageCode: Swift.String
  final public let extractedEntries: [TelegramCore.LocalizationEntry]
  final public let availableLocalizations: [TelegramCore.LocalizationInfo]
  @objc deinit
}
final public class StickerPackItem : PostboxKit.ItemCollectionItem, Swift.Equatable {
  final public let index: PostboxKit.ItemCollectionItemIndex
  final public let file: TelegramCore.TelegramMediaFile
  final public let indexKeys: [PostboxKit.MemoryBuffer]
  public init(index: PostboxKit.ItemCollectionItemIndex, file: TelegramCore.TelegramMediaFile, indexKeys: [PostboxKit.MemoryBuffer])
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.StickerPackItem, rhs: TelegramCore.StickerPackItem) -> Swift.Bool
  final public func getStringRepresentationsOfIndexKeys() -> [Swift.String]
  @objc deinit
}
public enum SynchronizeSavedGifsOperationContent : PostboxKit.PostboxCoding {
  case add(id: Swift.Int64, accessHash: Swift.Int64, fileReference: TelegramCore.FileMediaReference?)
  case remove(id: Swift.Int64, accessHash: Swift.Int64)
  case sync
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
}
final public class SynchronizeSavedGifsOperation : PostboxKit.PostboxCoding {
  final public let content: TelegramCore.SynchronizeSavedGifsOperationContent
  public init(content: TelegramCore.SynchronizeSavedGifsOperationContent)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public enum TelegramChannelPermission {
  case sendText
  case sendPhoto
  case sendVideo
  case sendSomething
  case pinMessages
  case manageTopics
  case createTopics
  case inviteMembers
  case editAllMessages
  case deleteAllMessages
  case banMembers
  case addAdmins
  case changeInfo
  case canBeAnonymous
  case manageCalls
  public static func == (a: TelegramCore.TelegramChannelPermission, b: TelegramCore.TelegramChannelPermission) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TelegramCore.TelegramChannel {
  final public func hasPermission(_ permission: TelegramCore.TelegramChannelPermission) -> Swift.Bool
  final public func hasBannedPermission(_ rights: TelegramCore.TelegramChatBannedRightsFlags) -> (Swift.Int32, Swift.Bool)?
  final public var isRestrictedBySlowmode: Swift.Bool {
    get
  }
}
public enum ChatContextResultMessageDecodingError : Swift.Error {
  case generic
  public static func == (a: TelegramCore.ChatContextResultMessageDecodingError, b: TelegramCore.ChatContextResultMessageDecodingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ChatContextResultMessage : PostboxKit.PostboxCoding, Swift.Equatable, Swift.Codable {
  case auto(caption: Swift.String, entities: TelegramCore.TextEntitiesMessageAttribute?, replyMarkup: TelegramCore.ReplyMarkupMessageAttribute?)
  case text(text: Swift.String, entities: TelegramCore.TextEntitiesMessageAttribute?, disableUrlPreview: Swift.Bool, replyMarkup: TelegramCore.ReplyMarkupMessageAttribute?)
  case mapLocation(media: TelegramCore.TelegramMediaMap, replyMarkup: TelegramCore.ReplyMarkupMessageAttribute?)
  case contact(media: TelegramCore.TelegramMediaContact, replyMarkup: TelegramCore.ReplyMarkupMessageAttribute?)
  case invoice(media: TelegramCore.TelegramMediaInvoice, replyMarkup: TelegramCore.ReplyMarkupMessageAttribute?)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.ChatContextResultMessage, rhs: TelegramCore.ChatContextResultMessage) -> Swift.Bool
}
public enum ChatContextResultDecodingError : Swift.Error {
  case generic
  public static func == (a: TelegramCore.ChatContextResultDecodingError, b: TelegramCore.ChatContextResultDecodingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ChatContextResult : Swift.Equatable, Swift.Codable {
  public struct ExternalReference : Swift.Equatable, Swift.Codable {
    public let queryId: Swift.Int64
    public let id: Swift.String
    public let type: Swift.String
    public let title: Swift.String?
    public let description: Swift.String?
    public let url: Swift.String?
    public let content: TelegramCore.TelegramMediaWebFile?
    public let thumbnail: TelegramCore.TelegramMediaWebFile?
    public let message: TelegramCore.ChatContextResultMessage
    public init(queryId: Swift.Int64, id: Swift.String, type: Swift.String, title: Swift.String?, description: Swift.String?, url: Swift.String?, content: TelegramCore.TelegramMediaWebFile?, thumbnail: TelegramCore.TelegramMediaWebFile?, message: TelegramCore.ChatContextResultMessage)
    public static func == (a: TelegramCore.ChatContextResult.ExternalReference, b: TelegramCore.ChatContextResult.ExternalReference) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct InternalReference : Swift.Equatable, Swift.Codable {
    public let queryId: Swift.Int64
    public let id: Swift.String
    public let type: Swift.String
    public let title: Swift.String?
    public let description: Swift.String?
    public let image: TelegramCore.TelegramMediaImage?
    public let file: TelegramCore.TelegramMediaFile?
    public let message: TelegramCore.ChatContextResultMessage
    public init(queryId: Swift.Int64, id: Swift.String, type: Swift.String, title: Swift.String?, description: Swift.String?, image: TelegramCore.TelegramMediaImage?, file: TelegramCore.TelegramMediaFile?, message: TelegramCore.ChatContextResultMessage)
    public static func == (a: TelegramCore.ChatContextResult.InternalReference, b: TelegramCore.ChatContextResult.InternalReference) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  case externalReference(TelegramCore.ChatContextResult.ExternalReference)
  case internalReference(TelegramCore.ChatContextResult.InternalReference)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var queryId: Swift.Int64 {
    get
  }
  public var id: Swift.String {
    get
  }
  public var type: Swift.String {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var description: Swift.String? {
    get
  }
  public var message: TelegramCore.ChatContextResultMessage {
    get
  }
  public static func == (a: TelegramCore.ChatContextResult, b: TelegramCore.ChatContextResult) -> Swift.Bool
}
public enum ChatContextResultCollectionPresentation : Swift.Int32, Swift.Codable {
  case media
  case list
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public struct ChatContextResultSwitchPeer : Swift.Equatable, Swift.Codable {
  public let text: Swift.String
  public let startParam: Swift.String
  public static func == (lhs: TelegramCore.ChatContextResultSwitchPeer, rhs: TelegramCore.ChatContextResultSwitchPeer) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
final public class ChatContextResultCollection : Swift.Equatable, Swift.Codable {
  public struct GeoPoint : Swift.Equatable, Swift.Codable {
    public let latitude: Swift.Double
    public let longitude: Swift.Double
    public init(latitude: Swift.Double, longitude: Swift.Double)
    public static func == (a: TelegramCore.ChatContextResultCollection.GeoPoint, b: TelegramCore.ChatContextResultCollection.GeoPoint) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  final public let botId: PostboxKit.PeerId
  final public let peerId: PostboxKit.PeerId
  final public let query: Swift.String
  final public let geoPoint: TelegramCore.ChatContextResultCollection.GeoPoint?
  final public let queryId: Swift.Int64
  final public let nextOffset: Swift.String?
  final public let presentation: TelegramCore.ChatContextResultCollectionPresentation
  final public let switchPeer: TelegramCore.ChatContextResultSwitchPeer?
  final public let results: [TelegramCore.ChatContextResult]
  final public let cacheTimeout: Swift.Int32
  public init(botId: PostboxKit.PeerId, peerId: PostboxKit.PeerId, query: Swift.String, geoPoint: TelegramCore.ChatContextResultCollection.GeoPoint?, queryId: Swift.Int64, nextOffset: Swift.String?, presentation: TelegramCore.ChatContextResultCollectionPresentation, switchPeer: TelegramCore.ChatContextResultSwitchPeer?, results: [TelegramCore.ChatContextResult], cacheTimeout: Swift.Int32)
  public static func == (lhs: TelegramCore.ChatContextResultCollection, rhs: TelegramCore.ChatContextResultCollection) -> Swift.Bool
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public func requestContextResults(engine: TelegramCore.TelegramEngine, botId: TelegramCore.EnginePeer.Id, query: Swift.String, peerId: TelegramCore.EnginePeer.Id, offset: Swift.String = "", existingResults: TelegramCore.ChatContextResultCollection? = nil, incompleteResults: Swift.Bool = false, staleCachedResults: Swift.Bool = false, limit: Swift.Int = 60) -> SwiftSignalKit.Signal<TelegramCore.RequestChatContextResultsResult?, SwiftSignalKit.NoError>
public enum SecretChatIncomingEncryptedOperationType : Swift.Int32 {
  case message
  case service
  public init(_ value: Swift.Int32)
  public var value: Swift.Int32 {
    get
  }
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
final public class SecretChatIncomingEncryptedOperation : PostboxKit.PostboxCoding {
  final public let peerId: PostboxKit.PeerId
  final public let globallyUniqueId: Swift.Int64
  final public let timestamp: Swift.Int32
  final public let type: TelegramCore.SecretChatIncomingEncryptedOperationType
  final public let keyFingerprint: Swift.Int64
  final public let contents: PostboxKit.MemoryBuffer
  final public let mediaFileReference: TelegramCore.SecretChatFileReference?
  public init(peerId: PostboxKit.PeerId, globallyUniqueId: Swift.Int64, timestamp: Swift.Int32, type: TelegramCore.SecretChatIncomingEncryptedOperationType, keyFingerprint: Swift.Int64, contents: PostboxKit.MemoryBuffer, mediaFileReference: TelegramCore.SecretChatFileReference?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public struct BankCardUrl {
  public let title: Swift.String
  public let url: Swift.String
}
public struct BankCardInfo {
  public let title: Swift.String
  public let urls: [TelegramCore.BankCardUrl]
}
public struct SecretChatOperationSequenceInfo : PostboxKit.PostboxCoding {
  public let topReceivedOperationIndex: Swift.Int32
  public let operationIndex: Swift.Int32
  public init(topReceivedOperationIndex: Swift.Int32, operationIndex: Swift.Int32)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
}
final public class SecretChatIncomingDecryptedOperation : PostboxKit.PostboxCoding {
  final public let timestamp: Swift.Int32
  final public let layer: Swift.Int32
  final public let sequenceInfo: TelegramCore.SecretChatOperationSequenceInfo?
  final public let contents: PostboxKit.MemoryBuffer
  final public let file: TelegramCore.SecretChatFileReference?
  public init(timestamp: Swift.Int32, layer: Swift.Int32, sequenceInfo: TelegramCore.SecretChatOperationSequenceInfo?, contents: PostboxKit.MemoryBuffer, file: TelegramCore.SecretChatFileReference?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
extension PostboxKit.MemoryBuffer {
  public func md5Digest() -> Foundation.Data
}
public func telegramThemes(postbox: PostboxKit.Postbox, network: TelegramCore.Network, accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>?, forceUpdate: Swift.Bool = false) -> SwiftSignalKit.Signal<[TelegramCore.TelegramTheme], SwiftSignalKit.NoError>
public enum GetThemeError {
  case generic
  case unsupported
  case slugInvalid
  public static func == (a: TelegramCore.GetThemeError, b: TelegramCore.GetThemeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func getTheme(account: TelegramCore.Account, slug: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.TelegramTheme, TelegramCore.GetThemeError>
public enum ThemeUpdatedResult {
  case updated(TelegramCore.TelegramTheme)
  case notModified
}
public enum UploadThemeResult {
  case progress(Swift.Float)
  case complete(TelegramCore.TelegramMediaFile)
}
public enum UploadThemeError {
  case generic
  public static func == (a: TelegramCore.UploadThemeError, b: TelegramCore.UploadThemeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CreateThemeError {
  case generic
  case slugInvalid
  case slugOccupied
  public static func == (a: TelegramCore.CreateThemeError, b: TelegramCore.CreateThemeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CreateThemeResult {
  case result(TelegramCore.TelegramTheme)
  case progress(Swift.Float)
}
public func createTheme(account: TelegramCore.Account, title: Swift.String, resource: PostboxKit.MediaResource? = nil, thumbnailData: Foundation.Data? = nil, settings: [TelegramCore.TelegramThemeSettings]?) -> SwiftSignalKit.Signal<TelegramCore.CreateThemeResult, TelegramCore.CreateThemeError>
public func updateTheme(account: TelegramCore.Account, accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, theme: TelegramCore.TelegramTheme, title: Swift.String?, slug: Swift.String?, resource: PostboxKit.MediaResource?, thumbnailData: Foundation.Data? = nil, settings: [TelegramCore.TelegramThemeSettings]?) -> SwiftSignalKit.Signal<TelegramCore.CreateThemeResult, TelegramCore.CreateThemeError>
public func saveThemeInteractively(account: TelegramCore.Account, accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, theme: TelegramCore.TelegramTheme) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public func deleteThemeInteractively(account: TelegramCore.Account, accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, theme: TelegramCore.TelegramTheme) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public func applyTheme(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, account: TelegramCore.Account, theme: TelegramCore.TelegramTheme?, autoNight: Swift.Bool = false) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
public func actualizedTheme(account: TelegramCore.Account, accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, theme: TelegramCore.TelegramTheme) -> SwiftSignalKit.Signal<TelegramCore.TelegramTheme, SwiftSignalKit.NoError>
final public class ThemeSettings : Swift.Codable, Swift.Equatable {
  final public let currentTheme: TelegramCore.TelegramTheme?
  public init(currentTheme: TelegramCore.TelegramTheme?)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.ThemeSettings, rhs: TelegramCore.ThemeSettings) -> Swift.Bool
  @objc deinit
}
indirect public enum RichText : PostboxKit.PostboxCoding, Swift.Equatable {
  case empty
  case plain(Swift.String)
  case bold(TelegramCore.RichText)
  case italic(TelegramCore.RichText)
  case underline(TelegramCore.RichText)
  case strikethrough(TelegramCore.RichText)
  case fixed(TelegramCore.RichText)
  case url(text: TelegramCore.RichText, url: Swift.String, webpageId: PostboxKit.MediaId?)
  case email(text: TelegramCore.RichText, email: Swift.String)
  case concat([TelegramCore.RichText])
  case `subscript`(TelegramCore.RichText)
  case superscript(TelegramCore.RichText)
  case marked(TelegramCore.RichText)
  case phone(text: TelegramCore.RichText, phone: Swift.String)
  case image(id: PostboxKit.MediaId, dimensions: TelegramCore.PixelDimensions)
  case anchor(text: TelegramCore.RichText, name: Swift.String)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.RichText, rhs: TelegramCore.RichText) -> Swift.Bool
}
extension TelegramCore.RichText {
  public var plainText: Swift.String {
    get
  }
}
public func fetchHttpResource(url: Swift.String) -> SwiftSignalKit.Signal<PostboxKit.MediaResourceDataFetchResult, PostboxKit.MediaResourceDataFetchError>
public func statsCategoryForFileWithAttributes(_ attributes: [TelegramCore.TelegramMediaFileAttribute]) -> TelegramCore.MediaResourceStatsCategory
public struct OutgoingMessageInfoFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init()
  public init(rawValue: Swift.Int32)
  public static var transformedMedia: TelegramCore.OutgoingMessageInfoFlags
  public typealias ArrayLiteralElement = TelegramCore.OutgoingMessageInfoFlags
  public typealias Element = TelegramCore.OutgoingMessageInfoFlags
  public typealias RawValue = Swift.Int32
}
public class OutgoingMessageInfoAttribute : PostboxKit.MessageAttribute {
  final public let uniqueId: Swift.Int64
  final public let flags: TelegramCore.OutgoingMessageInfoFlags
  final public let acknowledged: Swift.Bool
  final public let correlationId: Swift.Int64?
  final public let bubbleUpEmojiOrStickersets: [PostboxKit.ItemCollectionId]
  public init(uniqueId: Swift.Int64, flags: TelegramCore.OutgoingMessageInfoFlags, acknowledged: Swift.Bool, correlationId: Swift.Int64?, bubbleUpEmojiOrStickersets: [PostboxKit.ItemCollectionId])
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func withUpdatedFlags(_ flags: TelegramCore.OutgoingMessageInfoFlags) -> TelegramCore.OutgoingMessageInfoAttribute
  public func withUpdatedAcknowledged(_ acknowledged: Swift.Bool) -> TelegramCore.OutgoingMessageInfoAttribute
  @objc deinit
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class HistoryImport {
    public struct Session {
    }
    public enum InitImportError {
      case generic
      case chatAdminRequired
      case invalidChatType
      case userBlocked
      case limitExceeded
      public static func == (a: TelegramCore.TelegramEngine.HistoryImport.InitImportError, b: TelegramCore.TelegramEngine.HistoryImport.InitImportError) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum ParsedInfo {
      case privateChat(title: Swift.String?)
      case group(title: Swift.String?)
      case unknown(title: Swift.String?)
    }
    public enum GetInfoError {
      case generic
      case parseError
      public static func == (a: TelegramCore.TelegramEngine.HistoryImport.GetInfoError, b: TelegramCore.TelegramEngine.HistoryImport.GetInfoError) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    final public func getInfo(header: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.TelegramEngine.HistoryImport.ParsedInfo, TelegramCore.TelegramEngine.HistoryImport.GetInfoError>
    final public func initSession(peerId: PostboxKit.PeerId, file: PostboxKit.TempBoxFile, mediaCount: Swift.Int32) -> SwiftSignalKit.Signal<TelegramCore.TelegramEngine.HistoryImport.Session, TelegramCore.TelegramEngine.HistoryImport.InitImportError>
    public enum MediaType {
      case photo
      case file
      case video
      case sticker
      case voice
      public static func == (a: TelegramCore.TelegramEngine.HistoryImport.MediaType, b: TelegramCore.TelegramEngine.HistoryImport.MediaType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum UploadMediaError {
      case generic
      case chatAdminRequired
      public static func == (a: TelegramCore.TelegramEngine.HistoryImport.UploadMediaError, b: TelegramCore.TelegramEngine.HistoryImport.UploadMediaError) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    final public func uploadMedia(session: TelegramCore.TelegramEngine.HistoryImport.Session, file: PostboxKit.TempBoxFile, disposeFileAfterDone: Swift.Bool, fileName: Swift.String, mimeType: Swift.String, type: TelegramCore.TelegramEngine.HistoryImport.MediaType) -> SwiftSignalKit.Signal<Swift.Float, TelegramCore.TelegramEngine.HistoryImport.UploadMediaError>
    public enum StartImportError {
      case generic
      public static func == (a: TelegramCore.TelegramEngine.HistoryImport.StartImportError, b: TelegramCore.TelegramEngine.HistoryImport.StartImportError) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    final public func startImport(session: TelegramCore.TelegramEngine.HistoryImport.Session) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.TelegramEngine.HistoryImport.StartImportError>
    public enum CheckPeerImportResult {
      case allowed
      case alert(Swift.String)
    }
    public enum CheckPeerImportError {
      case generic
      case chatAdminRequired
      case invalidChatType
      case userBlocked
      case limitExceeded
      case notMutualContact
      public static func == (a: TelegramCore.TelegramEngine.HistoryImport.CheckPeerImportError, b: TelegramCore.TelegramEngine.HistoryImport.CheckPeerImportError) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    final public func checkPeerImport(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<TelegramCore.TelegramEngine.HistoryImport.CheckPeerImportResult, TelegramCore.TelegramEngine.HistoryImport.CheckPeerImportError>
    @objc deinit
  }
}
public protocol SplitTestEvent : Swift.RawRepresentable where Self.RawValue == Swift.String {
}
public protocol SplitTestConfiguration {
  static var defaultValue: Self { get }
}
public protocol SplitTest {
  associatedtype Configuration : TelegramCore.SplitTestConfiguration
  associatedtype Event : TelegramCore.SplitTestEvent
  var postbox: PostboxKit.Postbox { get }
  var bucket: Swift.String? { get }
  var configuration: Self.Configuration { get }
  init(postbox: PostboxKit.Postbox, bucket: Swift.String?, configuration: Self.Configuration)
}
extension TelegramCore.SplitTest {
  public func addEvent(_ event: Self.Event, data: TelegramCore.JSON = [])
}
public enum InteractiveMessagesDeletionType : Swift.Int32 {
  case forLocalPeer
  case forEveryone
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum CloudChatRemoveMessagesType : Swift.Int32 {
  case forLocalPeer
  case forEveryone
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
extension TelegramCore.CloudChatRemoveMessagesType {
  public init(_ type: TelegramCore.InteractiveMessagesDeletionType)
}
final public class CloudChatRemoveMessagesOperation : PostboxKit.PostboxCoding {
  final public let messageIds: [PostboxKit.MessageId]
  final public let type: TelegramCore.CloudChatRemoveMessagesType
  public init(messageIds: [PostboxKit.MessageId], type: TelegramCore.CloudChatRemoveMessagesType)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
final public class CloudChatRemoveChatOperation : PostboxKit.PostboxCoding {
  final public let peerId: PostboxKit.PeerId
  final public let reportChatSpam: Swift.Bool
  final public let deleteGloballyIfPossible: Swift.Bool
  final public let topMessageId: PostboxKit.MessageId?
  public init(peerId: PostboxKit.PeerId, reportChatSpam: Swift.Bool, deleteGloballyIfPossible: Swift.Bool, topMessageId: PostboxKit.MessageId?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public enum CloudChatClearHistoryType : Swift.Int32 {
  case forLocalPeer
  case forEveryone
  case scheduledMessages
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum InteractiveHistoryClearingType : Swift.Int32 {
  case forLocalPeer
  case forEveryone
  case scheduledMessages
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
extension TelegramCore.CloudChatClearHistoryType {
  public init(_ type: TelegramCore.InteractiveHistoryClearingType)
}
final public class CloudChatClearHistoryOperation : PostboxKit.PostboxCoding {
  final public let peerId: PostboxKit.PeerId
  final public let topMessageId: PostboxKit.MessageId
  final public let threadId: Swift.Int64?
  final public let minTimestamp: Swift.Int32?
  final public let maxTimestamp: Swift.Int32?
  final public let type: TelegramCore.CloudChatClearHistoryType
  public init(peerId: PostboxKit.PeerId, topMessageId: PostboxKit.MessageId, threadId: Swift.Int64?, minTimestamp: Swift.Int32?, maxTimestamp: Swift.Int32?, type: TelegramCore.CloudChatClearHistoryType)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public enum ChannelMembersCategoryFilter {
  case all
  case search(Swift.String)
}
public enum ChannelMembersCategory {
  case recent(TelegramCore.ChannelMembersCategoryFilter)
  case admins
  case contacts(TelegramCore.ChannelMembersCategoryFilter)
  case bots(TelegramCore.ChannelMembersCategoryFilter)
  case restricted(TelegramCore.ChannelMembersCategoryFilter)
  case banned(TelegramCore.ChannelMembersCategoryFilter)
  case mentions(threadId: PostboxKit.MessageId?, filter: TelegramCore.ChannelMembersCategoryFilter)
}
public class AdMessagesHistoryContext {
  public var state: SwiftSignalKit.Signal<(interPostInterval: Swift.Int32?, messages: [PostboxKit.Message]), SwiftSignalKit.NoError> {
    get
  }
  public init(account: TelegramCore.Account, peerId: PostboxKit.PeerId)
  public func markAsSeen(opaqueId: Foundation.Data)
  @objc deinit
}
public enum TelegramMediaExpiredContentData : Swift.Int32 {
  case image
  case file
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
final public class TelegramMediaExpiredContent : PostboxKit.Media {
  final public let data: TelegramCore.TelegramMediaExpiredContentData
  final public let id: PostboxKit.MediaId?
  final public let peerIds: [PostboxKit.PeerId]
  public init(data: TelegramCore.TelegramMediaExpiredContentData)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to other: PostboxKit.Media) -> Swift.Bool
  final public func isSemanticallyEqual(to other: PostboxKit.Media) -> Swift.Bool
  @objc deinit
}
final public class UpdateMessageReactionsAction : PostboxKit.PendingMessageActionData {
  public init()
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to: PostboxKit.PendingMessageActionData) -> Swift.Bool
  @objc deinit
}
public struct ChannelAdminEventLogEntry : Swift.Comparable {
  public let stableId: Swift.UInt32
  public let headerStableId: Swift.UInt32
  public let event: TelegramCore.AdminLogEvent
  public let peers: [PostboxKit.PeerId : PostboxKit.Peer]
  public static func == (lhs: TelegramCore.ChannelAdminEventLogEntry, rhs: TelegramCore.ChannelAdminEventLogEntry) -> Swift.Bool
  public static func < (lhs: TelegramCore.ChannelAdminEventLogEntry, rhs: TelegramCore.ChannelAdminEventLogEntry) -> Swift.Bool
}
public enum ChannelAdminEventLogUpdateType {
  case initial
  case generic
  case load
  public static func == (a: TelegramCore.ChannelAdminEventLogUpdateType, b: TelegramCore.ChannelAdminEventLogUpdateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ChannelAdminEventLogFilter : Swift.Equatable {
  public let query: Swift.String?
  public let events: TelegramCore.AdminLogEventsFlags
  public let adminPeerIds: [PostboxKit.PeerId]?
  public init(query: Swift.String? = nil, events: TelegramCore.AdminLogEventsFlags = .all, adminPeerIds: [PostboxKit.PeerId]? = nil)
  public static func == (lhs: TelegramCore.ChannelAdminEventLogFilter, rhs: TelegramCore.ChannelAdminEventLogFilter) -> Swift.Bool
  public var isEmpty: Swift.Bool {
    get
  }
  public func withQuery(_ query: Swift.String?) -> TelegramCore.ChannelAdminEventLogFilter
  public func withEvents(_ events: TelegramCore.AdminLogEventsFlags) -> TelegramCore.ChannelAdminEventLogFilter
  public func withAdminPeerIds(_ adminPeerIds: [PostboxKit.PeerId]?) -> TelegramCore.ChannelAdminEventLogFilter
}
@_hasMissingDesignatedInitializers final public class ChannelAdminEventLogContext {
  @objc deinit
  final public func get() -> SwiftSignalKit.Signal<([TelegramCore.ChannelAdminEventLogEntry], Swift.Bool, TelegramCore.ChannelAdminEventLogUpdateType, Swift.Bool), SwiftSignalKit.NoError>
  final public func setFilter(_ filter: TelegramCore.ChannelAdminEventLogFilter)
  final public func reload()
  final public func loadMoreEntries()
}
extension TelegramCore.TelegramGroup {
  public enum Permission {
    case sendSomething
    public static func == (a: TelegramCore.TelegramGroup.Permission, b: TelegramCore.TelegramGroup.Permission) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public func hasPermission(_ permission: TelegramCore.TelegramGroup.Permission) -> Swift.Bool
  final public func hasBannedPermission(_ rights: TelegramCore.TelegramChatBannedRightsFlags) -> Swift.Bool
}
public func emojiKeywordColletionIdForCode(_ code: Swift.String) -> PostboxKit.ItemCollectionId
final public class EmojiKeywordCollectionInfo : PostboxKit.ItemCollectionInfo, Swift.Equatable {
  final public let id: PostboxKit.ItemCollectionId
  final public let languageCode: Swift.String
  final public let inputLanguageCode: Swift.String
  final public let version: Swift.Int32
  final public let timestamp: Swift.Int32
  public init(languageCode: Swift.String, inputLanguageCode: Swift.String, version: Swift.Int32, timestamp: Swift.Int32)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.EmojiKeywordCollectionInfo, rhs: TelegramCore.EmojiKeywordCollectionInfo) -> Swift.Bool
  @objc deinit
}
final public class CachedResolvedByPhonePeer : Swift.Codable {
  final public let peerId: PostboxKit.PeerId?
  final public let timestamp: Swift.Int32
  public static func key(name: Swift.String) -> PostboxKit.ValueBoxKey
  public init(peerId: PostboxKit.PeerId?, timestamp: Swift.Int32)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public typealias EngineExportedPeerInvitation = TelegramCore.ExportedInvitation
public typealias EngineSecretChatKeyFingerprint = TelegramCore.SecretChatKeyFingerprint
public enum EnginePeerCachedInfoItem<T> {
  case known(T)
  case unknown
  public var knownValue: T? {
    get
  }
}
extension TelegramCore.EnginePeerCachedInfoItem : Swift.Equatable where T : Swift.Equatable {
  public static func == (lhs: TelegramCore.EnginePeerCachedInfoItem<T>, rhs: TelegramCore.EnginePeerCachedInfoItem<T>) -> Swift.Bool
}
public enum EngineChannelParticipant : Swift.Equatable {
  case creator(id: TelegramCore.EnginePeer.Id, adminInfo: TelegramCore.ChannelParticipantAdminInfo?, rank: Swift.String?)
  case member(id: TelegramCore.EnginePeer.Id, invitedAt: Swift.Int32, adminInfo: TelegramCore.ChannelParticipantAdminInfo?, banInfo: TelegramCore.ChannelParticipantBannedInfo?, rank: Swift.String?)
  public var peerId: TelegramCore.EnginePeer.Id {
    get
  }
  public static func == (a: TelegramCore.EngineChannelParticipant, b: TelegramCore.EngineChannelParticipant) -> Swift.Bool
}
extension TelegramCore.EngineChannelParticipant {
  public init(_ participant: TelegramCore.ChannelParticipant)
  public func _asParticipant() -> TelegramCore.ChannelParticipant
}
public enum EngineLegacyGroupParticipant : Swift.Equatable {
  case member(id: TelegramCore.EnginePeer.Id, invitedBy: TelegramCore.EnginePeer.Id, invitedAt: Swift.Int32)
  case creator(id: TelegramCore.EnginePeer.Id)
  case admin(id: TelegramCore.EnginePeer.Id, invitedBy: TelegramCore.EnginePeer.Id, invitedAt: Swift.Int32)
  public var peerId: TelegramCore.EnginePeer.Id {
    get
  }
  public static func == (a: TelegramCore.EngineLegacyGroupParticipant, b: TelegramCore.EngineLegacyGroupParticipant) -> Swift.Bool
}
extension TelegramCore.EngineLegacyGroupParticipant {
  public init(_ participant: TelegramCore.GroupParticipant)
  public func _asParticipant() -> TelegramCore.GroupParticipant
}
extension TelegramCore.TelegramEngine.EngineData.Item {
  public enum NotificationSettings {
    public struct Global : TelegramCore.TelegramEngineDataItem {
      public typealias Result = TelegramCore.EngineGlobalNotificationSettings
      public init()
    }
  }
  public enum Peer {
    public struct Peer : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Optional<TelegramCore.EnginePeer>
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct RenderedPeer : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Optional<TelegramCore.EngineRenderedPeer>
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct Presence : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Optional<TelegramCore.EnginePeer.Presence>
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct NotificationSettings : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = TelegramCore.EnginePeer.NotificationSettings
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct ThreadNotificationSettings : TelegramCore.TelegramEngineDataItem {
      public typealias Result = TelegramCore.EnginePeer.NotificationSettings
      public init(id: TelegramCore.EnginePeer.Id, threadId: Swift.Int64)
    }
    public struct ParticipantCount : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Optional<Swift.Int>
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct GroupCallDescription : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Optional<TelegramCore.EngineGroupCallDescription>
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct ExportedInvitation : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Optional<TelegramCore.EngineExportedPeerInvitation>
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct StatsDatacenterId : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Optional<Swift.Int32>
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct ThemeEmoticon : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Optional<Swift.String>
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct IsContact : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Bool
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct StickerPack : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = TelegramCore.StickerPackCollectionInfo?
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct AllowedReactions : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = TelegramCore.EnginePeerCachedInfoItem<TelegramCore.PeerAllowedReactions>
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct CallJoinAsPeerId : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = TelegramCore.EnginePeer.Id?
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct LinkedDiscussionPeerId : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = TelegramCore.EnginePeerCachedInfoItem<TelegramCore.EnginePeer.Id?>
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct StatusSettings : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = TelegramCore.EnginePeer.StatusSettings?
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct AreVideoCallsAvailable : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Bool
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct AreVoiceCallsAvailable : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Bool
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct AboutText : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = TelegramCore.EnginePeerCachedInfoItem<Swift.String?>
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct Photo : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = TelegramCore.EnginePeerCachedInfoItem<TelegramCore.TelegramMediaImage?>
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct CanViewStats : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Bool
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct CanDeleteHistory : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Bool
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct AntiSpamEnabled : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Bool
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct TranslationHidden : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Bool
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct LegacyGroupParticipants : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = TelegramCore.EnginePeerCachedInfoItem<[TelegramCore.EngineLegacyGroupParticipant]>
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct SecretChatKeyFingerprint : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = TelegramCore.EngineSecretChatKeyFingerprint?
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct SecretChatLayer : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Int?
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct ThreadData : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public struct Key : Swift.Hashable {
        public var id: TelegramCore.EnginePeer.Id
        public var threadId: Swift.Int64
        public init(id: TelegramCore.EnginePeer.Id, threadId: Swift.Int64)
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: TelegramCore.TelegramEngine.EngineData.Item.Peer.ThreadData.Key, b: TelegramCore.TelegramEngine.EngineData.Item.Peer.ThreadData.Key) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Result = TelegramCore.MessageHistoryThreadData?
      public var mapKey: TelegramCore.TelegramEngine.EngineData.Item.Peer.ThreadData.Key {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id, threadId: Swift.Int64)
    }
  }
}
public struct UploadedSecureIdFile : Swift.Equatable {
  public let fileHash: Foundation.Data
  public static func == (a: TelegramCore.UploadedSecureIdFile, b: TelegramCore.UploadedSecureIdFile) -> Swift.Bool
}
public enum UploadSecureIdFileResult {
  case progress(Swift.Float)
  case result(TelegramCore.UploadedSecureIdFile, Foundation.Data)
}
public enum UploadSecureIdFileError {
  case generic
  public static func == (a: TelegramCore.UploadSecureIdFileError, b: TelegramCore.UploadSecureIdFileError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func uploadSecureIdFile(context: TelegramCore.SecureIdAccessContext, postbox: PostboxKit.Postbox, network: TelegramCore.Network, resource: PostboxKit.MediaResource) -> SwiftSignalKit.Signal<TelegramCore.UploadSecureIdFileResult, TelegramCore.UploadSecureIdFileError>
public func requestBlockedPeers(account: TelegramCore.Account) -> SwiftSignalKit.Signal<[PostboxKit.Peer], SwiftSignalKit.NoError>
extension TelegramCore.TelegramMediaFile {
  final public var dimensions: TelegramCore.PixelDimensions? {
    get
  }
  final public var duration: Swift.Int32? {
    get
  }
}
public func fileNameFromFileAttributes(_ attributes: [TelegramCore.TelegramMediaFileAttribute]) -> Swift.String?
final public class SynchronizePinnedChatsOperation : PostboxKit.PostboxCoding {
  final public let previousItemIds: [PostboxKit.PinnedItemId]
  public init(previousItemIds: [PostboxKit.PinnedItemId])
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public func addSynchronizePinnedChatsOperation(transaction: PostboxKit.Transaction, groupId: PostboxKit.PeerGroupId)
public enum AddSavedStickerError {
  case generic
  case notFound
  public static func == (a: TelegramCore.AddSavedStickerError, b: TelegramCore.AddSavedStickerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func getIsStickerSaved(transaction: PostboxKit.Transaction, fileId: PostboxKit.MediaId) -> Swift.Bool
public func addSavedSticker(postbox: PostboxKit.Postbox, network: TelegramCore.Network, file: TelegramCore.TelegramMediaFile, limit: Swift.Int = 5) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.AddSavedStickerError>
public func addSavedSticker(transaction: PostboxKit.Transaction, file: TelegramCore.TelegramMediaFile, stringRepresentations: [Swift.String], limit: Swift.Int = 5)
public func removeSavedSticker(transaction: PostboxKit.Transaction, mediaId: PostboxKit.MediaId)
public func removeSavedSticker(postbox: PostboxKit.Postbox, mediaId: PostboxKit.MediaId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
final public class SynchronizeChatInputStateOperation : PostboxKit.PostboxCoding {
  final public let previousState: TelegramCore.SynchronizeableChatInputState?
  final public let threadId: Swift.Int64?
  public init(previousState: TelegramCore.SynchronizeableChatInputState?, threadId: Swift.Int64?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public enum AddGroupMemberError {
  case generic
  case groupFull
  case privacy
  case notMutualContact
  case tooManyChannels
  public static func == (a: TelegramCore.AddGroupMemberError, b: TelegramCore.AddGroupMemberError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AddChannelMemberError {
  case generic
  case restricted
  case notMutualContact
  case limitExceeded
  case tooMuchJoined
  case bot(PostboxKit.PeerId)
  case botDoesntSupportGroups
  case tooMuchBots
  case kicked
}
public enum SendBotRequestedPeerError {
  case generic
  public static func == (a: TelegramCore.SendBotRequestedPeerError, b: TelegramCore.SendBotRequestedPeerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class AudioTranscriptionMessageAttribute : PostboxKit.MessageAttribute, Swift.Equatable {
  public enum TranscriptionError : Swift.Int32, Swift.Error {
    case generic
    case tooLong
    public init?(rawValue: Swift.Int32)
    public typealias RawValue = Swift.Int32
    public var rawValue: Swift.Int32 {
      get
    }
  }
  final public let id: Swift.Int64
  final public let text: Swift.String
  final public let isPending: Swift.Bool
  final public let didRate: Swift.Bool
  final public let error: TelegramCore.AudioTranscriptionMessageAttribute.TranscriptionError?
  public var associatedPeerIds: [PostboxKit.PeerId] {
    get
  }
  public init(id: Swift.Int64, text: Swift.String, isPending: Swift.Bool, didRate: Swift.Bool, error: TelegramCore.AudioTranscriptionMessageAttribute.TranscriptionError?)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.AudioTranscriptionMessageAttribute, rhs: TelegramCore.AudioTranscriptionMessageAttribute) -> Swift.Bool
  @objc deinit
}
public struct CacheStorageSettings : Swift.Codable, Swift.Equatable {
  public enum PeerStorageCategory : Swift.String, Swift.Codable, Swift.Hashable {
    case privateChats
    case groups
    case channels
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var defaultCacheStorageTimeout: Swift.Int32
  public var defaultCacheStorageLimitGigabytes: Swift.Int32
  public var categoryStorageTimeout: [TelegramCore.CacheStorageSettings.PeerStorageCategory : Swift.Int32]
  public static var defaultSettings: TelegramCore.CacheStorageSettings {
    get
  }
  public init(defaultCacheStorageTimeout: Swift.Int32, defaultCacheStorageLimitGigabytes: Swift.Int32, categoryStorageTimeout: [TelegramCore.CacheStorageSettings.PeerStorageCategory : Swift.Int32])
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.CacheStorageSettings, b: TelegramCore.CacheStorageSettings) -> Swift.Bool
}
public struct AccountSpecificCacheStorageSettings : Swift.Codable, Swift.Equatable {
  public struct Value : Swift.Equatable {
    public let key: PostboxKit.PeerId
    public let value: Swift.Int32
    public init(key: PostboxKit.PeerId, value: Swift.Int32)
    public static func == (a: TelegramCore.AccountSpecificCacheStorageSettings.Value, b: TelegramCore.AccountSpecificCacheStorageSettings.Value) -> Swift.Bool
  }
  public var peerStorageTimeoutExceptions: [TelegramCore.AccountSpecificCacheStorageSettings.Value]
  public static var defaultSettings: TelegramCore.AccountSpecificCacheStorageSettings {
    get
  }
  public init(peerStorageTimeoutExceptions: [TelegramCore.AccountSpecificCacheStorageSettings.Value])
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.AccountSpecificCacheStorageSettings, b: TelegramCore.AccountSpecificCacheStorageSettings) -> Swift.Bool
}
public struct SendAsPeer : Swift.Equatable {
  public let peer: PostboxKit.Peer
  public let subscribers: Swift.Int32?
  public let isPremiumRequired: Swift.Bool
  public init(peer: PostboxKit.Peer, subscribers: Swift.Int32?, isPremiumRequired: Swift.Bool)
  public static func == (lhs: TelegramCore.SendAsPeer, rhs: TelegramCore.SendAsPeer) -> Swift.Bool
}
final public class CachedSendAsPeers : Swift.Codable {
  final public let peerIds: [PostboxKit.PeerId]
  final public let premiumRequiredPeerIds: Swift.Set<PostboxKit.PeerId>
  final public let timestamp: Swift.Int32
  public init(peerIds: [PostboxKit.PeerId], premiumRequiredPeerIds: Swift.Set<PostboxKit.PeerId>, timestamp: Swift.Int32)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public enum UpdatePeerSendAsPeerError {
  case generic
  public static func == (a: TelegramCore.UpdatePeerSendAsPeerError, b: TelegramCore.UpdatePeerSendAsPeerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ConfirmTwoStepRecoveryEmailError {
  case invalidEmail
  case invalidCode
  case flood
  case expired
  case generic
  public static func == (a: TelegramCore.ConfirmTwoStepRecoveryEmailError, b: TelegramCore.ConfirmTwoStepRecoveryEmailError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ResendTwoStepRecoveryEmailError {
  case flood
  case generic
  public static func == (a: TelegramCore.ResendTwoStepRecoveryEmailError, b: TelegramCore.ResendTwoStepRecoveryEmailError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CancelTwoStepRecoveryEmailError {
  case generic
  public static func == (a: TelegramCore.CancelTwoStepRecoveryEmailError, b: TelegramCore.CancelTwoStepRecoveryEmailError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PeerSpecificStickerPackData {
  public let packInfo: (TelegramCore.StickerPackCollectionInfo, [PostboxKit.ItemCollectionItem])?
  public let canSetup: Swift.Bool
}
public struct UserInfoFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init()
  public init(rawValue: Swift.Int32)
  public static let isVerified: TelegramCore.UserInfoFlags
  public static let isSupport: TelegramCore.UserInfoFlags
  public static let isScam: TelegramCore.UserInfoFlags
  public static let isFake: TelegramCore.UserInfoFlags
  public static let isPremium: TelegramCore.UserInfoFlags
  public typealias ArrayLiteralElement = TelegramCore.UserInfoFlags
  public typealias Element = TelegramCore.UserInfoFlags
  public typealias RawValue = Swift.Int32
}
public struct BotUserInfoFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init()
  public init(rawValue: Swift.Int32)
  public static let hasAccessToChatHistory: TelegramCore.BotUserInfoFlags
  public static let worksWithGroups: TelegramCore.BotUserInfoFlags
  public static let requiresGeolocationForInlineRequests: TelegramCore.BotUserInfoFlags
  public static let canBeAddedToAttachMenu: TelegramCore.BotUserInfoFlags
  public typealias ArrayLiteralElement = TelegramCore.BotUserInfoFlags
  public typealias Element = TelegramCore.BotUserInfoFlags
  public typealias RawValue = Swift.Int32
}
public struct BotUserInfo : PostboxKit.PostboxCoding, Swift.Equatable {
  public let flags: TelegramCore.BotUserInfoFlags
  public let inlinePlaceholder: Swift.String?
  public init(flags: TelegramCore.BotUserInfoFlags, inlinePlaceholder: Swift.String?)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.BotUserInfo, b: TelegramCore.BotUserInfo) -> Swift.Bool
}
public struct TelegramPeerUsername : PostboxKit.PostboxCoding, Swift.Equatable {
  public struct Flags : Swift.OptionSet {
    public var rawValue: Swift.Int32
    public init()
    public init(rawValue: Swift.Int32)
    public static let isEditable: TelegramCore.TelegramPeerUsername.Flags
    public static let isActive: TelegramCore.TelegramPeerUsername.Flags
    public typealias ArrayLiteralElement = TelegramCore.TelegramPeerUsername.Flags
    public typealias Element = TelegramCore.TelegramPeerUsername.Flags
    public typealias RawValue = Swift.Int32
  }
  public let flags: TelegramCore.TelegramPeerUsername.Flags
  public let username: Swift.String
  public init(flags: TelegramCore.TelegramPeerUsername.Flags, username: Swift.String)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.TelegramPeerUsername, b: TelegramCore.TelegramPeerUsername) -> Swift.Bool
}
final public class TelegramUser : PostboxKit.Peer, Swift.Equatable {
  final public let id: PostboxKit.PeerId
  final public let accessHash: TelegramCore.TelegramPeerAccessHash?
  final public let firstName: Swift.String?
  final public let lastName: Swift.String?
  final public let username: Swift.String?
  final public let phone: Swift.String?
  final public let photo: [TelegramCore.TelegramMediaImageRepresentation]
  final public let botInfo: TelegramCore.BotUserInfo?
  final public let restrictionInfo: TelegramCore.PeerAccessRestrictionInfo?
  final public let flags: TelegramCore.UserInfoFlags
  final public let emojiStatus: TelegramCore.PeerEmojiStatus?
  final public let usernames: [TelegramCore.TelegramPeerUsername]
  final public var nameOrPhone: Swift.String {
    get
  }
  final public var shortNameOrPhone: Swift.String {
    get
  }
  final public var indexName: PostboxKit.PeerIndexNameRepresentation {
    get
  }
  final public var associatedMediaIds: [PostboxKit.MediaId]? {
    get
  }
  final public let associatedPeerId: PostboxKit.PeerId?
  final public let notificationSettingsPeerId: PostboxKit.PeerId?
  final public var timeoutAttribute: Swift.UInt32? {
    get
  }
  public init(id: PostboxKit.PeerId, accessHash: TelegramCore.TelegramPeerAccessHash?, firstName: Swift.String?, lastName: Swift.String?, username: Swift.String?, phone: Swift.String?, photo: [TelegramCore.TelegramMediaImageRepresentation], botInfo: TelegramCore.BotUserInfo?, restrictionInfo: TelegramCore.PeerAccessRestrictionInfo?, flags: TelegramCore.UserInfoFlags, emojiStatus: TelegramCore.PeerEmojiStatus?, usernames: [TelegramCore.TelegramPeerUsername])
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(_ other: PostboxKit.Peer) -> Swift.Bool
  public static func == (lhs: TelegramCore.TelegramUser, rhs: TelegramCore.TelegramUser) -> Swift.Bool
  final public func withUpdatedUsername(_ username: Swift.String?) -> TelegramCore.TelegramUser
  final public func withUpdatedUsernames(_ usernames: [TelegramCore.TelegramPeerUsername]) -> TelegramCore.TelegramUser
  final public func withUpdatedNames(firstName: Swift.String?, lastName: Swift.String?) -> TelegramCore.TelegramUser
  final public func withUpdatedPhone(_ phone: Swift.String?) -> TelegramCore.TelegramUser
  final public func withUpdatedPhoto(_ representations: [TelegramCore.TelegramMediaImageRepresentation]) -> TelegramCore.TelegramUser
  final public func withUpdatedEmojiStatus(_ emojiStatus: TelegramCore.PeerEmojiStatus?) -> TelegramCore.TelegramUser
  @objc deinit
}
final public class AdMessageAttribute : PostboxKit.MessageAttribute {
  public enum MessageType {
    case sponsored
    case recommended
    public static func == (a: TelegramCore.AdMessageAttribute.MessageType, b: TelegramCore.AdMessageAttribute.MessageType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum MessageTarget {
    case peer(id: TelegramCore.EnginePeer.Id, message: TelegramCore.EngineMessage.Id?, startParam: Swift.String?)
    case join(title: Swift.String, joinHash: Swift.String)
  }
  final public let opaqueId: Foundation.Data
  final public let messageType: TelegramCore.AdMessageAttribute.MessageType
  final public let displayAvatar: Swift.Bool
  final public let target: TelegramCore.AdMessageAttribute.MessageTarget
  public init(opaqueId: Foundation.Data, messageType: TelegramCore.AdMessageAttribute.MessageType, displayAvatar: Swift.Bool, target: TelegramCore.AdMessageAttribute.MessageTarget)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public enum RequestLocalizationPreviewError {
  case generic
  public static func == (a: TelegramCore.RequestLocalizationPreviewError, b: TelegramCore.RequestLocalizationPreviewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RecentPeerItemId {
  public let rawValue: PostboxKit.MemoryBuffer
  public let peerId: PostboxKit.PeerId
  public init(_ rawValue: PostboxKit.MemoryBuffer)
  public init(_ peerId: PostboxKit.PeerId)
}
final public class RecentPeerItem : Swift.Codable {
  final public let rating: Swift.Double
  public init(rating: Swift.Double)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public enum SecureIdValueContentErrorKey : Swift.Hashable {
  case value(TelegramCore.SecureIdValueKey)
  case field(TelegramCore.SecureIdValueContentErrorField)
  case file(hash: Foundation.Data)
  case files(hashes: Swift.Set<Foundation.Data>)
  case translationFile(hash: Foundation.Data)
  case translationFiles(hashes: Swift.Set<Foundation.Data>)
  case selfie(hash: Foundation.Data)
  case frontSide(hash: Foundation.Data)
  case backSide(hash: Foundation.Data)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.SecureIdValueContentErrorKey, b: TelegramCore.SecureIdValueContentErrorKey) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum SecureIdValueContentErrorField : Swift.Hashable {
  case personalDetails(TelegramCore.SecureIdValueContentErrorPersonalDetailsField)
  case passport(TelegramCore.SecureIdValueContentErrorPassportField)
  case internalPassport(TelegramCore.SecureIdValueContentErrorInternalPassportField)
  case driversLicense(TelegramCore.SecureIdValueContentErrorDriversLicenseField)
  case idCard(TelegramCore.SecureIdValueContentErrorIdCardField)
  case address(TelegramCore.SecureIdValueContentErrorAddressField)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.SecureIdValueContentErrorField, b: TelegramCore.SecureIdValueContentErrorField) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum SecureIdValueContentErrorPersonalDetailsField : Swift.String, Swift.Hashable {
  case firstName
  case lastName
  case middleName
  case firstNameNative
  case lastNameNative
  case middleNameNative
  case birthdate
  case gender
  case countryCode
  case residenceCountryCode
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SecureIdValueContentErrorPassportField : Swift.String, Swift.Hashable {
  case documentId
  case expiryDate
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SecureIdValueContentErrorInternalPassportField : Swift.String, Swift.Hashable {
  case documentId
  case expiryDate
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SecureIdValueContentErrorDriversLicenseField : Swift.String, Swift.Hashable {
  case documentId
  case expiryDate
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SecureIdValueContentErrorIdCardField : Swift.String, Swift.Hashable {
  case documentId
  case expiryDate
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SecureIdValueContentErrorAddressField : Swift.String, Swift.Hashable {
  case streetLine1
  case streetLine2
  case city
  case state
  case countryCode
  case postCode
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias SecureIdValueContentError = Swift.String
extension TelegramCore.InstantPageListItem {
  public var num: Swift.String? {
    get
  }
}
final public class NamedGeoPlace : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let country: Swift.String?
  final public let state: Swift.String?
  final public let city: Swift.String?
  final public let district: Swift.String?
  final public let street: Swift.String?
  public init(country: Swift.String?, state: Swift.String?, city: Swift.String?, district: Swift.String?, street: Swift.String?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.NamedGeoPlace, rhs: TelegramCore.NamedGeoPlace) -> Swift.Bool
  @objc deinit
}
final public class MapVenue : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let title: Swift.String
  final public let address: Swift.String?
  final public let provider: Swift.String?
  final public let id: Swift.String?
  final public let type: Swift.String?
  public init(title: Swift.String, address: Swift.String?, provider: Swift.String?, id: Swift.String?, type: Swift.String?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.MapVenue, rhs: TelegramCore.MapVenue) -> Swift.Bool
  @objc deinit
}
final public class TelegramMediaMap : PostboxKit.Media {
  final public let latitude: Swift.Double
  final public let longitude: Swift.Double
  final public let heading: Swift.Int32?
  final public let accuracyRadius: Swift.Double?
  final public let geoPlace: TelegramCore.NamedGeoPlace?
  final public let venue: TelegramCore.MapVenue?
  final public let liveBroadcastingTimeout: Swift.Int32?
  final public let liveProximityNotificationRadius: Swift.Int32?
  final public let id: PostboxKit.MediaId?
  final public let peerIds: [PostboxKit.PeerId]
  public init(latitude: Swift.Double, longitude: Swift.Double, heading: Swift.Int32?, accuracyRadius: Swift.Double?, geoPlace: TelegramCore.NamedGeoPlace?, venue: TelegramCore.MapVenue?, liveBroadcastingTimeout: Swift.Int32?, liveProximityNotificationRadius: Swift.Int32?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to other: PostboxKit.Media) -> Swift.Bool
  final public func isSemanticallyEqual(to other: PostboxKit.Media) -> Swift.Bool
  @objc deinit
}
public enum AccountEnvironment : Swift.Int32 {
  case production
  case test
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
final public class AccountEnvironmentAttribute : Swift.Codable, Swift.Equatable {
  final public let environment: TelegramCore.AccountEnvironment
  public init(environment: TelegramCore.AccountEnvironment)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.AccountEnvironmentAttribute, rhs: TelegramCore.AccountEnvironmentAttribute) -> Swift.Bool
  @objc deinit
}
public class ForwardOptionsMessageAttribute : PostboxKit.MessageAttribute {
  final public let hideNames: Swift.Bool
  final public let hideCaptions: Swift.Bool
  public init(hideNames: Swift.Bool, hideCaptions: Swift.Bool)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
final public class CachedThemesConfiguration : Swift.Codable {
  final public let hash: Swift.Int64
  public init(hash: Swift.Int64)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public class InlineBotMessageAttribute : PostboxKit.MessageAttribute {
  final public let peerId: PostboxKit.PeerId?
  final public let title: Swift.String?
  public var associatedPeerIds: [PostboxKit.PeerId] {
    get
  }
  public init(peerId: PostboxKit.PeerId?, title: Swift.String?)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public protocol AccountManagerTypes {
  associatedtype Attribute : TelegramCore.AccountRecordAttribute
}
public struct AccountManagerModifier<Types> where Types : TelegramCore.AccountManagerTypes {
  public let getRecords: () -> [TelegramCore.AccountRecord<Types.Attribute>]
  public let updateRecord: (TelegramCore.AccountRecordId, (TelegramCore.AccountRecord<Types.Attribute>?) -> (TelegramCore.AccountRecord<Types.Attribute>?)) -> Swift.Void
  public let getCurrent: () -> (TelegramCore.AccountRecordId, [Types.Attribute])?
  public let setCurrentId: (TelegramCore.AccountRecordId) -> Swift.Void
  public let getCurrentAuth: () -> TelegramCore.AuthAccountRecord<Types.Attribute>?
  public let createAuth: ([Types.Attribute]) -> TelegramCore.AuthAccountRecord<Types.Attribute>?
  public let removeAuth: () -> Swift.Void
  public let createRecord: ([Types.Attribute]) -> TelegramCore.AccountRecordId
  public let getSharedData: (PostboxKit.ValueBoxKey) -> PostboxKit.PreferencesEntry?
  public let updateSharedData: (PostboxKit.ValueBoxKey, (PostboxKit.PreferencesEntry?) -> PostboxKit.PreferencesEntry?) -> Swift.Void
  public let getAccessChallengeData: () -> TelegramCore.PostboxAccessChallengeData
  public let setAccessChallengeData: (TelegramCore.PostboxAccessChallengeData) -> Swift.Void
  public let getVersion: () -> Swift.Int32?
  public let setVersion: (Swift.Int32) -> Swift.Void
  public let getNotice: (PostboxKit.NoticeEntryKey) -> PostboxKit.CodableEntry?
  public let setNotice: (PostboxKit.NoticeEntryKey, PostboxKit.CodableEntry?) -> Swift.Void
  public let clearNotices: () -> Swift.Void
  public let getStoredLoginTokens: () -> [Foundation.Data]
  public let setStoredLoginTokens: ([Foundation.Data]) -> Swift.Void
}
final public class AccountManager<Types> where Types : TelegramCore.AccountManagerTypes {
  final public let basePath: Swift.String
  final public let mediaBox: PostboxKit.MediaBox
  final public let temporarySessionId: Swift.Int64
  public static func getCurrentRecords(basePath: Swift.String) -> (records: [TelegramCore.AccountRecord<Types.Attribute>], currentId: TelegramCore.AccountRecordId?)
  public init(basePath: Swift.String, isTemporary: Swift.Bool, isReadOnly: Swift.Bool, useCaches: Swift.Bool, removeDatabaseOnError: Swift.Bool)
  final public func transaction<T>(ignoreDisabled: Swift.Bool = false, _ f: @escaping (TelegramCore.AccountManagerModifier<Types>) -> T) -> SwiftSignalKit.Signal<T, SwiftSignalKit.NoError>
  final public func accountRecords() -> SwiftSignalKit.Signal<TelegramCore.AccountRecordsView<Types>, SwiftSignalKit.NoError>
  final public func _internalAccountRecordsSync() -> TelegramCore.AccountRecordsView<Types>
  final public func sharedData(keys: Swift.Set<PostboxKit.ValueBoxKey>) -> SwiftSignalKit.Signal<TelegramCore.AccountSharedDataView<Types>, SwiftSignalKit.NoError>
  final public func noticeEntry(key: PostboxKit.NoticeEntryKey) -> SwiftSignalKit.Signal<TelegramCore.NoticeEntryView<Types>, SwiftSignalKit.NoError>
  final public func accessChallengeData() -> SwiftSignalKit.Signal<TelegramCore.AccessChallengeDataView, SwiftSignalKit.NoError>
  final public func currentAccountRecord(allocateIfNotExists: Swift.Bool) -> SwiftSignalKit.Signal<(TelegramCore.AccountRecordId, [Types.Attribute])?, SwiftSignalKit.NoError>
  final public func allocatedTemporaryAccountId() -> SwiftSignalKit.Signal<TelegramCore.AccountRecordId, SwiftSignalKit.NoError>
  @objc deinit
}
final public class TelegramMediaDice : PostboxKit.Media {
  final public let emoji: Swift.String
  final public let value: Swift.Int32?
  final public let id: PostboxKit.MediaId?
  final public let peerIds: [PostboxKit.PeerId]
  public init(emoji: Swift.String, value: Swift.Int32? = nil)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to other: PostboxKit.Media) -> Swift.Bool
  final public func isSemanticallyEqual(to other: PostboxKit.Media) -> Swift.Bool
  @objc deinit
}
public struct AppUpdateInfo : Swift.Equatable {
  public let blocking: Swift.Bool
  public let version: Swift.String
  public let text: Swift.String
  public let entities: [TelegramCore.MessageTextEntity]
  public static func == (a: TelegramCore.AppUpdateInfo, b: TelegramCore.AppUpdateInfo) -> Swift.Bool
}
public protocol TelegramEngineDataItem {
  associatedtype Result
}
public protocol TelegramEngineMapKeyDataItem {
  associatedtype Key : Swift.Hashable
  var mapKey: Self.Key { get }
}
final public class EngineDataMap<Item> : TelegramCore.TelegramEngineDataItem where Item : TelegramCore.TelegramEngineDataItem, Item : TelegramCore.TelegramEngineMapKeyDataItem {
  public typealias Result = [Item.Key : Item.Result]
  public init(_ items: [Item])
  @objc deinit
}
final public class EngineDataList<Item> : TelegramCore.TelegramEngineDataItem where Item : TelegramCore.TelegramEngineDataItem, Item : TelegramCore.TelegramEngineMapKeyDataItem {
  public typealias Result = [Item.Result]
  public init(_ items: [Item])
  @objc deinit
}
final public class EngineDataOptional<Item> : TelegramCore.TelegramEngineDataItem where Item : TelegramCore.TelegramEngineDataItem {
  public typealias Result = Item.Result?
  public init(_ item: Item?)
  @objc deinit
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class EngineData {
    public struct Item {
    }
    final public func subscribe<T0>(_ t0: T0) -> SwiftSignalKit.Signal<T0.Result, SwiftSignalKit.NoError> where T0 : TelegramCore.TelegramEngineDataItem
    final public func get<T0>(_ t0: T0) -> SwiftSignalKit.Signal<T0.Result, SwiftSignalKit.NoError> where T0 : TelegramCore.TelegramEngineDataItem
    final public func subscribe<T0, T1>(_ t0: T0, _ t1: T1) -> SwiftSignalKit.Signal<(T0.Result, T1.Result), SwiftSignalKit.NoError> where T0 : TelegramCore.TelegramEngineDataItem, T1 : TelegramCore.TelegramEngineDataItem
    final public func subscribe<T0, T1, T2>(_ t0: T0, _ t1: T1, _ t2: T2) -> SwiftSignalKit.Signal<(T0.Result, T1.Result, T2.Result), SwiftSignalKit.NoError> where T0 : TelegramCore.TelegramEngineDataItem, T1 : TelegramCore.TelegramEngineDataItem, T2 : TelegramCore.TelegramEngineDataItem
    final public func get<T0, T1>(_ t0: T0, _ t1: T1) -> SwiftSignalKit.Signal<(T0.Result, T1.Result), SwiftSignalKit.NoError> where T0 : TelegramCore.TelegramEngineDataItem, T1 : TelegramCore.TelegramEngineDataItem
    final public func get<T0, T1, T2>(_ t0: T0, _ t1: T1, _ t2: T2) -> SwiftSignalKit.Signal<(T0.Result, T1.Result, T2.Result), SwiftSignalKit.NoError> where T0 : TelegramCore.TelegramEngineDataItem, T1 : TelegramCore.TelegramEngineDataItem, T2 : TelegramCore.TelegramEngineDataItem
    @objc deinit
  }
}
public enum EnginePeer : Swift.Equatable {
  public typealias Id = PostboxKit.PeerId
  public struct Presence : Swift.Equatable {
    public enum Status : Swift.Comparable {
      case present(until: Swift.Int32)
      case recently
      case lastWeek
      case lastMonth
      case longTimeAgo
      public static func < (lhs: TelegramCore.EnginePeer.Presence.Status, rhs: TelegramCore.EnginePeer.Presence.Status) -> Swift.Bool
      public static func == (a: TelegramCore.EnginePeer.Presence.Status, b: TelegramCore.EnginePeer.Presence.Status) -> Swift.Bool
    }
    public var status: TelegramCore.EnginePeer.Presence.Status
    public var lastActivity: Swift.Int32
    public init(status: TelegramCore.EnginePeer.Presence.Status, lastActivity: Swift.Int32)
    public static func == (a: TelegramCore.EnginePeer.Presence, b: TelegramCore.EnginePeer.Presence) -> Swift.Bool
  }
  public struct NotificationSettings : Swift.Equatable {
    public enum MuteState : Swift.Equatable {
      case `default`
      case unmuted
      case muted(until: Swift.Int32)
      public static func == (a: TelegramCore.EnginePeer.NotificationSettings.MuteState, b: TelegramCore.EnginePeer.NotificationSettings.MuteState) -> Swift.Bool
    }
    public enum MessageSound : Swift.Equatable {
      case none
      case `default`
      case bundledModern(id: Swift.Int32)
      case bundledClassic(id: Swift.Int32)
      case cloud(fileId: Swift.Int64)
      public static func == (a: TelegramCore.EnginePeer.NotificationSettings.MessageSound, b: TelegramCore.EnginePeer.NotificationSettings.MessageSound) -> Swift.Bool
    }
    public enum DisplayPreviews {
      case `default`
      case show
      case hide
      public static func == (a: TelegramCore.EnginePeer.NotificationSettings.DisplayPreviews, b: TelegramCore.EnginePeer.NotificationSettings.DisplayPreviews) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var muteState: TelegramCore.EnginePeer.NotificationSettings.MuteState
    public var messageSound: TelegramCore.EnginePeer.NotificationSettings.MessageSound
    public var displayPreviews: TelegramCore.EnginePeer.NotificationSettings.DisplayPreviews
    public init(muteState: TelegramCore.EnginePeer.NotificationSettings.MuteState, messageSound: TelegramCore.EnginePeer.NotificationSettings.MessageSound, displayPreviews: TelegramCore.EnginePeer.NotificationSettings.DisplayPreviews)
    public static func == (a: TelegramCore.EnginePeer.NotificationSettings, b: TelegramCore.EnginePeer.NotificationSettings) -> Swift.Bool
  }
  public struct StatusSettings : Swift.Equatable {
    public struct Flags : Swift.OptionSet {
      public var rawValue: Swift.Int32
      public init(rawValue: Swift.Int32)
      public static let canReport: TelegramCore.EnginePeer.StatusSettings.Flags
      public static let canShareContact: TelegramCore.EnginePeer.StatusSettings.Flags
      public static let canBlock: TelegramCore.EnginePeer.StatusSettings.Flags
      public static let canAddContact: TelegramCore.EnginePeer.StatusSettings.Flags
      public static let addExceptionWhenAddingContact: TelegramCore.EnginePeer.StatusSettings.Flags
      public static let canReportIrrelevantGeoLocation: TelegramCore.EnginePeer.StatusSettings.Flags
      public static let autoArchived: TelegramCore.EnginePeer.StatusSettings.Flags
      public static let suggestAddMembers: TelegramCore.EnginePeer.StatusSettings.Flags
      public typealias ArrayLiteralElement = TelegramCore.EnginePeer.StatusSettings.Flags
      public typealias Element = TelegramCore.EnginePeer.StatusSettings.Flags
      public typealias RawValue = Swift.Int32
    }
    public var flags: TelegramCore.EnginePeer.StatusSettings.Flags
    public var geoDistance: Swift.Int32?
    public var requestChatTitle: Swift.String?
    public var requestChatDate: Swift.Int32?
    public var requestChatIsChannel: Swift.Bool?
    public init(flags: TelegramCore.EnginePeer.StatusSettings.Flags, geoDistance: Swift.Int32?, requestChatTitle: Swift.String?, requestChatDate: Swift.Int32?, requestChatIsChannel: Swift.Bool?)
    public func contains(_ member: TelegramCore.EnginePeer.StatusSettings.Flags) -> Swift.Bool
    public static func == (a: TelegramCore.EnginePeer.StatusSettings, b: TelegramCore.EnginePeer.StatusSettings) -> Swift.Bool
  }
  public enum IndexName : Swift.Equatable {
    case title(title: Swift.String, addressNames: [Swift.String])
    case personName(first: Swift.String, last: Swift.String, addressNames: [Swift.String], phoneNumber: Swift.String?)
    public var isEmpty: Swift.Bool {
      get
    }
    public static func == (a: TelegramCore.EnginePeer.IndexName, b: TelegramCore.EnginePeer.IndexName) -> Swift.Bool
  }
  case user(TelegramCore.TelegramUser)
  case legacyGroup(TelegramCore.TelegramGroup)
  case channel(TelegramCore.TelegramChannel)
  case secretChat(TelegramCore.TelegramSecretChat)
  public static func == (lhs: TelegramCore.EnginePeer, rhs: TelegramCore.EnginePeer) -> Swift.Bool
}
public struct EngineGlobalNotificationSettings : Swift.Equatable {
  public struct CategorySettings : Swift.Equatable {
    public var enabled: Swift.Bool
    public var displayPreviews: Swift.Bool
    public var sound: TelegramCore.EnginePeer.NotificationSettings.MessageSound
    public init(enabled: Swift.Bool, displayPreviews: Swift.Bool, sound: TelegramCore.EnginePeer.NotificationSettings.MessageSound)
    public static func == (a: TelegramCore.EngineGlobalNotificationSettings.CategorySettings, b: TelegramCore.EngineGlobalNotificationSettings.CategorySettings) -> Swift.Bool
  }
  public var privateChats: TelegramCore.EngineGlobalNotificationSettings.CategorySettings
  public var groupChats: TelegramCore.EngineGlobalNotificationSettings.CategorySettings
  public var channels: TelegramCore.EngineGlobalNotificationSettings.CategorySettings
  public var contactsJoined: Swift.Bool
  public init(privateChats: TelegramCore.EngineGlobalNotificationSettings.CategorySettings, groupChats: TelegramCore.EngineGlobalNotificationSettings.CategorySettings, channels: TelegramCore.EngineGlobalNotificationSettings.CategorySettings, contactsJoined: Swift.Bool)
  public static func == (a: TelegramCore.EngineGlobalNotificationSettings, b: TelegramCore.EngineGlobalNotificationSettings) -> Swift.Bool
}
extension TelegramCore.EnginePeer.NotificationSettings.MuteState {
  public init(_ muteState: TelegramCore.PeerMuteState)
  public func _asMuteState() -> TelegramCore.PeerMuteState
}
extension TelegramCore.EnginePeer.NotificationSettings.MessageSound {
  public init(_ messageSound: TelegramCore.PeerMessageSound)
  public func _asMessageSound() -> TelegramCore.PeerMessageSound
}
extension TelegramCore.EnginePeer.NotificationSettings.DisplayPreviews {
  public init(_ displayPreviews: TelegramCore.PeerNotificationDisplayPreviews)
  public func _asDisplayPreviews() -> TelegramCore.PeerNotificationDisplayPreviews
}
extension TelegramCore.EnginePeer.NotificationSettings {
  public init(_ notificationSettings: TelegramCore.TelegramPeerNotificationSettings)
  public func _asNotificationSettings() -> TelegramCore.TelegramPeerNotificationSettings
}
extension TelegramCore.EnginePeer.StatusSettings {
  public init(_ statusSettings: TelegramCore.PeerStatusSettings)
}
extension TelegramCore.EnginePeer.Presence {
  public init(_ presence: PostboxKit.PeerPresence)
  public func _asPresence() -> TelegramCore.TelegramUserPresence
}
extension TelegramCore.EnginePeer.IndexName {
  public init(_ indexName: PostboxKit.PeerIndexNameRepresentation)
  public func _asIndexName() -> PostboxKit.PeerIndexNameRepresentation
  public func matchesByTokens(_ other: Swift.String) -> Swift.Bool
  public func stringRepresentation(lastNameFirst: Swift.Bool) -> Swift.String
}
extension TelegramCore.EnginePeer {
  public var id: TelegramCore.EnginePeer.Id {
    get
  }
  public var addressName: Swift.String? {
    get
  }
  public var indexName: TelegramCore.EnginePeer.IndexName {
    get
  }
  public var debugDisplayTitle: Swift.String {
    get
  }
  public func restrictionText(platform: Swift.String, contentSettings: TelegramCore.ContentSettings) -> Swift.String?
  public var displayLetters: [Swift.String] {
    get
  }
  public var profileImageRepresentations: [TelegramCore.TelegramMediaImageRepresentation] {
    get
  }
  public var smallProfileImage: TelegramCore.TelegramMediaImageRepresentation? {
    get
  }
  public var largeProfileImage: TelegramCore.TelegramMediaImageRepresentation? {
    get
  }
  public var isDeleted: Swift.Bool {
    get
  }
  public var isScam: Swift.Bool {
    get
  }
  public var isFake: Swift.Bool {
    get
  }
  public var isVerified: Swift.Bool {
    get
  }
  public var isPremium: Swift.Bool {
    get
  }
  public var isService: Swift.Bool {
    get
  }
}
extension TelegramCore.EnginePeer {
  public init(_ peer: PostboxKit.Peer)
  public func _asPeer() -> PostboxKit.Peer
}
final public class EngineRenderedPeer : Swift.Equatable {
  final public let peerId: TelegramCore.EnginePeer.Id
  final public let peers: [TelegramCore.EnginePeer.Id : TelegramCore.EnginePeer]
  final public let associatedMedia: [TelegramCore.EngineMedia.Id : PostboxKit.Media]
  public init(peerId: TelegramCore.EnginePeer.Id, peers: [TelegramCore.EnginePeer.Id : TelegramCore.EnginePeer], associatedMedia: [TelegramCore.EngineMedia.Id : PostboxKit.Media])
  public init(peer: TelegramCore.EnginePeer)
  public static func == (lhs: TelegramCore.EngineRenderedPeer, rhs: TelegramCore.EngineRenderedPeer) -> Swift.Bool
  final public var peer: TelegramCore.EnginePeer? {
    get
  }
  final public var chatMainPeer: TelegramCore.EnginePeer? {
    get
  }
  @objc deinit
}
extension TelegramCore.EngineRenderedPeer {
  convenience public init(_ renderedPeer: PostboxKit.RenderedPeer)
  convenience public init(message: TelegramCore.EngineMessage)
}
extension TelegramCore.EngineGlobalNotificationSettings.CategorySettings {
  public init(_ categorySettings: TelegramCore.MessageNotificationSettings)
  public func _asMessageNotificationSettings() -> TelegramCore.MessageNotificationSettings
}
extension TelegramCore.EngineGlobalNotificationSettings {
  public init(_ globalNotificationSettings: TelegramCore.GlobalNotificationSettingsSet)
}
@_hasMissingDesignatedInitializers final public class NoticeEntryView<Types> where Types : TelegramCore.AccountManagerTypes {
  final public let value: PostboxKit.CodableEntry?
  @objc deinit
}
public enum VoiceCallP2PMode : Swift.Int32 {
  case never
  case contacts
  case always
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public struct VoipConfiguration : Swift.Codable, Swift.Equatable {
  public var serializedData: Swift.String?
  public static var defaultValue: TelegramCore.VoipConfiguration {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.VoipConfiguration, b: TelegramCore.VoipConfiguration) -> Swift.Bool
}
extension TelegramCore.TelegramMediaWebFile {
  public var dimensions: TelegramCore.PixelDimensions? {
    get
  }
  public var duration: Swift.Int32? {
    get
  }
}
public struct ExportedContactToken {
  public let url: Swift.String
  public let expires: Swift.Int32
}
public class RestrictedContentMessageAttribute : PostboxKit.MessageAttribute {
  final public let rules: [TelegramCore.RestrictionRule]
  public init(rules: [TelegramCore.RestrictionRule])
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public func currentVoipConfiguration(transaction: PostboxKit.Transaction) -> TelegramCore.VoipConfiguration
public struct EngineCallStreamState {
  public struct Channel {
    public var id: Swift.Int32
    public var scale: Swift.Int32
    public var latestTimestamp: Swift.Int64
  }
  public var channels: [TelegramCore.EngineCallStreamState.Channel]
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class Calls {
    final public func rateCall(callId: TelegramCore.CallId, starsCount: Swift.Int32, comment: Swift.String = "", userInitiated: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func saveCallDebugLog(callId: TelegramCore.CallId, log: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.SaveCallDebugLogResult, SwiftSignalKit.NoError>
    final public func saveCompleteCallDebugLog(callId: TelegramCore.CallId, logPath: Swift.String) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func getCurrentGroupCall(callId: Swift.Int64, accessHash: Swift.Int64, peerId: PostboxKit.PeerId? = nil) -> SwiftSignalKit.Signal<TelegramCore.GroupCallSummary?, TelegramCore.GetCurrentGroupCallError>
    final public func createGroupCall(peerId: PostboxKit.PeerId, title: Swift.String?, scheduleDate: Swift.Int32?, isExternalStream: Swift.Bool) -> SwiftSignalKit.Signal<TelegramCore.GroupCallInfo, TelegramCore.CreateGroupCallError>
    final public func startScheduledGroupCall(peerId: PostboxKit.PeerId, callId: Swift.Int64, accessHash: Swift.Int64) -> SwiftSignalKit.Signal<TelegramCore.GroupCallInfo, TelegramCore.StartScheduledGroupCallError>
    final public func toggleScheduledGroupCallSubscription(peerId: PostboxKit.PeerId, callId: Swift.Int64, accessHash: Swift.Int64, subscribe: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.ToggleScheduledGroupCallSubscriptionError>
    final public func updateGroupCallJoinAsPeer(peerId: PostboxKit.PeerId, joinAs: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.UpdateGroupCallJoinAsPeerError>
    final public func getGroupCallParticipants(callId: Swift.Int64, accessHash: Swift.Int64, offset: Swift.String, ssrcs: [Swift.UInt32], limit: Swift.Int32, sortAscending: Swift.Bool?) -> SwiftSignalKit.Signal<TelegramCore.GroupCallParticipantsContext.State, TelegramCore.GetGroupCallParticipantsError>
    final public func joinGroupCall(peerId: PostboxKit.PeerId, joinAs: PostboxKit.PeerId?, callId: Swift.Int64, accessHash: Swift.Int64, preferMuted: Swift.Bool, joinPayload: Swift.String, peerAdminIds: SwiftSignalKit.Signal<[PostboxKit.PeerId], SwiftSignalKit.NoError>, inviteHash: Swift.String? = nil) -> SwiftSignalKit.Signal<TelegramCore.JoinGroupCallResult, TelegramCore.JoinGroupCallError>
    final public func joinGroupCallAsScreencast(peerId: PostboxKit.PeerId, callId: Swift.Int64, accessHash: Swift.Int64, joinPayload: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.JoinGroupCallAsScreencastResult, TelegramCore.JoinGroupCallError>
    final public func leaveGroupCallAsScreencast(callId: Swift.Int64, accessHash: Swift.Int64) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.LeaveGroupCallAsScreencastError>
    final public func leaveGroupCall(callId: Swift.Int64, accessHash: Swift.Int64, source: Swift.UInt32) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.LeaveGroupCallError>
    final public func stopGroupCall(peerId: PostboxKit.PeerId, callId: Swift.Int64, accessHash: Swift.Int64) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.StopGroupCallError>
    final public func checkGroupCall(callId: Swift.Int64, accessHash: Swift.Int64, ssrcs: [Swift.UInt32]) -> SwiftSignalKit.Signal<[Swift.UInt32], SwiftSignalKit.NoError>
    final public func inviteToGroupCall(callId: Swift.Int64, accessHash: Swift.Int64, peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.InviteToGroupCallError>
    final public func groupCallInviteLinks(callId: Swift.Int64, accessHash: Swift.Int64) -> SwiftSignalKit.Signal<TelegramCore.GroupCallInviteLinks?, SwiftSignalKit.NoError>
    final public func editGroupCallTitle(callId: Swift.Int64, accessHash: Swift.Int64, title: Swift.String) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.EditGroupCallTitleError>
    final public func clearCachedGroupCallDisplayAsAvailablePeers(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func cachedGroupCallDisplayAsAvailablePeers(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<[TelegramCore.FoundPeer], SwiftSignalKit.NoError>
    final public func updatedCurrentPeerGroupCall(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<TelegramCore.EngineGroupCallDescription?, SwiftSignalKit.NoError>
    final public func getAudioBroadcastDataSource(callId: Swift.Int64, accessHash: Swift.Int64) -> SwiftSignalKit.Signal<TelegramCore.AudioBroadcastDataSource?, SwiftSignalKit.NoError>
    final public func getAudioBroadcastPart(dataSource: TelegramCore.AudioBroadcastDataSource, callId: Swift.Int64, accessHash: Swift.Int64, timestampIdMilliseconds: Swift.Int64, durationMilliseconds: Swift.Int64) -> SwiftSignalKit.Signal<TelegramCore.GetAudioBroadcastPartResult, SwiftSignalKit.NoError>
    final public func getVideoBroadcastPart(dataSource: TelegramCore.AudioBroadcastDataSource, callId: Swift.Int64, accessHash: Swift.Int64, timestampIdMilliseconds: Swift.Int64, durationMilliseconds: Swift.Int64, channelId: Swift.Int32, quality: Swift.Int32) -> SwiftSignalKit.Signal<TelegramCore.GetAudioBroadcastPartResult, SwiftSignalKit.NoError>
    final public func groupCall(peerId: PostboxKit.PeerId, myPeerId: PostboxKit.PeerId, id: Swift.Int64, accessHash: Swift.Int64, state: TelegramCore.GroupCallParticipantsContext.State, previousServiceState: TelegramCore.GroupCallParticipantsContext.ServiceState?) -> TelegramCore.GroupCallParticipantsContext
    final public func serverTime() -> SwiftSignalKit.Signal<Swift.Int64, SwiftSignalKit.NoError>
    final public func requestStreamState(dataSource: TelegramCore.AudioBroadcastDataSource, callId: Swift.Int64, accessHash: Swift.Int64) -> SwiftSignalKit.Signal<TelegramCore.EngineCallStreamState?, SwiftSignalKit.NoError>
    final public func getGroupCallStreamCredentials(peerId: TelegramCore.EnginePeer.Id, revokePreviousCredentials: Swift.Bool) -> SwiftSignalKit.Signal<TelegramCore.GroupCallStreamCredentials, TelegramCore.GetGroupCallStreamCredentialsError>
    @objc deinit
  }
}
public enum LoadedStickerPack {
  case fetching
  case none
  case result(info: TelegramCore.StickerPackCollectionInfo, items: [TelegramCore.StickerPackItem], installed: Swift.Bool)
}
final public class TelegramMediaGame : PostboxKit.Media {
  final public let gameId: Swift.Int64
  final public let accessHash: Swift.Int64
  final public let name: Swift.String
  final public let title: Swift.String
  final public let description: Swift.String
  final public let image: TelegramCore.TelegramMediaImage?
  final public let file: TelegramCore.TelegramMediaFile?
  final public var id: PostboxKit.MediaId? {
    get
  }
  final public let peerIds: [PostboxKit.PeerId]
  public init(gameId: Swift.Int64, accessHash: Swift.Int64, name: Swift.String, title: Swift.String, description: Swift.String, image: TelegramCore.TelegramMediaImage?, file: TelegramCore.TelegramMediaFile?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to other: PostboxKit.Media) -> Swift.Bool
  final public func isSemanticallyEqual(to other: PostboxKit.Media) -> Swift.Bool
  @objc deinit
}
public protocol AccountRecordAttribute : Swift.Decodable, Swift.Encodable {
  func isEqual(to: TelegramCore.AccountRecordAttribute) -> Swift.Bool
}
public struct AccountRecordId : Swift.Comparable, Swift.Hashable, Swift.Codable {
  public init(rawValue: Swift.Int64)
  public var int64: Swift.Int64 {
    get
  }
  public static func == (lhs: TelegramCore.AccountRecordId, rhs: TelegramCore.AccountRecordId) -> Swift.Bool
  public static func < (lhs: TelegramCore.AccountRecordId, rhs: TelegramCore.AccountRecordId) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public func generateAccountRecordId() -> TelegramCore.AccountRecordId
final public class AccountRecord<Attribute> : Swift.Equatable, Swift.Codable where Attribute : TelegramCore.AccountRecordAttribute {
  final public let id: TelegramCore.AccountRecordId
  final public let attributes: [Attribute]
  final public let temporarySessionId: Swift.Int64?
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public init(id: TelegramCore.AccountRecordId, attributes: [Attribute], temporarySessionId: Swift.Int64?)
  public static func == (lhs: TelegramCore.AccountRecord<Attribute>, rhs: TelegramCore.AccountRecord<Attribute>) -> Swift.Bool
  @objc deinit
}
public enum CreatePeerExportedInvitationError {
  case generic
  public static func == (a: TelegramCore.CreatePeerExportedInvitationError, b: TelegramCore.CreatePeerExportedInvitationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum EditPeerExportedInvitationError {
  case generic
  public static func == (a: TelegramCore.EditPeerExportedInvitationError, b: TelegramCore.EditPeerExportedInvitationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RevokePeerExportedInvitationError {
  case generic
  public static func == (a: TelegramCore.RevokePeerExportedInvitationError, b: TelegramCore.RevokePeerExportedInvitationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RevokeExportedInvitationResult {
  case update(TelegramCore.ExportedInvitation)
  case replace(TelegramCore.ExportedInvitation, TelegramCore.ExportedInvitation)
}
public struct ExportedInvitations : Swift.Equatable {
  public let list: [TelegramCore.ExportedInvitation]?
  public let totalCount: Swift.Int32
  public static func == (a: TelegramCore.ExportedInvitations, b: TelegramCore.ExportedInvitations) -> Swift.Bool
}
public enum DeletePeerExportedInvitationError {
  case generic
  public static func == (a: TelegramCore.DeletePeerExportedInvitationError, b: TelegramCore.DeletePeerExportedInvitationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PeerExportedInvitationsState : Swift.Equatable {
  public var invitations: [TelegramCore.ExportedInvitation]
  public var isLoadingMore: Swift.Bool
  public var hasLoadedOnce: Swift.Bool
  public var canLoadMore: Swift.Bool
  public var count: Swift.Int32
  public init()
  public init(invitations: [TelegramCore.ExportedInvitation], isLoadingMore: Swift.Bool, hasLoadedOnce: Swift.Bool, canLoadMore: Swift.Bool, count: Swift.Int32)
  public static func == (a: TelegramCore.PeerExportedInvitationsState, b: TelegramCore.PeerExportedInvitationsState) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class PeerExportedInvitationsContext {
  final public var state: SwiftSignalKit.Signal<TelegramCore.PeerExportedInvitationsState, SwiftSignalKit.NoError> {
    get
  }
  final public func reload()
  final public func loadMore()
  final public func add(_ invite: TelegramCore.ExportedInvitation)
  final public func update(_ invite: TelegramCore.ExportedInvitation)
  final public func remove(_ invite: TelegramCore.ExportedInvitation)
  final public func clear()
  @objc deinit
}
public struct PeerInvitationImportersState : Swift.Equatable {
  public struct Importer : Swift.Equatable {
    public var peer: PostboxKit.RenderedPeer
    public var date: Swift.Int32
    public var about: Swift.String?
    public var approvedBy: PostboxKit.PeerId?
    public static func == (a: TelegramCore.PeerInvitationImportersState.Importer, b: TelegramCore.PeerInvitationImportersState.Importer) -> Swift.Bool
  }
  public var importers: [TelegramCore.PeerInvitationImportersState.Importer]
  public var isLoadingMore: Swift.Bool
  public var hasLoadedOnce: Swift.Bool
  public var canLoadMore: Swift.Bool
  public var count: Swift.Int32
  public var waitingCount: Swift.Int {
    get
  }
  public static var Empty: TelegramCore.PeerInvitationImportersState
  public static var Loading: TelegramCore.PeerInvitationImportersState
  public static func == (a: TelegramCore.PeerInvitationImportersState, b: TelegramCore.PeerInvitationImportersState) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class PeerInvitationImportersContext {
  public enum Subject {
    case invite(invite: TelegramCore.ExportedInvitation, requested: Swift.Bool)
    case requests(query: Swift.String?)
  }
  public enum UpdateAction {
    case approve
    case deny
    public static func == (a: TelegramCore.PeerInvitationImportersContext.UpdateAction, b: TelegramCore.PeerInvitationImportersContext.UpdateAction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public var state: SwiftSignalKit.Signal<TelegramCore.PeerInvitationImportersState, SwiftSignalKit.NoError> {
    get
  }
  final public func loadMore()
  final public func reload()
  final public func update(_ peerId: TelegramCore.EnginePeer.Id, action: TelegramCore.PeerInvitationImportersContext.UpdateAction)
  final public func updateAll(action: TelegramCore.PeerInvitationImportersContext.UpdateAction)
  @objc deinit
}
public struct ExportedInvitationCreator : Swift.Equatable {
  public let peer: PostboxKit.RenderedPeer
  public let count: Swift.Int32
  public let revokedCount: Swift.Int32
  public static func == (a: TelegramCore.ExportedInvitationCreator, b: TelegramCore.ExportedInvitationCreator) -> Swift.Bool
}
public enum AddSynchronizeInstalledStickerPacksOperationContent {
  case sync
  case add([PostboxKit.ItemCollectionId])
  case remove([PostboxKit.ItemCollectionId])
  case archive([PostboxKit.ItemCollectionId])
}
public func addSynchronizeInstalledStickerPacksOperation(transaction: PostboxKit.Transaction, namespace: PostboxKit.ItemCollectionId.Namespace, content: TelegramCore.AddSynchronizeInstalledStickerPacksOperationContent, noDelay: Swift.Bool)
final public class SynchronizeAutosaveItemOperation : PostboxKit.PostboxCoding {
  public struct Content : Swift.Codable {
    public var messageId: PostboxKit.MessageId
    public var mediaId: PostboxKit.MediaId
    public init(messageId: PostboxKit.MessageId, mediaId: PostboxKit.MediaId)
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  final public let messageId: PostboxKit.MessageId
  final public let mediaId: PostboxKit.MediaId
  public init(messageId: PostboxKit.MessageId, mediaId: PostboxKit.MediaId)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public func addSynchronizeAutosaveItemOperation(transaction: PostboxKit.Transaction, messageId: PostboxKit.MessageId, mediaId: PostboxKit.MediaId)
public func addSynchronizeAutosaveItemOperation(postbox: PostboxKit.Postbox, messageId: PostboxKit.MessageId, mediaId: PostboxKit.MediaId) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
public func _internal_getSynchronizeAutosaveItemOperations(transaction: PostboxKit.Transaction) -> [(index: Swift.Int32, message: PostboxKit.Message, mediaId: PostboxKit.MediaId)]
public func _internal_removeSyncrhonizeAutosaveItemOperations(transaction: PostboxKit.Transaction, indices: [Swift.Int32])
public protocol EngineOpaqueChatState : AnyObject, Swift.Decodable, Swift.Encodable {
  func isEqual(to other: TelegramCore.EngineOpaqueChatState) -> Swift.Bool
}
extension PostboxKit.EngineMessageHistoryThread {
  final public class Info : Swift.Equatable, Swift.Codable {
    final public let title: Swift.String
    final public let icon: Swift.Int64?
    final public let iconColor: Swift.Int32
    public init(title: Swift.String, icon: Swift.Int64?, iconColor: Swift.Int32)
    public init(from decoder: Swift.Decoder) throws
    final public func encode(to encoder: Swift.Encoder) throws
    public static func == (lhs: PostboxKit.EngineMessageHistoryThread.Info, rhs: PostboxKit.EngineMessageHistoryThread.Info) -> Swift.Bool
    @objc deinit
  }
}
public struct MessageHistoryThreadData : Swift.Codable, Swift.Equatable {
  public var creationDate: Swift.Int32
  public var isOwnedByMe: Swift.Bool
  public var author: PostboxKit.PeerId
  public var info: PostboxKit.EngineMessageHistoryThread.Info
  public var incomingUnreadCount: Swift.Int32
  public var maxIncomingReadId: Swift.Int32
  public var maxKnownMessageId: Swift.Int32
  public var maxOutgoingReadId: Swift.Int32
  public var isClosed: Swift.Bool
  public var isHidden: Swift.Bool
  public var notificationSettings: TelegramCore.TelegramPeerNotificationSettings
  public init(creationDate: Swift.Int32, isOwnedByMe: Swift.Bool, author: PostboxKit.PeerId, info: PostboxKit.EngineMessageHistoryThread.Info, incomingUnreadCount: Swift.Int32, maxIncomingReadId: Swift.Int32, maxKnownMessageId: Swift.Int32, maxOutgoingReadId: Swift.Int32, isClosed: Swift.Bool, isHidden: Swift.Bool, notificationSettings: TelegramCore.TelegramPeerNotificationSettings)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.MessageHistoryThreadData, b: TelegramCore.MessageHistoryThreadData) -> Swift.Bool
}
public enum CreateForumChannelTopicError {
  case generic
  public static func == (a: TelegramCore.CreateForumChannelTopicError, b: TelegramCore.CreateForumChannelTopicError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum EditForumChannelTopicError {
  case generic
  public static func == (a: TelegramCore.EditForumChannelTopicError, b: TelegramCore.EditForumChannelTopicError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SetForumChannelTopicPinnedError {
  case generic
  case limitReached(Swift.Int)
}
extension PostboxKit.EngineMessageHistoryThread {
  public struct NotificationException : Swift.Equatable {
    public var threadId: Swift.Int64
    public var info: PostboxKit.EngineMessageHistoryThread.Info
    public var notificationSettings: TelegramCore.EnginePeer.NotificationSettings
    public init(threadId: Swift.Int64, info: PostboxKit.EngineMessageHistoryThread.Info, notificationSettings: TelegramCore.EnginePeer.NotificationSettings)
    public static func == (a: PostboxKit.EngineMessageHistoryThread.NotificationException, b: PostboxKit.EngineMessageHistoryThread.NotificationException) -> Swift.Bool
  }
}
final public class ForumChannelTopics {
  public struct Item : Swift.Equatable {
    public var id: Swift.Int64
    public var info: PostboxKit.EngineMessageHistoryThread.Info
    public var index: PostboxKit.MessageIndex
    public var topMessage: TelegramCore.EngineMessage?
    public static func == (a: TelegramCore.ForumChannelTopics.Item, b: TelegramCore.ForumChannelTopics.Item) -> Swift.Bool
  }
  public struct State : Swift.Equatable {
    public var items: [TelegramCore.ForumChannelTopics.Item]
    public static func == (a: TelegramCore.ForumChannelTopics.State, b: TelegramCore.ForumChannelTopics.State) -> Swift.Bool
  }
  final public var state: SwiftSignalKit.Signal<TelegramCore.ForumChannelTopics.State, SwiftSignalKit.NoError> {
    get
  }
  public init(account: TelegramCore.Account, peerId: PostboxKit.PeerId)
  @objc deinit
}
public enum DeletedMessageId : Swift.Hashable {
  case global(Swift.Int32)
  case messageId(PostboxKit.MessageId)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.DeletedMessageId, b: TelegramCore.DeletedMessageId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AccountStateManager {
  @_hasMissingDesignatedInitializers final public class IncomingCallUpdate {
    final public let callId: Swift.Int64
    final public let callAccessHash: Swift.Int64
    final public let timestamp: Swift.Int32
    final public let peer: TelegramCore.EnginePeer
    @objc deinit
  }
  final public let accountPeerId: PostboxKit.PeerId
  final public let postbox: PostboxKit.Postbox
  final public let network: TelegramCore.Network
  final public var isUpdating: SwiftSignalKit.Signal<Swift.Bool, SwiftSignalKit.NoError> {
    get
  }
  final public var notificationMessages: SwiftSignalKit.Signal<[([PostboxKit.Message], PostboxKit.PeerGroupId, Swift.Bool, TelegramCore.MessageHistoryThreadData?)], SwiftSignalKit.NoError> {
    get
  }
  final public var reactionNotifications: SwiftSignalKit.Signal<[(reactionAuthor: PostboxKit.Peer, reaction: TelegramCore.MessageReaction.Reaction, message: PostboxKit.Message, timestamp: Swift.Int32)], SwiftSignalKit.NoError> {
    get
  }
  final public var displayAlerts: SwiftSignalKit.Signal<[(text: Swift.String, isDropAuth: Swift.Bool)], SwiftSignalKit.NoError> {
    get
  }
  final public var dismissBotWebViews: SwiftSignalKit.Signal<[Swift.Int64], SwiftSignalKit.NoError> {
    get
  }
  final public var termsOfServiceUpdate: SwiftSignalKit.Signal<TelegramCore.TermsOfServiceUpdate?, SwiftSignalKit.NoError> {
    get
  }
  final public var appUpdateInfo: SwiftSignalKit.Signal<TelegramCore.AppUpdateInfo?, SwiftSignalKit.NoError> {
    get
  }
  final public var appliedIncomingReadMessages: SwiftSignalKit.Signal<[PostboxKit.MessageId], SwiftSignalKit.NoError> {
    get
  }
  final public var groupCallParticipantUpdates: SwiftSignalKit.Signal<[(Swift.Int64, TelegramCore.GroupCallParticipantsContext.Update)], SwiftSignalKit.NoError> {
    get
  }
  final public var deletedMessages: SwiftSignalKit.Signal<[TelegramCore.DeletedMessageId], SwiftSignalKit.NoError> {
    get
  }
  final public func pollStateUpdateCompletion() -> SwiftSignalKit.Signal<[PostboxKit.MessageId], SwiftSignalKit.NoError>
  final public func updatedPeersNearby() -> SwiftSignalKit.Signal<[TelegramCore.PeerNearby], SwiftSignalKit.NoError>
  final public func updatedWebpage(_ webpageId: PostboxKit.MediaId) -> SwiftSignalKit.Signal<TelegramCore.TelegramMediaWebpage, SwiftSignalKit.NoError>
  final public func processIncomingCallUpdate(data: Foundation.Data, completion: @escaping ((TelegramCore.CallSessionRingingState, TelegramCore.CallSession)?) -> Swift.Void)
  final public func standalonePollDifference() -> SwiftSignalKit.Signal<Swift.Bool, SwiftSignalKit.NoError>
  public static func extractIncomingCallUpdate(data: Foundation.Data) -> TelegramCore.AccountStateManager.IncomingCallUpdate?
  @objc deinit
}
public func messagesForNotification(transaction: PostboxKit.Transaction, id: PostboxKit.MessageId, alwaysReturnMessage: Swift.Bool) -> (messages: [PostboxKit.Message], notify: Swift.Bool, sound: TelegramCore.PeerMessageSound, displayContents: Swift.Bool, threadData: TelegramCore.MessageHistoryThreadData?)
public enum TelegramDeviceContactImportedData : PostboxKit.PostboxCoding {
  case imported(data: TelegramCore.ImportableDeviceContactData, importedByCount: Swift.Int32, peerId: PostboxKit.PeerId?)
  case retryLater
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
}
public class ConsumablePersonalMentionMessageAttribute : PostboxKit.MessageAttribute {
  final public let consumed: Swift.Bool
  final public let pending: Swift.Bool
  public init(consumed: Swift.Bool, pending: Swift.Bool)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public let scheduleWhenOnlineTimestamp: Swift.Int32
public class OutgoingScheduleInfoMessageAttribute : PostboxKit.MessageAttribute {
  final public let scheduleTime: Swift.Int32
  public init(scheduleTime: Swift.Int32)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func withUpdatedScheduleTime(_ scheduleTime: Swift.Int32) -> TelegramCore.OutgoingScheduleInfoMessageAttribute
  @objc deinit
}
extension PostboxKit.Message {
  final public var scheduleTime: Swift.Int32? {
    get
  }
}
public enum PhoneCallDiscardReason : Swift.Int32 {
  case missed
  case disconnect
  case hangup
  case busy
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum SentSecureValueType : Swift.Int32 {
  case personalDetails
  case passport
  case driversLicense
  case idCard
  case address
  case bankStatement
  case utilityBill
  case rentalAgreement
  case phone
  case email
  case internalPassport
  case passportRegistration
  case temporaryRegistration
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum TelegramMediaActionType : PostboxKit.PostboxCoding, Swift.Equatable {
  public enum ForumTopicEditComponent : PostboxKit.PostboxCoding, Swift.Equatable {
    case title(Swift.String)
    case iconFileId(Swift.Int64?)
    case isClosed(Swift.Bool)
    case isHidden(Swift.Bool)
    public init(decoder: PostboxKit.PostboxDecoder)
    public func encode(_ encoder: PostboxKit.PostboxEncoder)
    public static func == (a: TelegramCore.TelegramMediaActionType.ForumTopicEditComponent, b: TelegramCore.TelegramMediaActionType.ForumTopicEditComponent) -> Swift.Bool
  }
  case unknown
  case groupCreated(title: Swift.String)
  case addedMembers(peerIds: [PostboxKit.PeerId])
  case removedMembers(peerIds: [PostboxKit.PeerId])
  case photoUpdated(image: TelegramCore.TelegramMediaImage?)
  case titleUpdated(title: Swift.String)
  case pinnedMessageUpdated
  case joinedByLink(inviter: PostboxKit.PeerId)
  case channelMigratedFromGroup(title: Swift.String, groupId: PostboxKit.PeerId)
  case groupMigratedToChannel(channelId: PostboxKit.PeerId)
  case historyCleared
  case historyScreenshot
  case messageAutoremoveTimeoutUpdated(period: Swift.Int32, autoSettingSource: PostboxKit.PeerId?)
  case gameScore(gameId: Swift.Int64, score: Swift.Int32)
  case phoneCall(callId: Swift.Int64, discardReason: TelegramCore.PhoneCallDiscardReason?, duration: Swift.Int32?, isVideo: Swift.Bool)
  case paymentSent(currency: Swift.String, totalAmount: Swift.Int64, invoiceSlug: Swift.String?, isRecurringInit: Swift.Bool, isRecurringUsed: Swift.Bool)
  case customText(text: Swift.String, entities: [TelegramCore.MessageTextEntity])
  case botDomainAccessGranted(domain: Swift.String)
  case botSentSecureValues(types: [TelegramCore.SentSecureValueType])
  case peerJoined
  case phoneNumberRequest
  case geoProximityReached(from: PostboxKit.PeerId, to: PostboxKit.PeerId, distance: Swift.Int32)
  case groupPhoneCall(callId: Swift.Int64, accessHash: Swift.Int64, scheduleDate: Swift.Int32?, duration: Swift.Int32?)
  case inviteToGroupPhoneCall(callId: Swift.Int64, accessHash: Swift.Int64, peerIds: [PostboxKit.PeerId])
  case setChatTheme(emoji: Swift.String)
  case joinedByRequest
  case webViewData(Swift.String)
  case giftPremium(currency: Swift.String, amount: Swift.Int64, months: Swift.Int32)
  case topicCreated(title: Swift.String, iconColor: Swift.Int32, iconFileId: Swift.Int64?)
  case topicEdited(components: [TelegramCore.TelegramMediaActionType.ForumTopicEditComponent])
  case suggestedProfilePhoto(image: TelegramCore.TelegramMediaImage?)
  case attachMenuBotAllowed
  case requestedPeer(buttonId: Swift.Int32, peerId: PostboxKit.PeerId)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public var peerIds: [PostboxKit.PeerId] {
    get
  }
  public static func == (a: TelegramCore.TelegramMediaActionType, b: TelegramCore.TelegramMediaActionType) -> Swift.Bool
}
final public class TelegramMediaAction : PostboxKit.Media {
  final public let id: PostboxKit.MediaId?
  final public var peerIds: [PostboxKit.PeerId] {
    get
  }
  final public let action: TelegramCore.TelegramMediaActionType
  final public func preventsAutomaticMessageSendingFailure() -> Swift.Bool
  public init(action: TelegramCore.TelegramMediaActionType)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to other: PostboxKit.Media) -> Swift.Bool
  final public func isSemanticallyEqual(to other: PostboxKit.Media) -> Swift.Bool
  @objc deinit
}
public enum SynchronizeInstalledStickerPacksOperationNamespace : Swift.Int32 {
  case stickers
  case masks
  case emoji
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
final public class SynchronizeInstalledStickerPacksOperation : PostboxKit.PostboxCoding {
  final public let previousPacks: [PostboxKit.ItemCollectionId]
  final public let archivedPacks: [PostboxKit.ItemCollectionId]
  final public let noDelay: Swift.Bool
  public init(previousPacks: [PostboxKit.ItemCollectionId], archivedPacks: [PostboxKit.ItemCollectionId], noDelay: Swift.Bool)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
final public class SynchronizeMarkFeaturedStickerPacksAsSeenOperation : PostboxKit.PostboxCoding {
  final public let ids: [PostboxKit.ItemCollectionId]
  public init(ids: [PostboxKit.ItemCollectionId])
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public enum GroupsInCommonDataState : Swift.Equatable {
  case loading
  case ready(canLoadMore: Swift.Bool)
  public static func == (a: TelegramCore.GroupsInCommonDataState, b: TelegramCore.GroupsInCommonDataState) -> Swift.Bool
}
public struct GroupsInCommonState : Swift.Equatable {
  public var peers: [PostboxKit.RenderedPeer]
  public var count: Swift.Int?
  public var dataState: TelegramCore.GroupsInCommonDataState
  public static func == (a: TelegramCore.GroupsInCommonState, b: TelegramCore.GroupsInCommonState) -> Swift.Bool
}
final public class GroupsInCommonContext {
  final public var state: SwiftSignalKit.Signal<TelegramCore.GroupsInCommonState, SwiftSignalKit.NoError> {
    get
  }
  public init(account: TelegramCore.Account, peerId: PostboxKit.PeerId, hintGroupInCommon: PostboxKit.PeerId? = nil)
  final public func loadMore()
  @objc deinit
}
public struct SecureIdPassportValue : Swift.Equatable {
  public var identifier: Swift.String
  public var expiryDate: TelegramCore.SecureIdDate?
  public var verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference]
  public var translations: [TelegramCore.SecureIdVerificationDocumentReference]
  public var selfieDocument: TelegramCore.SecureIdVerificationDocumentReference?
  public var frontSideDocument: TelegramCore.SecureIdVerificationDocumentReference?
  public init(identifier: Swift.String, expiryDate: TelegramCore.SecureIdDate?, verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference], translations: [TelegramCore.SecureIdVerificationDocumentReference], selfieDocument: TelegramCore.SecureIdVerificationDocumentReference?, frontSideDocument: TelegramCore.SecureIdVerificationDocumentReference?)
  public static func == (lhs: TelegramCore.SecureIdPassportValue, rhs: TelegramCore.SecureIdPassportValue) -> Swift.Bool
}
public struct CancelAccountResetData : Swift.Equatable {
  public let type: TelegramCore.SentAuthorizationCodeType
  public let hash: Swift.String
  public let timeout: Swift.Int32?
  public let nextType: TelegramCore.AuthorizationCodeNextType?
  public static func == (a: TelegramCore.CancelAccountResetData, b: TelegramCore.CancelAccountResetData) -> Swift.Bool
}
public enum RequestCancelAccountResetDataError {
  case limitExceeded
  case generic
  public static func == (a: TelegramCore.RequestCancelAccountResetDataError, b: TelegramCore.RequestCancelAccountResetDataError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CancelAccountResetError {
  case generic
  case invalidCode
  case codeExpired
  case limitExceeded
  public static func == (a: TelegramCore.CancelAccountResetError, b: TelegramCore.CancelAccountResetError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ChangeAccountPhoneNumberData : Swift.Equatable {
  public let type: TelegramCore.SentAuthorizationCodeType
  public let hash: Swift.String
  public let timeout: Swift.Int32?
  public let nextType: TelegramCore.AuthorizationCodeNextType?
  public static func == (lhs: TelegramCore.ChangeAccountPhoneNumberData, rhs: TelegramCore.ChangeAccountPhoneNumberData) -> Swift.Bool
}
public enum RequestChangeAccountPhoneNumberVerificationError {
  case invalidPhoneNumber
  case limitExceeded
  case phoneNumberOccupied
  case phoneBanned
  case generic
  public static func == (a: TelegramCore.RequestChangeAccountPhoneNumberVerificationError, b: TelegramCore.RequestChangeAccountPhoneNumberVerificationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ChangeAccountPhoneNumberError {
  case generic
  case invalidCode
  case codeExpired
  case limitExceeded
  public static func == (a: TelegramCore.ChangeAccountPhoneNumberError, b: TelegramCore.ChangeAccountPhoneNumberError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct NotificationInfoMessageAttributeFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public init()
  public static let muted: TelegramCore.NotificationInfoMessageAttributeFlags
  public static let personal: TelegramCore.NotificationInfoMessageAttributeFlags
  public typealias ArrayLiteralElement = TelegramCore.NotificationInfoMessageAttributeFlags
  public typealias Element = TelegramCore.NotificationInfoMessageAttributeFlags
  public typealias RawValue = Swift.Int32
}
public class NotificationInfoMessageAttribute : PostboxKit.MessageAttribute {
  final public let flags: TelegramCore.NotificationInfoMessageAttributeFlags
  public init(flags: TelegramCore.NotificationInfoMessageAttributeFlags)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class Contacts {
    final public func deleteContactPeerInteractively(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func deleteAllContacts() -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func resetSavedContacts() -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func updateContactName(peerId: PostboxKit.PeerId, firstName: Swift.String, lastName: Swift.String) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.UpdateContactNameError>
    final public func updateContactPhoto(peerId: PostboxKit.PeerId, resource: PostboxKit.MediaResource?, videoResource: PostboxKit.MediaResource?, videoStartTimestamp: Swift.Double?, markup: TelegramCore.UploadPeerPhotoMarkup?, mode: TelegramCore.SetCustomPeerPhotoMode, mapResourceToAvatarSizes: @escaping (PostboxKit.MediaResource, [TelegramCore.TelegramMediaImageRepresentation]) -> SwiftSignalKit.Signal<[Swift.Int : Foundation.Data], SwiftSignalKit.NoError>) -> SwiftSignalKit.Signal<TelegramCore.UpdatePeerPhotoStatus, TelegramCore.UploadPeerPhotoError>
    final public func deviceContactsImportedByCount(contacts: [(Swift.String, [TelegramCore.DeviceContactNormalizedPhoneNumber])]) -> SwiftSignalKit.Signal<[Swift.String : Swift.Int32], SwiftSignalKit.NoError>
    final public func importContact(firstName: Swift.String, lastName: Swift.String, phoneNumber: Swift.String) -> SwiftSignalKit.Signal<PostboxKit.PeerId?, SwiftSignalKit.NoError>
    final public func addContactInteractively(peerId: PostboxKit.PeerId, firstName: Swift.String, lastName: Swift.String, phoneNumber: Swift.String, addToPrivacyExceptions: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.AddContactError>
    final public func acceptAndShareContact(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.AcceptAndShareContactError>
    final public func searchRemotePeers(query: Swift.String) -> SwiftSignalKit.Signal<([TelegramCore.FoundPeer], [TelegramCore.FoundPeer]), SwiftSignalKit.NoError>
    final public func searchLocalPeers(query: Swift.String) -> SwiftSignalKit.Signal<[TelegramCore.EngineRenderedPeer], SwiftSignalKit.NoError>
    final public func searchContacts(query: Swift.String) -> SwiftSignalKit.Signal<([TelegramCore.EnginePeer], [TelegramCore.EnginePeer.Id : TelegramCore.EnginePeer.Presence]), SwiftSignalKit.NoError>
    final public func updateIsContactSynchronizationEnabled(isContactSynchronizationEnabled: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func findPeerByLocalContactIdentifier(identifier: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.EnginePeer?, SwiftSignalKit.NoError>
    @objc deinit
  }
}
public struct AppChangelogState : Swift.Codable {
  public var checkedVersion: Swift.String
  public var previousVersion: Swift.String
  public static var `default`: TelegramCore.AppChangelogState
  public init(checkedVersion: Swift.String, previousVersion: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum UpdatePinnedMessageError {
  case generic
  public static func == (a: TelegramCore.UpdatePinnedMessageError, b: TelegramCore.UpdatePinnedMessageError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PinnedMessageUpdate {
  case pin(id: PostboxKit.MessageId, silent: Swift.Bool, forThisPeerOnlyIfPossible: Swift.Bool)
  case clear(id: PostboxKit.MessageId)
}
public struct PixelDimensions : Swift.Equatable {
  public let width: Swift.Int32
  public let height: Swift.Int32
  public init(width: Swift.Int32, height: Swift.Int32)
  public static func == (a: TelegramCore.PixelDimensions, b: TelegramCore.PixelDimensions) -> Swift.Bool
}
extension TelegramCore.PixelDimensions {
  public init(_ size: CoreFoundation.CGSize)
  public var cgSize: CoreFoundation.CGSize {
    get
  }
}
public enum SecretChatOutgoingFileReference : PostboxKit.PostboxCoding {
  case remote(id: Swift.Int64, accessHash: Swift.Int64)
  case uploadedRegular(id: Swift.Int64, partCount: Swift.Int32, md5Digest: Swift.String, keyFingerprint: Swift.Int32)
  case uploadedLarge(id: Swift.Int64, partCount: Swift.Int32, keyFingerprint: Swift.Int32)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
}
public struct SecretChatOutgoingFile : PostboxKit.PostboxCoding {
  public let reference: TelegramCore.SecretChatOutgoingFileReference
  public let size: Swift.Int64
  public let key: TelegramCore.SecretFileEncryptionKey
  public init(reference: TelegramCore.SecretChatOutgoingFileReference, size: Swift.Int64, key: TelegramCore.SecretFileEncryptionKey)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
}
public enum SecretChatSequenceBasedLayer : Swift.Int32 {
  case layer46
  case layer73
  case layer101
  case layer144
  public var secretChatLayer: TelegramCore.SecretChatLayer {
    get
  }
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum SecretChatOutgoingOperationContents : PostboxKit.PostboxCoding {
  case initialHandshakeAccept(gA: PostboxKit.MemoryBuffer, accessHash: Swift.Int64, b: PostboxKit.MemoryBuffer)
  case sendMessage(layer: TelegramCore.SecretChatLayer, id: PostboxKit.MessageId, file: TelegramCore.SecretChatOutgoingFile?)
  case readMessagesContent(layer: TelegramCore.SecretChatLayer, actionGloballyUniqueId: Swift.Int64, globallyUniqueIds: [Swift.Int64])
  case deleteMessages(layer: TelegramCore.SecretChatLayer, actionGloballyUniqueId: Swift.Int64, globallyUniqueIds: [Swift.Int64])
  case screenshotMessages(layer: TelegramCore.SecretChatLayer, actionGloballyUniqueId: Swift.Int64, globallyUniqueIds: [Swift.Int64], messageId: PostboxKit.MessageId)
  case clearHistory(layer: TelegramCore.SecretChatLayer, actionGloballyUniqueId: Swift.Int64)
  case resendOperations(layer: TelegramCore.SecretChatSequenceBasedLayer, actionGloballyUniqueId: Swift.Int64, fromSeqNo: Swift.Int32, toSeqNo: Swift.Int32)
  case reportLayerSupport(layer: TelegramCore.SecretChatLayer, actionGloballyUniqueId: Swift.Int64, layerSupport: Swift.Int32)
  case pfsRequestKey(layer: TelegramCore.SecretChatSequenceBasedLayer, actionGloballyUniqueId: Swift.Int64, rekeySessionId: Swift.Int64, a: PostboxKit.MemoryBuffer)
  case pfsAcceptKey(layer: TelegramCore.SecretChatSequenceBasedLayer, actionGloballyUniqueId: Swift.Int64, rekeySessionId: Swift.Int64, gA: PostboxKit.MemoryBuffer, b: PostboxKit.MemoryBuffer)
  case pfsAbortSession(layer: TelegramCore.SecretChatSequenceBasedLayer, actionGloballyUniqueId: Swift.Int64, rekeySessionId: Swift.Int64)
  case pfsCommitKey(layer: TelegramCore.SecretChatSequenceBasedLayer, actionGloballyUniqueId: Swift.Int64, rekeySessionId: Swift.Int64, keyFingerprint: Swift.Int64)
  case noop(layer: TelegramCore.SecretChatSequenceBasedLayer, actionGloballyUniqueId: Swift.Int64)
  case setMessageAutoremoveTimeout(layer: TelegramCore.SecretChatLayer, actionGloballyUniqueId: Swift.Int64, timeout: Swift.Int32, messageId: PostboxKit.MessageId)
  case terminate(reportSpam: Swift.Bool, requestRemoteHistoryRemoval: Swift.Bool)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
}
final public class SecretChatOutgoingOperation : PostboxKit.PostboxCoding {
  final public let contents: TelegramCore.SecretChatOutgoingOperationContents
  final public let mutable: Swift.Bool
  final public let delivered: Swift.Bool
  public init(contents: TelegramCore.SecretChatOutgoingOperationContents, mutable: Swift.Bool, delivered: Swift.Bool)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func withUpdatedDelivered(_ delivered: Swift.Bool) -> TelegramCore.SecretChatOutgoingOperation
  @objc deinit
}
public enum PeerNearby {
  case selfPeer(expires: Swift.Int32)
  case peer(id: PostboxKit.PeerId, expires: Swift.Int32, distance: Swift.Int32)
}
public enum PeerNearbyVisibilityUpdate {
  case visible(latitude: Swift.Double, longitude: Swift.Double)
  case location(latitude: Swift.Double, longitude: Swift.Double)
  case invisible
}
final public class PeersNearbyContext {
  public init(network: TelegramCore.Network, stateManager: TelegramCore.AccountStateManager, coordinate: (latitude: Swift.Double, longitude: Swift.Double))
  @objc deinit
  final public func get() -> SwiftSignalKit.Signal<[TelegramCore.PeerNearby]?, SwiftSignalKit.NoError>
}
public func updateChannelGeoLocation(postbox: PostboxKit.Postbox, network: TelegramCore.Network, channelId: PostboxKit.PeerId, coordinate: (latitude: Swift.Double, longitude: Swift.Double)?, address: Swift.String?) -> SwiftSignalKit.Signal<Swift.Bool, SwiftSignalKit.NoError>
public struct PeersNearbyState : Swift.Codable, Swift.Equatable {
  public var visibilityExpires: Swift.Int32?
  public static var `default`: TelegramCore.PeersNearbyState
  public init(visibilityExpires: Swift.Int32?)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.PeersNearbyState, b: TelegramCore.PeersNearbyState) -> Swift.Bool
}
public enum JoinChannelError {
  case generic
  case tooMuchJoined
  case tooMuchUsers
  case inviteRequestSent
  public static func == (a: TelegramCore.JoinChannelError, b: TelegramCore.JoinChannelError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class BoxedMessage : ObjectiveC.NSObject {
  final public let body: Any
  public init(_ body: Any)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Serialization : ObjectiveC.NSObject, MtProtoKit.MTSerialization {
  @objc public func currentLayer() -> Swift.UInt
  @objc public func parseMessage(_ data: Foundation.Data!) -> Any!
  @objc public func exportAuthorization(_ datacenterId: Swift.Int32, data: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSData?>) -> MtProtoKit.MTExportAuthorizationResponseParser!
  @objc public func importAuthorization(_ authId: Swift.Int64, bytes: Foundation.Data!) -> Foundation.Data!
  @objc public func requestDatacenterAddress(with data: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSData?>) -> MtProtoKit.MTRequestDatacenterAddressListParser!
  @objc public func requestNoop(_ data: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSData?>!) -> MtProtoKit.MTRequestNoopParser!
  @objc override dynamic public init()
  @objc deinit
}
public enum ConvertGroupToSupergroupError {
  case generic
  case tooManyChannels
  public static func == (a: TelegramCore.ConvertGroupToSupergroupError, b: TelegramCore.ConvertGroupToSupergroupError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ConvertGroupToGigagroupError {
  case generic
  public static func == (a: TelegramCore.ConvertGroupToGigagroupError, b: TelegramCore.ConvertGroupToGigagroupError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func convertGroupToGigagroup(account: TelegramCore.Account, peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.ConvertGroupToGigagroupError>
final public class EmojiSearchCategories : Swift.Equatable, Swift.Codable {
  public enum Kind : Swift.Int64 {
    case emoji
    case status
    case avatar
    public init?(rawValue: Swift.Int64)
    public typealias RawValue = Swift.Int64
    public var rawValue: Swift.Int64 {
      get
    }
  }
  public struct Group : Swift.Codable, Swift.Equatable {
    public var id: Swift.Int64
    public var title: Swift.String
    public var identifiers: [Swift.String]
    public init(id: Swift.Int64, title: Swift.String, identifiers: [Swift.String])
    public init(from decoder: Swift.Decoder) throws
    public static func == (a: TelegramCore.EmojiSearchCategories.Group, b: TelegramCore.EmojiSearchCategories.Group) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
  }
  final public let hash: Swift.Int32
  final public let groups: [TelegramCore.EmojiSearchCategories.Group]
  public init(hash: Swift.Int32, groups: [TelegramCore.EmojiSearchCategories.Group])
  public static func == (lhs: TelegramCore.EmojiSearchCategories, rhs: TelegramCore.EmojiSearchCategories) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public struct PremiumPromoConfiguration : Swift.Codable, Swift.Equatable {
  public struct PremiumProductOption : Swift.Codable, Swift.Equatable {
    public let isCurrent: Swift.Bool
    public let months: Swift.Int32
    public let currency: Swift.String
    public let amount: Swift.Int64
    public let botUrl: Swift.String
    public let transactionId: Swift.String?
    public let availableForUpgrade: Swift.Bool
    public let storeProductId: Swift.String?
    public init(isCurrent: Swift.Bool, months: Swift.Int32, currency: Swift.String, amount: Swift.Int64, botUrl: Swift.String, transactionId: Swift.String?, availableForUpgrade: Swift.Bool, storeProductId: Swift.String?)
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
    public static func == (a: TelegramCore.PremiumPromoConfiguration.PremiumProductOption, b: TelegramCore.PremiumPromoConfiguration.PremiumProductOption) -> Swift.Bool
  }
  public var status: Swift.String
  public var statusEntities: [TelegramCore.MessageTextEntity]
  public var videos: [Swift.String : TelegramCore.TelegramMediaFile]
  public var premiumProductOptions: [TelegramCore.PremiumPromoConfiguration.PremiumProductOption]
  public static var defaultValue: TelegramCore.PremiumPromoConfiguration {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.PremiumPromoConfiguration, b: TelegramCore.PremiumPromoConfiguration) -> Swift.Bool
}
public func clearPeerUnseenPersonalMessagesInteractively(account: TelegramCore.Account, peerId: PostboxKit.PeerId, threadId: Swift.Int64?) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
public func clearPeerUnseenReactionsInteractively(account: TelegramCore.Account, peerId: PostboxKit.PeerId, threadId: Swift.Int64?) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
public enum GrantSecureIdAccessError {
  case generic
  public static func == (a: TelegramCore.GrantSecureIdAccessError, b: TelegramCore.GrantSecureIdAccessError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func grantSecureIdAccess(network: TelegramCore.Network, peerId: PostboxKit.PeerId, publicKey: Swift.String, scope: Swift.String, opaquePayload: Foundation.Data, opaqueNonce: Foundation.Data, values: [TelegramCore.SecureIdValueWithContext], requestedFields: [TelegramCore.SecureIdRequestedFormField]) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.GrantSecureIdAccessError>
public enum RecentPeers {
  case peers([PostboxKit.Peer])
  case disabled
}
public func _internal_getRecentPeers(transaction: PostboxKit.Transaction) -> [PostboxKit.PeerId]
public func telegramWallpapers(postbox: PostboxKit.Postbox, network: TelegramCore.Network, forceUpdate: Swift.Bool = false) -> SwiftSignalKit.Signal<[TelegramCore.TelegramWallpaper], SwiftSignalKit.NoError>
public enum UploadWallpaperStatus {
  case progress(Swift.Float)
  case complete(TelegramCore.TelegramWallpaper)
}
public enum UploadWallpaperError {
  case generic
  public static func == (a: TelegramCore.UploadWallpaperError, b: TelegramCore.UploadWallpaperError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func uploadWallpaper(account: TelegramCore.Account, resource: PostboxKit.MediaResource, mimeType: Swift.String = "image/jpeg", settings: TelegramCore.WallpaperSettings) -> SwiftSignalKit.Signal<TelegramCore.UploadWallpaperStatus, TelegramCore.UploadWallpaperError>
public enum GetWallpaperError {
  case generic
  public static func == (a: TelegramCore.GetWallpaperError, b: TelegramCore.GetWallpaperError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func getWallpaper(network: TelegramCore.Network, slug: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.TelegramWallpaper, TelegramCore.GetWallpaperError>
public func saveWallpaper(account: TelegramCore.Account, wallpaper: TelegramCore.TelegramWallpaper) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public func deleteWallpaper(account: TelegramCore.Account, wallpaper: TelegramCore.TelegramWallpaper) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public func installWallpaper(account: TelegramCore.Account, wallpaper: TelegramCore.TelegramWallpaper) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public func resetWallpapers(account: TelegramCore.Account) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public struct BotCommand : PostboxKit.PostboxCoding, Swift.Hashable {
  public let text: Swift.String
  public let description: Swift.String
  public init(text: Swift.String, description: Swift.String)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.BotCommand, b: TelegramCore.BotCommand) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum BotMenuButton : PostboxKit.PostboxCoding, Swift.Hashable {
  case commands
  case webView(text: Swift.String, url: Swift.String)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.BotMenuButton, b: TelegramCore.BotMenuButton) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class BotInfo : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let description: Swift.String
  final public let photo: TelegramCore.TelegramMediaImage?
  final public let video: TelegramCore.TelegramMediaFile?
  final public let commands: [TelegramCore.BotCommand]
  final public let menuButton: TelegramCore.BotMenuButton
  public init(description: Swift.String, photo: TelegramCore.TelegramMediaImage?, video: TelegramCore.TelegramMediaFile?, commands: [TelegramCore.BotCommand], menuButton: TelegramCore.BotMenuButton)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.BotInfo, rhs: TelegramCore.BotInfo) -> Swift.Bool
  @objc deinit
}
public enum CreateGroupError {
  case generic
  case privacy
  case restricted
  case tooMuchJoined
  case tooMuchLocationBasedGroups
  case serverProvided(Swift.String)
}
public enum NotificationTokenType {
  case aps(encrypt: Swift.Bool)
  case voip
}
@_hasMissingDesignatedInitializers final public class AccountRecordsView<Types> where Types : TelegramCore.AccountManagerTypes {
  final public let records: [TelegramCore.AccountRecord<Types.Attribute>]
  final public let currentRecord: TelegramCore.AccountRecord<Types.Attribute>?
  final public let currentAuthAccount: TelegramCore.AuthAccountRecord<Types.Attribute>?
  @objc deinit
}
public enum TelegramBaseTheme : Swift.Int32, Swift.Codable {
  case classic
  case day
  case night
  case tinted
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
extension Swift.UInt32 {
  public init(bitPattern: Swift.UInt32)
}
final public class TelegramThemeSettings : Swift.Codable, Swift.Equatable {
  public static func == (lhs: TelegramCore.TelegramThemeSettings, rhs: TelegramCore.TelegramThemeSettings) -> Swift.Bool
  final public let baseTheme: TelegramCore.TelegramBaseTheme
  final public let accentColor: Swift.UInt32
  final public let outgoingAccentColor: Swift.UInt32?
  final public let messageColors: [Swift.UInt32]
  final public let animateMessageColors: Swift.Bool
  final public let wallpaper: TelegramCore.TelegramWallpaper?
  public init(baseTheme: TelegramCore.TelegramBaseTheme, accentColor: Swift.UInt32, outgoingAccentColor: Swift.UInt32?, messageColors: [Swift.UInt32], animateMessageColors: Swift.Bool, wallpaper: TelegramCore.TelegramWallpaper?)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public struct TelegramThemeNativeCodable : Swift.Codable {
  public let value: TelegramCore.TelegramTheme
  public init(_ value: TelegramCore.TelegramTheme)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
final public class TelegramTheme : Swift.Equatable {
  final public let id: Swift.Int64
  final public let accessHash: Swift.Int64
  final public let slug: Swift.String
  final public let emoticon: Swift.String?
  final public let title: Swift.String
  final public let file: TelegramCore.TelegramMediaFile?
  final public let settings: [TelegramCore.TelegramThemeSettings]?
  final public let isCreator: Swift.Bool
  final public let isDefault: Swift.Bool
  final public let installCount: Swift.Int32?
  public init(id: Swift.Int64, accessHash: Swift.Int64, slug: Swift.String, emoticon: Swift.String?, title: Swift.String, file: TelegramCore.TelegramMediaFile?, settings: [TelegramCore.TelegramThemeSettings]?, isCreator: Swift.Bool, isDefault: Swift.Bool, installCount: Swift.Int32?)
  public static func == (lhs: TelegramCore.TelegramTheme, rhs: TelegramCore.TelegramTheme) -> Swift.Bool
  @objc deinit
}
public enum UserPresenceStatus : Swift.Comparable, PostboxKit.PostboxCoding {
  case none
  case present(until: Swift.Int32)
  case recently
  case lastWeek
  case lastMonth
  public static func < (lhs: TelegramCore.UserPresenceStatus, rhs: TelegramCore.UserPresenceStatus) -> Swift.Bool
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.UserPresenceStatus, b: TelegramCore.UserPresenceStatus) -> Swift.Bool
}
final public class TelegramUserPresence : PostboxKit.PeerPresence, Swift.Equatable {
  final public let status: TelegramCore.UserPresenceStatus
  final public let lastActivity: Swift.Int32
  public init(status: TelegramCore.UserPresenceStatus, lastActivity: Swift.Int32)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.TelegramUserPresence, rhs: TelegramCore.TelegramUserPresence) -> Swift.Bool
  final public func isEqual(to: PostboxKit.PeerPresence) -> Swift.Bool
  @objc deinit
}
public struct SecureIdBankStatementValue : Swift.Equatable {
  public var verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference]
  public var translations: [TelegramCore.SecureIdVerificationDocumentReference]
  public init(verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference], translations: [TelegramCore.SecureIdVerificationDocumentReference])
  public static func == (lhs: TelegramCore.SecureIdBankStatementValue, rhs: TelegramCore.SecureIdBankStatementValue) -> Swift.Bool
}
public enum AssignAppStoreTransactionError {
  case generic
  case timeout
  case serverProvided
  public static func == (a: TelegramCore.AssignAppStoreTransactionError, b: TelegramCore.AssignAppStoreTransactionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AppStoreTransactionPurpose {
  case subscription
  case upgrade
  case gift(peerId: TelegramCore.EnginePeer.Id, currency: Swift.String, amount: Swift.Int64)
  case restore
}
public enum RestoreAppStoreReceiptError {
  case generic
  public static func == (a: TelegramCore.RestoreAppStoreReceiptError, b: TelegramCore.RestoreAppStoreReceiptError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SecureFileMediaResourceId {
  public let fileId: Swift.Int64
  public init(fileId: Swift.Int64)
  public var uniqueId: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
final public class SecureFileMediaResource : TelegramCore.TelegramMediaResource {
  final public let file: TelegramCore.SecureIdFileReference
  final public var id: PostboxKit.MediaResourceId {
    get
  }
  final public var datacenterId: Swift.Int {
    get
  }
  final public var size: Swift.Int64? {
    get
  }
  public init(file: TelegramCore.SecureIdFileReference)
  required public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to: PostboxKit.MediaResource) -> Swift.Bool
  @objc deinit
}
public struct RenderedChannelParticipant : Swift.Equatable {
  public let participant: TelegramCore.ChannelParticipant
  public let peer: PostboxKit.Peer
  public let peers: [PostboxKit.PeerId : PostboxKit.Peer]
  public let presences: [PostboxKit.PeerId : PostboxKit.PeerPresence]
  public init(participant: TelegramCore.ChannelParticipant, peer: PostboxKit.Peer, peers: [PostboxKit.PeerId : PostboxKit.Peer] = [:], presences: [PostboxKit.PeerId : PostboxKit.PeerPresence] = [:])
  public static func == (lhs: TelegramCore.RenderedChannelParticipant, rhs: TelegramCore.RenderedChannelParticipant) -> Swift.Bool
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class Payments {
    final public func getBankCardInfo(cardNumber: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.BankCardInfo?, SwiftSignalKit.NoError>
    final public func fetchBotPaymentInvoice(source: TelegramCore.BotPaymentInvoiceSource) -> SwiftSignalKit.Signal<TelegramCore.TelegramMediaInvoice, TelegramCore.BotPaymentFormRequestError>
    final public func fetchBotPaymentForm(source: TelegramCore.BotPaymentInvoiceSource, themeParams: [Swift.String : Any]?) -> SwiftSignalKit.Signal<TelegramCore.BotPaymentForm, TelegramCore.BotPaymentFormRequestError>
    final public func validateBotPaymentForm(saveInfo: Swift.Bool, source: TelegramCore.BotPaymentInvoiceSource, formInfo: TelegramCore.BotPaymentRequestedInfo) -> SwiftSignalKit.Signal<TelegramCore.BotPaymentValidatedFormInfo, TelegramCore.ValidateBotPaymentFormError>
    final public func sendBotPaymentForm(source: TelegramCore.BotPaymentInvoiceSource, formId: Swift.Int64, validatedInfoId: Swift.String?, shippingOptionId: Swift.String?, tipAmount: Swift.Int64?, credentials: TelegramCore.BotPaymentCredentials) -> SwiftSignalKit.Signal<TelegramCore.SendBotPaymentResult, TelegramCore.SendBotPaymentFormError>
    final public func requestBotPaymentReceipt(messageId: PostboxKit.MessageId) -> SwiftSignalKit.Signal<TelegramCore.BotPaymentReceipt, TelegramCore.RequestBotPaymentReceiptError>
    final public func clearBotPaymentInfo(info: TelegramCore.BotPaymentInfo) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func sendAppStoreReceipt(receipt: Foundation.Data, purpose: TelegramCore.AppStoreTransactionPurpose) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.AssignAppStoreTransactionError>
    final public func canPurchasePremium(purpose: TelegramCore.AppStoreTransactionPurpose) -> SwiftSignalKit.Signal<Swift.Bool, SwiftSignalKit.NoError>
    @objc deinit
  }
}
public enum ProxyServerStatus : Swift.Equatable {
  case checking
  case notAvailable
  case available(Swift.Double)
  public static func == (a: TelegramCore.ProxyServerStatus, b: TelegramCore.ProxyServerStatus) -> Swift.Bool
}
final public class ProxyServersStatuses {
  public init(network: TelegramCore.Network, servers: SwiftSignalKit.Signal<[TelegramCore.ProxyServerSettings], SwiftSignalKit.NoError>)
  final public func statuses() -> SwiftSignalKit.Signal<[TelegramCore.ProxyServerSettings : TelegramCore.ProxyServerStatus], SwiftSignalKit.NoError>
  @objc deinit
}
public enum ServerProvidedSuggestion : Swift.String {
  case autoarchivePopular
  case newcomerTicks
  case validatePhoneNumber
  case validatePassword
  case setupPassword
  case upgradePremium
  case annualPremium
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public func getServerProvidedSuggestions(account: TelegramCore.Account) -> SwiftSignalKit.Signal<[TelegramCore.ServerProvidedSuggestion], SwiftSignalKit.NoError>
public func dismissServerProvidedSuggestion(account: TelegramCore.Account, suggestion: TelegramCore.ServerProvidedSuggestion) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
public enum PeerSpecificServerProvidedSuggestion : Swift.String {
  case convertToGigagroup
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public func getPeerSpecificServerProvidedSuggestions(postbox: PostboxKit.Postbox, peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<[TelegramCore.PeerSpecificServerProvidedSuggestion], SwiftSignalKit.NoError>
public func dismissPeerSpecificServerProvidedSuggestion(account: TelegramCore.Account, peerId: PostboxKit.PeerId, suggestion: TelegramCore.PeerSpecificServerProvidedSuggestion) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
public struct StickerPackCollectionInfoFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public init()
  public init(_ flags: TelegramCore.StickerPackCollectionInfoFlags)
  public static let isMasks: TelegramCore.StickerPackCollectionInfoFlags
  public static let isOfficial: TelegramCore.StickerPackCollectionInfoFlags
  public static let isAnimated: TelegramCore.StickerPackCollectionInfoFlags
  public static let isVideo: TelegramCore.StickerPackCollectionInfoFlags
  public static let isEmoji: TelegramCore.StickerPackCollectionInfoFlags
  public typealias ArrayLiteralElement = TelegramCore.StickerPackCollectionInfoFlags
  public typealias Element = TelegramCore.StickerPackCollectionInfoFlags
  public typealias RawValue = Swift.Int32
}
final public class StickerPackCollectionInfo : PostboxKit.ItemCollectionInfo, Swift.Equatable {
  final public let id: PostboxKit.ItemCollectionId
  final public let flags: TelegramCore.StickerPackCollectionInfoFlags
  final public let accessHash: Swift.Int64
  final public let title: Swift.String
  final public let shortName: Swift.String
  final public let thumbnail: TelegramCore.TelegramMediaImageRepresentation?
  final public let thumbnailFileId: Swift.Int64?
  final public let immediateThumbnailData: Foundation.Data?
  final public let hash: Swift.Int32
  final public let count: Swift.Int32
  public init(id: PostboxKit.ItemCollectionId, flags: TelegramCore.StickerPackCollectionInfoFlags, accessHash: Swift.Int64, title: Swift.String, shortName: Swift.String, thumbnail: TelegramCore.TelegramMediaImageRepresentation?, thumbnailFileId: Swift.Int64?, immediateThumbnailData: Foundation.Data?, hash: Swift.Int32, count: Swift.Int32)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.StickerPackCollectionInfo, rhs: TelegramCore.StickerPackCollectionInfo) -> Swift.Bool
  @objc deinit
}
public struct MessageNotificationSettings : Swift.Codable, Swift.Equatable {
  public var enabled: Swift.Bool
  public var displayPreviews: Swift.Bool
  public var sound: TelegramCore.PeerMessageSound
  public static var defaultSettings: TelegramCore.MessageNotificationSettings {
    get
  }
  public init(enabled: Swift.Bool, displayPreviews: Swift.Bool, sound: TelegramCore.PeerMessageSound)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.MessageNotificationSettings, b: TelegramCore.MessageNotificationSettings) -> Swift.Bool
}
public struct GlobalNotificationSettingsSet : Swift.Codable, Swift.Equatable {
  public var privateChats: TelegramCore.MessageNotificationSettings
  public var groupChats: TelegramCore.MessageNotificationSettings
  public var channels: TelegramCore.MessageNotificationSettings
  public var contactsJoined: Swift.Bool
  public static var defaultSettings: TelegramCore.GlobalNotificationSettingsSet {
    get
  }
  public init(privateChats: TelegramCore.MessageNotificationSettings, groupChats: TelegramCore.MessageNotificationSettings, channels: TelegramCore.MessageNotificationSettings, contactsJoined: Swift.Bool)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.GlobalNotificationSettingsSet, b: TelegramCore.GlobalNotificationSettingsSet) -> Swift.Bool
}
public struct GlobalNotificationSettings : Swift.Codable {
  public var toBeSynchronized: TelegramCore.GlobalNotificationSettingsSet?
  public var remote: TelegramCore.GlobalNotificationSettingsSet
  public static var defaultSettings: TelegramCore.GlobalNotificationSettings
  public var effective: TelegramCore.GlobalNotificationSettingsSet {
    get
  }
  public var postboxAccessor: PostboxKit.PostboxGlobalNotificationSettings {
    get
  }
  public init(toBeSynchronized: TelegramCore.GlobalNotificationSettingsSet?, remote: TelegramCore.GlobalNotificationSettingsSet)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ContentSettings : Swift.Equatable {
  public static var `default`: TelegramCore.ContentSettings
  public var ignoreContentRestrictionReasons: Swift.Set<Swift.String>
  public var addContentRestrictionReasons: [Swift.String]
  public init(ignoreContentRestrictionReasons: Swift.Set<Swift.String>, addContentRestrictionReasons: [Swift.String])
  public static func == (a: TelegramCore.ContentSettings, b: TelegramCore.ContentSettings) -> Swift.Bool
}
public func getContentSettings(transaction: PostboxKit.Transaction) -> TelegramCore.ContentSettings
public func getContentSettings(postbox: PostboxKit.Postbox) -> SwiftSignalKit.Signal<TelegramCore.ContentSettings, SwiftSignalKit.NoError>
public struct ContentSettingsConfiguration : Swift.Equatable {
  public static var `default`: TelegramCore.ContentSettingsConfiguration
  public var sensitiveContentEnabled: Swift.Bool
  public var canAdjustSensitiveContent: Swift.Bool
  public init(sensitiveContentEnabled: Swift.Bool, canAdjustSensitiveContent: Swift.Bool)
  public static func == (a: TelegramCore.ContentSettingsConfiguration, b: TelegramCore.ContentSettingsConfiguration) -> Swift.Bool
}
public func contentSettingsConfiguration(network: TelegramCore.Network) -> SwiftSignalKit.Signal<TelegramCore.ContentSettingsConfiguration, SwiftSignalKit.NoError>
public func updateRemoteContentSettingsConfiguration(postbox: PostboxKit.Postbox, network: TelegramCore.Network, sensitiveContentEnabled: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
final public class NotificationExceptionsList : Swift.Equatable {
  final public let peers: [PostboxKit.PeerId : PostboxKit.Peer]
  final public let settings: [PostboxKit.PeerId : TelegramCore.TelegramPeerNotificationSettings]
  public init(peers: [PostboxKit.PeerId : PostboxKit.Peer], settings: [PostboxKit.PeerId : TelegramCore.TelegramPeerNotificationSettings])
  public static func == (lhs: TelegramCore.NotificationExceptionsList, rhs: TelegramCore.NotificationExceptionsList) -> Swift.Bool
  @objc deinit
}
public struct TelegramPeerPhoto {
  public let image: TelegramCore.TelegramMediaImage
  public let reference: TelegramCore.TelegramMediaImageReference?
  public let date: Swift.Int32
  public let index: Swift.Int
  public let totalCount: Swift.Int
  public let messageId: PostboxKit.MessageId?
  public init(image: TelegramCore.TelegramMediaImage, reference: TelegramCore.TelegramMediaImageReference?, date: Swift.Int32, index: Swift.Int, totalCount: Swift.Int, messageId: PostboxKit.MessageId?)
}
public class NonPremiumMessageAttribute : PostboxKit.MessageAttribute {
  public var associatedMessageIds: [PostboxKit.MessageId]
  public init()
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public enum SaveCallDebugLogResult {
  case done
  case sendFullLog
  public static func == (a: TelegramCore.SaveCallDebugLogResult, b: TelegramCore.SaveCallDebugLogResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func currentLimitsConfiguration(transaction: PostboxKit.Transaction) -> TelegramCore.LimitsConfiguration
final public class EngineGroupCallDescription {
  final public let id: Swift.Int64
  final public let accessHash: Swift.Int64
  final public let title: Swift.String?
  final public let scheduleTimestamp: Swift.Int32?
  final public let subscribedToScheduled: Swift.Bool
  final public let isStream: Swift.Bool?
  public init(id: Swift.Int64, accessHash: Swift.Int64, title: Swift.String?, scheduleTimestamp: Swift.Int32?, subscribedToScheduled: Swift.Bool, isStream: Swift.Bool?)
  @objc deinit
}
extension TelegramCore.EngineGroupCallDescription {
  convenience public init(_ activeCall: TelegramCore.CachedChannelData.ActiveCall)
}
public enum UpdateSelectiveAccountPrivacySettingsType {
  case presence
  case groupInvitations
  case voiceCalls
  case voiceCallsP2P
  case profilePhoto
  case forwards
  case phoneNumber
  case voiceMessages
  public static func == (a: TelegramCore.UpdateSelectiveAccountPrivacySettingsType, b: TelegramCore.UpdateSelectiveAccountPrivacySettingsType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TelegramCore.SecureFileMediaResource : TelegramCore.TelegramMultipartFetchableResource, TelegramCore.EncryptedMediaResource {
  final public func decrypt(data: Foundation.Data, params: Any) -> Foundation.Data?
}
public func addAppLogEvent(postbox: PostboxKit.Postbox, time: Swift.Double = Date().timeIntervalSince1970, type: Swift.String, peerId: PostboxKit.PeerId? = nil, data: TelegramCore.JSON = .dictionary([:]))
public func invokeAppLogEventsSynchronization(postbox: PostboxKit.Postbox)
public enum TelegramPeerAccessHash : Swift.Hashable {
  case personal(Swift.Int64)
  case genericPublic(Swift.Int64)
  public var value: Swift.Int64 {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.TelegramPeerAccessHash, b: TelegramCore.TelegramPeerAccessHash) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class EngineChatList : Swift.Equatable {
  public enum Group {
    case root
    case archive
    public static func == (a: TelegramCore.EngineChatList.Group, b: TelegramCore.EngineChatList.Group) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias MessageTagSummaryInfo = PostboxKit.ChatListMessageTagSummaryInfo
  public enum PinnedItem {
    public typealias Id = PostboxKit.PinnedItemId
  }
  public enum RelativePosition {
    case later(than: TelegramCore.EngineChatList.Item.Index?)
    case earlier(than: TelegramCore.EngineChatList.Item.Index?)
  }
  public struct Draft : Swift.Equatable {
    public var text: Swift.String
    public var entities: [TelegramCore.MessageTextEntity]
    public init(text: Swift.String, entities: [TelegramCore.MessageTextEntity])
    public static func == (a: TelegramCore.EngineChatList.Draft, b: TelegramCore.EngineChatList.Draft) -> Swift.Bool
  }
  public struct ForumTopicData : Swift.Equatable {
    public var id: Swift.Int64
    public var title: Swift.String
    public var iconFileId: Swift.Int64?
    public var iconColor: Swift.Int32
    public var maxOutgoingReadMessageId: TelegramCore.EngineMessage.Id
    public var isUnread: Swift.Bool
    public init(id: Swift.Int64, title: Swift.String, iconFileId: Swift.Int64?, iconColor: Swift.Int32, maxOutgoingReadMessageId: TelegramCore.EngineMessage.Id, isUnread: Swift.Bool)
    public static func == (a: TelegramCore.EngineChatList.ForumTopicData, b: TelegramCore.EngineChatList.ForumTopicData) -> Swift.Bool
  }
  final public class Item : Swift.Equatable {
    public enum Id : Swift.Hashable {
      case chatList(TelegramCore.EnginePeer.Id)
      case forum(Swift.Int64)
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: TelegramCore.EngineChatList.Item.Id, b: TelegramCore.EngineChatList.Item.Id) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum PinnedIndex : Swift.Equatable, Swift.Comparable {
      case none
      case index(Swift.Int)
      public static func < (lhs: TelegramCore.EngineChatList.Item.PinnedIndex, rhs: TelegramCore.EngineChatList.Item.PinnedIndex) -> Swift.Bool
      public static func == (a: TelegramCore.EngineChatList.Item.PinnedIndex, b: TelegramCore.EngineChatList.Item.PinnedIndex) -> Swift.Bool
    }
    public enum Index : Swift.Equatable, Swift.Comparable {
      public typealias ChatList = PostboxKit.ChatListIndex
      case chatList(PostboxKit.ChatListIndex)
      case forum(pinnedIndex: TelegramCore.EngineChatList.Item.PinnedIndex, timestamp: Swift.Int32, threadId: Swift.Int64, namespace: TelegramCore.EngineMessage.Id.Namespace, id: TelegramCore.EngineMessage.Id.Id)
      public static func < (lhs: TelegramCore.EngineChatList.Item.Index, rhs: TelegramCore.EngineChatList.Item.Index) -> Swift.Bool
      public static func == (a: TelegramCore.EngineChatList.Item.Index, b: TelegramCore.EngineChatList.Item.Index) -> Swift.Bool
    }
    final public let id: TelegramCore.EngineChatList.Item.Id
    final public let index: TelegramCore.EngineChatList.Item.Index
    final public let messages: [TelegramCore.EngineMessage]
    final public let readCounters: TelegramCore.EnginePeerReadCounters?
    final public let isMuted: Swift.Bool
    final public let draft: TelegramCore.EngineChatList.Draft?
    final public let threadData: TelegramCore.MessageHistoryThreadData?
    final public let renderedPeer: TelegramCore.EngineRenderedPeer
    final public let presence: TelegramCore.EnginePeer.Presence?
    final public let hasUnseenMentions: Swift.Bool
    final public let hasUnseenReactions: Swift.Bool
    final public let forumTopicData: TelegramCore.EngineChatList.ForumTopicData?
    final public let topForumTopicItems: [TelegramCore.EngineChatList.ForumTopicData]
    final public let hasFailed: Swift.Bool
    final public let isContact: Swift.Bool
    final public let autoremoveTimeout: Swift.Int32?
    public init(id: TelegramCore.EngineChatList.Item.Id, index: TelegramCore.EngineChatList.Item.Index, messages: [TelegramCore.EngineMessage], readCounters: TelegramCore.EnginePeerReadCounters?, isMuted: Swift.Bool, draft: TelegramCore.EngineChatList.Draft?, threadData: TelegramCore.MessageHistoryThreadData?, renderedPeer: TelegramCore.EngineRenderedPeer, presence: TelegramCore.EnginePeer.Presence?, hasUnseenMentions: Swift.Bool, hasUnseenReactions: Swift.Bool, forumTopicData: TelegramCore.EngineChatList.ForumTopicData?, topForumTopicItems: [TelegramCore.EngineChatList.ForumTopicData], hasFailed: Swift.Bool, isContact: Swift.Bool, autoremoveTimeout: Swift.Int32?)
    public static func == (lhs: TelegramCore.EngineChatList.Item, rhs: TelegramCore.EngineChatList.Item) -> Swift.Bool
    @objc deinit
  }
  final public class GroupItem : Swift.Equatable {
    final public class Item : Swift.Equatable {
      final public let peer: TelegramCore.EngineRenderedPeer
      final public let isUnread: Swift.Bool
      public init(peer: TelegramCore.EngineRenderedPeer, isUnread: Swift.Bool)
      public static func == (lhs: TelegramCore.EngineChatList.GroupItem.Item, rhs: TelegramCore.EngineChatList.GroupItem.Item) -> Swift.Bool
      @objc deinit
    }
    final public let id: TelegramCore.EngineChatList.Group
    final public let topMessage: TelegramCore.EngineMessage?
    final public let items: [TelegramCore.EngineChatList.GroupItem.Item]
    final public let unreadCount: Swift.Int
    public init(id: TelegramCore.EngineChatList.Group, topMessage: TelegramCore.EngineMessage?, items: [TelegramCore.EngineChatList.GroupItem.Item], unreadCount: Swift.Int)
    public static func == (lhs: TelegramCore.EngineChatList.GroupItem, rhs: TelegramCore.EngineChatList.GroupItem) -> Swift.Bool
    @objc deinit
  }
  final public class AdditionalItem : Swift.Equatable {
    final public class PromoInfo : Swift.Equatable {
      public enum Content : Swift.Equatable {
        case proxy
        case psa(type: Swift.String, message: Swift.String?)
        public static func == (a: TelegramCore.EngineChatList.AdditionalItem.PromoInfo.Content, b: TelegramCore.EngineChatList.AdditionalItem.PromoInfo.Content) -> Swift.Bool
      }
      final public let content: TelegramCore.EngineChatList.AdditionalItem.PromoInfo.Content
      public init(content: TelegramCore.EngineChatList.AdditionalItem.PromoInfo.Content)
      public static func == (lhs: TelegramCore.EngineChatList.AdditionalItem.PromoInfo, rhs: TelegramCore.EngineChatList.AdditionalItem.PromoInfo) -> Swift.Bool
      @objc deinit
    }
    final public let item: TelegramCore.EngineChatList.Item
    final public let promoInfo: TelegramCore.EngineChatList.AdditionalItem.PromoInfo
    public init(item: TelegramCore.EngineChatList.Item, promoInfo: TelegramCore.EngineChatList.AdditionalItem.PromoInfo)
    public static func == (lhs: TelegramCore.EngineChatList.AdditionalItem, rhs: TelegramCore.EngineChatList.AdditionalItem) -> Swift.Bool
    @objc deinit
  }
  final public let items: [TelegramCore.EngineChatList.Item]
  final public let groupItems: [TelegramCore.EngineChatList.GroupItem]
  final public let additionalItems: [TelegramCore.EngineChatList.AdditionalItem]
  final public let hasEarlier: Swift.Bool
  final public let hasLater: Swift.Bool
  final public let isLoading: Swift.Bool
  public init(items: [TelegramCore.EngineChatList.Item], groupItems: [TelegramCore.EngineChatList.GroupItem], additionalItems: [TelegramCore.EngineChatList.AdditionalItem], hasEarlier: Swift.Bool, hasLater: Swift.Bool, isLoading: Swift.Bool)
  public static func == (lhs: TelegramCore.EngineChatList, rhs: TelegramCore.EngineChatList) -> Swift.Bool
  @objc deinit
}
extension TelegramCore.EngineChatList.Group {
  public init(_ group: PostboxKit.PeerGroupId)
  public func _asGroup() -> PostboxKit.PeerGroupId
}
extension TelegramCore.EngineChatList.RelativePosition {
  public init(_ position: PostboxKit.ChatListRelativePosition)
  public func _asPosition() -> PostboxKit.ChatListRelativePosition?
}
extension TelegramCore.EngineChatList {
  convenience public init(_ view: PostboxKit.ChatListView)
}
public enum SecretChatKeyValidity : PostboxKit.PostboxCoding, Swift.Equatable {
  case indefinite
  case sequenceBasedIndexRange(fromCanonicalIndex: Swift.Int32)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.SecretChatKeyValidity, rhs: TelegramCore.SecretChatKeyValidity) -> Swift.Bool
}
final public class SecretChatKey : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let fingerprint: Swift.Int64
  final public let key: PostboxKit.MemoryBuffer
  final public let validity: TelegramCore.SecretChatKeyValidity
  final public let useCount: Swift.Int32
  public init(fingerprint: Swift.Int64, key: PostboxKit.MemoryBuffer, validity: TelegramCore.SecretChatKeyValidity, useCount: Swift.Int32)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func withIncrementedUseCount() -> TelegramCore.SecretChatKey
  public static func == (lhs: TelegramCore.SecretChatKey, rhs: TelegramCore.SecretChatKey) -> Swift.Bool
  @objc deinit
}
final public class SecretChatKeychain : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let keys: [TelegramCore.SecretChatKey]
  public init(keys: [TelegramCore.SecretChatKey])
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func key(fingerprint: Swift.Int64) -> TelegramCore.SecretChatKey?
  final public func indefinitelyValidKey() -> TelegramCore.SecretChatKey?
  final public func latestKey(validForSequenceBasedCanonicalIndex index: Swift.Int32) -> TelegramCore.SecretChatKey?
  final public func withUpdatedKey(fingerprint: Swift.Int64, _ f: (TelegramCore.SecretChatKey?) -> TelegramCore.SecretChatKey?) -> TelegramCore.SecretChatKeychain
  public static func == (lhs: TelegramCore.SecretChatKeychain, rhs: TelegramCore.SecretChatKeychain) -> Swift.Bool
  @objc deinit
}
final public class EngineTotalReadCounters {
  public init(state: PostboxKit.ChatListTotalUnreadState)
  final public func count(for category: PostboxKit.ChatListTotalUnreadStateCategory, in statsType: PostboxKit.ChatListTotalUnreadStateStats, with tags: PostboxKit.PeerSummaryCounterTags) -> Swift.Int32
  @objc deinit
}
extension TelegramCore.EngineTotalReadCounters {
  final public func _asCounters() -> PostboxKit.ChatListTotalUnreadState
}
public struct EnginePeerReadCounters : Swift.Equatable {
  public var isMuted: Swift.Bool
  public init(state: PostboxKit.CombinedPeerReadState?, isMuted: Swift.Bool)
  public init(state: PostboxKit.ChatListViewReadState?)
  public init()
  public var count: Swift.Int32 {
    get
  }
  public var markedUnread: Swift.Bool {
    get
  }
  public var isUnread: Swift.Bool {
    get
  }
  public var hasEverRead: Swift.Bool {
    get
  }
  public func isOutgoingMessageIndexRead(_ index: TelegramCore.EngineMessage.Index) -> Swift.Bool
  public func isIncomingMessageIndexRead(_ index: TelegramCore.EngineMessage.Index) -> Swift.Bool
  public static func == (a: TelegramCore.EnginePeerReadCounters, b: TelegramCore.EnginePeerReadCounters) -> Swift.Bool
}
extension TelegramCore.EnginePeerReadCounters {
  public init(incomingReadId: TelegramCore.EngineMessage.Id.Id, outgoingReadId: TelegramCore.EngineMessage.Id.Id, count: Swift.Int32, markedUnread: Swift.Bool)
  public func _asReadCounters() -> PostboxKit.CombinedPeerReadState?
}
extension TelegramCore.TelegramEngine.EngineData.Item {
  public enum Messages {
    public struct Message : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Optional<TelegramCore.EngineMessage>
      public var mapKey: TelegramCore.EngineMessage.Id {
        get
      }
      public init(id: TelegramCore.EngineMessage.Id)
      public typealias Key = TelegramCore.EngineMessage.Id
    }
    public struct MessageGroup : TelegramCore.TelegramEngineDataItem {
      public typealias Result = [TelegramCore.EngineMessage]
      public init(id: TelegramCore.EngineMessage.Id)
    }
    public struct Messages : TelegramCore.TelegramEngineDataItem {
      public typealias Result = [TelegramCore.EngineMessage.Id : TelegramCore.EngineMessage]
      public init(ids: Swift.Set<TelegramCore.EngineMessage.Id>)
    }
    public struct PeerReadCounters : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = TelegramCore.EnginePeerReadCounters
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct PeerUnreadCount : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = Swift.Int
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct TotalReadCounters : TelegramCore.TelegramEngineDataItem {
      public typealias Result = TelegramCore.EngineTotalReadCounters
      public init()
    }
    public struct ChatListIndex : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = TelegramCore.EngineChatList.Item.Index?
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct ChatListGroup : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = TelegramCore.EngineChatList.Group?
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
    public struct MessageCount : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public struct ItemKey : Swift.Hashable {
        public var peerId: TelegramCore.EnginePeer.Id
        public var tag: PostboxKit.MessageTags
        public var threadId: Swift.Int64?
        public func hash(into hasher: inout Swift.Hasher)
        public static func == (a: TelegramCore.TelegramEngine.EngineData.Item.Messages.MessageCount.ItemKey, b: TelegramCore.TelegramEngine.EngineData.Item.Messages.MessageCount.ItemKey) -> Swift.Bool
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias Result = Swift.Int?
      public var mapKey: TelegramCore.TelegramEngine.EngineData.Item.Messages.MessageCount.ItemKey {
        get
      }
      public init(peerId: TelegramCore.EnginePeer.Id, threadId: Swift.Int64?, tag: PostboxKit.MessageTags)
      public typealias Key = TelegramCore.TelegramEngine.EngineData.Item.Messages.MessageCount.ItemKey
    }
    public struct TopMessage : TelegramCore.TelegramEngineDataItem, TelegramCore.TelegramEngineMapKeyDataItem {
      public typealias Result = TelegramCore.EngineMessage?
      public var mapKey: TelegramCore.EnginePeer.Id {
        get
      }
      public init(id: TelegramCore.EnginePeer.Id)
      public typealias Key = TelegramCore.EnginePeer.Id
    }
  }
}
public struct PeerCommand : Swift.Hashable {
  public let peer: PostboxKit.Peer
  public let command: TelegramCore.BotCommand
  public static func == (lhs: TelegramCore.PeerCommand, rhs: TelegramCore.PeerCommand) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PeerCommands : Swift.Equatable {
  public let commands: [TelegramCore.PeerCommand]
  public static func == (lhs: TelegramCore.PeerCommands, rhs: TelegramCore.PeerCommands) -> Swift.Bool
}
public enum JoinLinkInfoError {
  case generic
  case flood
  public static func == (a: TelegramCore.JoinLinkInfoError, b: TelegramCore.JoinLinkInfoError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum JoinLinkError {
  case generic
  case tooMuchJoined
  case tooMuchUsers
  case requestSent
  case flood
  public static func == (a: TelegramCore.JoinLinkError, b: TelegramCore.JoinLinkError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ExternalJoiningChatState {
  public struct Invite : Swift.Equatable {
    public struct Flags : Swift.Equatable, Swift.Codable {
      public let isChannel: Swift.Bool
      public let isBroadcast: Swift.Bool
      public let isPublic: Swift.Bool
      public let isMegagroup: Swift.Bool
      public let requestNeeded: Swift.Bool
      public static func == (a: TelegramCore.ExternalJoiningChatState.Invite.Flags, b: TelegramCore.ExternalJoiningChatState.Invite.Flags) -> Swift.Bool
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public let flags: TelegramCore.ExternalJoiningChatState.Invite.Flags
    public let title: Swift.String
    public let about: Swift.String?
    public let photoRepresentation: TelegramCore.TelegramMediaImageRepresentation?
    public let participantsCount: Swift.Int32
    public let participants: [TelegramCore.EnginePeer]?
    public static func == (a: TelegramCore.ExternalJoiningChatState.Invite, b: TelegramCore.ExternalJoiningChatState.Invite) -> Swift.Bool
  }
  case invite(TelegramCore.ExternalJoiningChatState.Invite)
  case alreadyJoined(TelegramCore.EnginePeer)
  case invalidHash
  case peek(TelegramCore.EnginePeer, Swift.Int32)
}
public struct SearchBotsConfiguration : Swift.Equatable, Swift.Codable {
  public let imageBotUsername: Swift.String?
  public let gifBotUsername: Swift.String?
  public let venueBotUsername: Swift.String?
  public static var defaultValue: TelegramCore.SearchBotsConfiguration {
    get
  }
  public init(imageBotUsername: Swift.String?, gifBotUsername: Swift.String?, venueBotUsername: Swift.String?)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.SearchBotsConfiguration, b: TelegramCore.SearchBotsConfiguration) -> Swift.Bool
}
public func currentSearchBotsConfiguration(transaction: PostboxKit.Transaction) -> TelegramCore.SearchBotsConfiguration
public func updateSearchBotsConfiguration(transaction: PostboxKit.Transaction, configuration: TelegramCore.SearchBotsConfiguration)
public class ForwardSourceInfoAttribute : PostboxKit.MessageAttribute {
  final public let messageId: PostboxKit.MessageId
  public init(messageId: PostboxKit.MessageId)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public enum TogglePeerChatPinnedLocation {
  case group(PostboxKit.PeerGroupId)
  case filter(Swift.Int32)
}
public enum TogglePeerChatPinnedResult {
  case done
  case limitExceeded(count: Swift.Int, limit: Swift.Int)
}
public struct DeviceContactNormalizedPhoneNumber : Swift.Hashable, Swift.RawRepresentable {
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
final public class DeviceContactPhoneNumberValue : Swift.Equatable {
  final public let plain: Swift.String
  final public let normalized: TelegramCore.DeviceContactNormalizedPhoneNumber
  public init(plain: Swift.String, normalized: TelegramCore.DeviceContactNormalizedPhoneNumber)
  public static func == (lhs: TelegramCore.DeviceContactPhoneNumberValue, rhs: TelegramCore.DeviceContactPhoneNumberValue) -> Swift.Bool
  @objc deinit
}
final public class DeviceContactPhoneNumber : Swift.Equatable {
  final public let label: Swift.String
  final public let number: TelegramCore.DeviceContactPhoneNumberValue
  public init(label: Swift.String, number: TelegramCore.DeviceContactPhoneNumberValue)
  public static func == (lhs: TelegramCore.DeviceContactPhoneNumber, rhs: TelegramCore.DeviceContactPhoneNumber) -> Swift.Bool
  @objc deinit
}
final public class DeviceContact : Swift.Equatable {
  final public let id: Swift.String
  final public let firstName: Swift.String
  final public let lastName: Swift.String
  final public let phoneNumbers: [TelegramCore.DeviceContactPhoneNumber]
  public init(id: Swift.String, firstName: Swift.String, lastName: Swift.String, phoneNumbers: [TelegramCore.DeviceContactPhoneNumber])
  public static func == (lhs: TelegramCore.DeviceContact, rhs: TelegramCore.DeviceContact) -> Swift.Bool
  @objc deinit
}
public enum SecureIdValueKey : Swift.Int32 {
  case personalDetails
  case passport
  case internalPassport
  case driversLicense
  case idCard
  case address
  case utilityBill
  case bankStatement
  case rentalAgreement
  case passportRegistration
  case temporaryRegistration
  case phone
  case email
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public enum SecureIdValue : Swift.Equatable {
  case personalDetails(TelegramCore.SecureIdPersonalDetailsValue)
  case passport(TelegramCore.SecureIdPassportValue)
  case internalPassport(TelegramCore.SecureIdInternalPassportValue)
  case driversLicense(TelegramCore.SecureIdDriversLicenseValue)
  case idCard(TelegramCore.SecureIdIDCardValue)
  case address(TelegramCore.SecureIdAddressValue)
  case passportRegistration(TelegramCore.SecureIdPassportRegistrationValue)
  case temporaryRegistration(TelegramCore.SecureIdTemporaryRegistrationValue)
  case utilityBill(TelegramCore.SecureIdUtilityBillValue)
  case bankStatement(TelegramCore.SecureIdBankStatementValue)
  case rentalAgreement(TelegramCore.SecureIdRentalAgreementValue)
  case phone(TelegramCore.SecureIdPhoneValue)
  case email(TelegramCore.SecureIdEmailValue)
  public var key: TelegramCore.SecureIdValueKey {
    get
  }
  public static func == (a: TelegramCore.SecureIdValue, b: TelegramCore.SecureIdValue) -> Swift.Bool
}
public struct SecureIdValueAdditionalData {
  public var nativeNames: Swift.Bool
  public var selfie: Swift.Bool
  public var translation: Swift.Bool
}
public func extractSecureIdValueAdditionalData(_ value: TelegramCore.SecureIdValue) -> TelegramCore.SecureIdValueAdditionalData
public struct SecureIdEncryptedValueFileMetadata : Swift.Equatable {
  public static func == (a: TelegramCore.SecureIdEncryptedValueFileMetadata, b: TelegramCore.SecureIdEncryptedValueFileMetadata) -> Swift.Bool
}
public struct SecureIdEncryptedValueMetadata : Swift.Equatable {
  public static func == (a: TelegramCore.SecureIdEncryptedValueMetadata, b: TelegramCore.SecureIdEncryptedValueMetadata) -> Swift.Bool
}
public struct SecureIdValueWithContext : Swift.Equatable {
  public let value: TelegramCore.SecureIdValue
  public let errors: [TelegramCore.SecureIdValueContentErrorKey : TelegramCore.SecureIdValueContentError]
  public func withRemovedErrors(_ keys: [TelegramCore.SecureIdValueContentErrorKey]) -> TelegramCore.SecureIdValueWithContext
  public static func == (a: TelegramCore.SecureIdValueWithContext, b: TelegramCore.SecureIdValueWithContext) -> Swift.Bool
}
public func getIsGifSaved(transaction: PostboxKit.Transaction, mediaId: PostboxKit.MediaId) -> Swift.Bool
public func addSavedGif(postbox: PostboxKit.Postbox, fileReference: TelegramCore.FileMediaReference, limit: Swift.Int = 200) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public func removeSavedGif(postbox: PostboxKit.Postbox, mediaId: PostboxKit.MediaId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public enum SavedGifResult {
  case generic
  case limitExceeded(Swift.Int32, Swift.Int32)
}
public func toggleGifSaved(account: TelegramCore.Account, fileReference: TelegramCore.FileMediaReference, saved: Swift.Bool) -> SwiftSignalKit.Signal<TelegramCore.SavedGifResult, SwiftSignalKit.NoError>
public class ChannelMessageStateVersionAttribute : PostboxKit.MessageAttribute {
  final public let pts: Swift.Int32
  public init(pts: Swift.Int32)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public func tagsForStoreMessage(incoming: Swift.Bool, attributes: [PostboxKit.MessageAttribute], media: [PostboxKit.Media], textEntities: [TelegramCore.MessageTextEntity]?, isPinned: Swift.Bool) -> (PostboxKit.MessageTags, PostboxKit.GlobalMessageTags)
final public class RecentHashtagItem : Swift.Codable {
  public init()
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public enum UpdateContactNameError {
  case generic
  public static func == (a: TelegramCore.UpdateContactNameError, b: TelegramCore.UpdateContactNameError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public let telegramPostboxSeedConfiguration: PostboxKit.SeedConfiguration
public enum AccountTransactionError {
  case couldNotOpen
  public static func == (a: TelegramCore.AccountTransactionError, b: TelegramCore.AccountTransactionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func accountTransaction<T>(rootPath: Swift.String, id: TelegramCore.AccountRecordId, encryptionParameters: PostboxKit.ValueBoxEncryptionParameters, isReadOnly: Swift.Bool, useCopy: Swift.Bool = false, useCaches: Swift.Bool = true, removeDatabaseOnError: Swift.Bool = true, transaction: @escaping (PostboxKit.Postbox, PostboxKit.Transaction) -> T) -> SwiftSignalKit.Signal<T, TelegramCore.AccountTransactionError>
public enum UploadStickerStatus {
  case progress(Swift.Float)
  case complete(TelegramCore.CloudDocumentMediaResource, Swift.String)
}
public enum UploadStickerError {
  case generic
  public static func == (a: TelegramCore.UploadStickerError, b: TelegramCore.UploadStickerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CreateStickerSetError {
  case generic
  public static func == (a: TelegramCore.CreateStickerSetError, b: TelegramCore.CreateStickerSetError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ImportSticker {
  public let resource: PostboxKit.MediaResource
  public let dimensions: TelegramCore.PixelDimensions
  public let mimeType: Swift.String
  public init(resource: PostboxKit.MediaResource, emojis: [Swift.String], dimensions: TelegramCore.PixelDimensions, mimeType: Swift.String)
}
public enum CreateStickerSetStatus {
  case progress(Swift.Float, Swift.Int32, Swift.Int32)
  case complete(TelegramCore.StickerPackCollectionInfo, [TelegramCore.StickerPackItem])
}
public enum CreateStickerSetType {
  case image
  case animation
  case video
  public static func == (a: TelegramCore.CreateStickerSetType, b: TelegramCore.CreateStickerSetType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class ChatThemes : Swift.Codable, Swift.Equatable {
  final public let chatThemes: [TelegramCore.TelegramTheme]
  final public let hash: Swift.Int64
  public init(chatThemes: [TelegramCore.TelegramTheme], hash: Swift.Int64)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.ChatThemes, rhs: TelegramCore.ChatThemes) -> Swift.Bool
  @objc deinit
}
public struct SynchronizeableChatInputState : Swift.Codable, Swift.Equatable {
  public let replyToMessageId: PostboxKit.MessageId?
  public let text: Swift.String
  public let entities: [TelegramCore.MessageTextEntity]
  public let timestamp: Swift.Int32
  public let textSelection: Swift.Range<Swift.Int>?
  public init(replyToMessageId: PostboxKit.MessageId?, text: Swift.String, entities: [TelegramCore.MessageTextEntity], timestamp: Swift.Int32, textSelection: Swift.Range<Swift.Int>?)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.SynchronizeableChatInputState, rhs: TelegramCore.SynchronizeableChatInputState) -> Swift.Bool
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class Stickers {
    final public func archivedStickerPacks(namespace: TelegramCore.ArchivedStickerPacksNamespace = .stickers) -> SwiftSignalKit.Signal<[TelegramCore.ArchivedStickerPackItem], SwiftSignalKit.NoError>
    final public func removeArchivedStickerPack(info: TelegramCore.StickerPackCollectionInfo) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func cachedStickerPack(reference: TelegramCore.StickerPackReference, forceRemote: Swift.Bool) -> SwiftSignalKit.Signal<TelegramCore.CachedStickerPackResult, SwiftSignalKit.NoError>
    final public func loadedStickerPack(reference: TelegramCore.StickerPackReference, forceActualized: Swift.Bool) -> SwiftSignalKit.Signal<TelegramCore.LoadedStickerPack, SwiftSignalKit.NoError>
    final public func randomGreetingSticker() -> SwiftSignalKit.Signal<TelegramCore.FoundStickerItem?, SwiftSignalKit.NoError>
    final public func searchStickers(query: [Swift.String], scope: TelegramCore.SearchStickersScope = [.installed, .remote]) -> SwiftSignalKit.Signal<(items: [TelegramCore.FoundStickerItem], isFinalResult: Swift.Bool), SwiftSignalKit.NoError>
    final public func searchStickerSetsRemotely(query: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.FoundStickerSets, SwiftSignalKit.NoError>
    final public func searchStickerSets(query: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.FoundStickerSets, SwiftSignalKit.NoError>
    final public func searchGifs(query: Swift.String, nextOffset: Swift.String = "") -> SwiftSignalKit.Signal<TelegramCore.ChatContextResultCollection?, SwiftSignalKit.NoError>
    final public func addStickerPackInteractively(info: TelegramCore.StickerPackCollectionInfo, items: [TelegramCore.StickerPackItem], positionInList: Swift.Int? = nil) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func removeStickerPackInteractively(id: PostboxKit.ItemCollectionId, option: TelegramCore.RemoveStickerPackOption) -> SwiftSignalKit.Signal<(Swift.Int, [PostboxKit.ItemCollectionItem])?, SwiftSignalKit.NoError>
    final public func removeStickerPacksInteractively(ids: [PostboxKit.ItemCollectionId], option: TelegramCore.RemoveStickerPackOption) -> SwiftSignalKit.Signal<(Swift.Int, [PostboxKit.ItemCollectionItem])?, SwiftSignalKit.NoError>
    final public func markFeaturedStickerPacksAsSeenInteractively(ids: [PostboxKit.ItemCollectionId]) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func searchEmojiKeywords(inputLanguageCode: Swift.String, query: Swift.String, completeMatch: Swift.Bool) -> SwiftSignalKit.Signal<[TelegramCore.EmojiKeywordItem], SwiftSignalKit.NoError>
    final public func stickerPacksAttachedToMedia(media: TelegramCore.AnyMediaReference) -> SwiftSignalKit.Signal<[TelegramCore.StickerPackReference], SwiftSignalKit.NoError>
    final public func uploadSticker(peer: PostboxKit.Peer, resource: PostboxKit.MediaResource, alt: Swift.String, dimensions: TelegramCore.PixelDimensions, mimeType: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.UploadStickerStatus, TelegramCore.UploadStickerError>
    final public func createStickerSet(title: Swift.String, shortName: Swift.String, stickers: [TelegramCore.ImportSticker], thumbnail: TelegramCore.ImportSticker?, type: TelegramCore.CreateStickerSetType, software: Swift.String?) -> SwiftSignalKit.Signal<TelegramCore.CreateStickerSetStatus, TelegramCore.CreateStickerSetError>
    final public func getStickerSetShortNameSuggestion(title: Swift.String) -> SwiftSignalKit.Signal<Swift.String?, SwiftSignalKit.NoError>
    final public func toggleStickerSaved(file: TelegramCore.TelegramMediaFile, saved: Swift.Bool) -> SwiftSignalKit.Signal<TelegramCore.SavedStickerResult, TelegramCore.AddSavedStickerError>
    final public func validateStickerSetShortNameInteractive(shortName: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.AddressNameValidationStatus, SwiftSignalKit.NoError>
    final public func availableReactions() -> SwiftSignalKit.Signal<TelegramCore.AvailableReactions?, SwiftSignalKit.NoError>
    final public func emojiSearchCategories(kind: TelegramCore.EmojiSearchCategories.Kind) -> SwiftSignalKit.Signal<TelegramCore.EmojiSearchCategories?, SwiftSignalKit.NoError>
    final public func updateQuickReaction(reaction: TelegramCore.MessageReaction.Reaction) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func isStickerSaved(id: TelegramCore.EngineMedia.Id) -> SwiftSignalKit.Signal<Swift.Bool, SwiftSignalKit.NoError>
    final public func isGifSaved(id: TelegramCore.EngineMedia.Id) -> SwiftSignalKit.Signal<Swift.Bool, SwiftSignalKit.NoError>
    final public func clearRecentlyUsedStickers() -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func clearRecentlyUsedEmoji() -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func clearRecentlyUsedReactions() -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func reorderStickerPacks(namespace: PostboxKit.ItemCollectionId.Namespace, itemIds: [PostboxKit.ItemCollectionId]) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func resolveInlineStickers(fileIds: [Swift.Int64]) -> SwiftSignalKit.Signal<[Swift.Int64 : TelegramCore.TelegramMediaFile], SwiftSignalKit.NoError>
    final public func searchEmoji(emojiString: [Swift.String]) -> SwiftSignalKit.Signal<(items: [TelegramCore.TelegramMediaFile], isFinalResult: Swift.Bool), SwiftSignalKit.NoError>
    @objc deinit
  }
}
public enum TerminateSessionError {
  case generic
  case freshReset
  public static func == (a: TelegramCore.TerminateSessionError, b: TelegramCore.TerminateSessionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UpadteAuthorizationTTLError {
  case generic
  public static func == (a: TelegramCore.UpadteAuthorizationTTLError, b: TelegramCore.UpadteAuthorizationTTLError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UpdateSessionError {
  case generic
  public static func == (a: TelegramCore.UpdateSessionError, b: TelegramCore.UpdateSessionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ImageRepresentationWithReference : Swift.Equatable {
  public let representation: TelegramCore.TelegramMediaImageRepresentation
  public let reference: TelegramCore.MediaResourceReference
  public init(representation: TelegramCore.TelegramMediaImageRepresentation, reference: TelegramCore.MediaResourceReference)
  public static func == (a: TelegramCore.ImageRepresentationWithReference, b: TelegramCore.ImageRepresentationWithReference) -> Swift.Bool
}
public struct VideoRepresentationWithReference : Swift.Equatable {
  public let representation: TelegramCore.TelegramMediaImage.VideoRepresentation
  public let reference: TelegramCore.MediaResourceReference
  public init(representation: TelegramCore.TelegramMediaImage.VideoRepresentation, reference: TelegramCore.MediaResourceReference)
  public static func == (a: TelegramCore.VideoRepresentationWithReference, b: TelegramCore.VideoRepresentationWithReference) -> Swift.Bool
}
final public class EngineContactList {
  final public let peers: [TelegramCore.EnginePeer]
  final public let presences: [TelegramCore.EnginePeer.Id : TelegramCore.EnginePeer.Presence]
  public init(peers: [TelegramCore.EnginePeer], presences: [TelegramCore.EnginePeer.Id : TelegramCore.EnginePeer.Presence])
  @objc deinit
}
extension TelegramCore.TelegramEngine.EngineData.Item {
  public enum Contacts {
    public struct List : TelegramCore.TelegramEngineDataItem {
      public typealias Result = TelegramCore.EngineContactList
      public init(includePresences: Swift.Bool)
    }
  }
}
public struct AccountSessionFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init()
  public init(rawValue: Swift.Int32)
  public static let isOfficial: TelegramCore.AccountSessionFlags
  public static let passwordPending: TelegramCore.AccountSessionFlags
  public static let acceptsSecretChats: TelegramCore.AccountSessionFlags
  public static let acceptsIncomingCalls: TelegramCore.AccountSessionFlags
  public typealias ArrayLiteralElement = TelegramCore.AccountSessionFlags
  public typealias Element = TelegramCore.AccountSessionFlags
  public typealias RawValue = Swift.Int32
}
public struct RecentAccountSession : Swift.Equatable {
  public let hash: Swift.Int64
  public let deviceModel: Swift.String
  public let platform: Swift.String
  public let systemVersion: Swift.String
  public let apiId: Swift.Int32
  public let appName: Swift.String
  public let appVersion: Swift.String
  public let creationDate: Swift.Int32
  public let activityDate: Swift.Int32
  public let ip: Swift.String
  public let country: Swift.String
  public let region: Swift.String
  public let flags: TelegramCore.AccountSessionFlags
  public var isCurrent: Swift.Bool {
    get
  }
  public static func == (lhs: TelegramCore.RecentAccountSession, rhs: TelegramCore.RecentAccountSession) -> Swift.Bool
}
public enum ResolvePeerByNameOptionCached {
  case none
  case cached
  case cachedIfLaterThan(timestamp: Swift.Int32)
}
public enum ResolvePeerByNameOptionRemote {
  case updateIfEarlierThan(timestamp: Swift.Int32)
  case update
}
public struct SecureIdPhoneValue : Swift.Equatable {
  public let phone: Swift.String
  public init(phone: Swift.String)
  public static func == (lhs: TelegramCore.SecureIdPhoneValue, rhs: TelegramCore.SecureIdPhoneValue) -> Swift.Bool
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class PeersNearby {
    final public func updatePeersNearbyVisibility(update: TelegramCore.PeerNearbyVisibilityUpdate, background: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    @objc deinit
  }
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class Themes {
    final public func getChatThemes(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, forceUpdate: Swift.Bool = false, onlyCached: Swift.Bool = false) -> SwiftSignalKit.Signal<[TelegramCore.TelegramTheme], SwiftSignalKit.NoError>
    final public func setChatTheme(peerId: PostboxKit.PeerId, emoticon: Swift.String?) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    @objc deinit
  }
}
public enum ExportedInvitation : Swift.Codable, Swift.Equatable {
  case link(link: Swift.String, title: Swift.String?, isPermanent: Swift.Bool, requestApproval: Swift.Bool, isRevoked: Swift.Bool, adminId: PostboxKit.PeerId, date: Swift.Int32, startDate: Swift.Int32?, expireDate: Swift.Int32?, usageLimit: Swift.Int32?, count: Swift.Int32?, requestedCount: Swift.Int32?)
  case publicJoinRequest
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.ExportedInvitation, rhs: TelegramCore.ExportedInvitation) -> Swift.Bool
  public func withUpdated(isRevoked: Swift.Bool) -> TelegramCore.ExportedInvitation
}
public struct MessageReference : PostboxKit.PostboxCoding, Swift.Hashable, Swift.Equatable {
  public let content: TelegramCore.MessageReferenceContent
  public var peer: TelegramCore.PeerReference? {
    get
  }
  public var author: TelegramCore.PeerReference? {
    get
  }
  public var id: PostboxKit.MessageId? {
    get
  }
  public var timestamp: Swift.Int32? {
    get
  }
  public var isIncoming: Swift.Bool? {
    get
  }
  public var isSecret: Swift.Bool? {
    get
  }
  public init(_ message: PostboxKit.Message)
  public init(peer: PostboxKit.Peer, author: PostboxKit.Peer?, id: PostboxKit.MessageId, timestamp: Swift.Int32, incoming: Swift.Bool, secret: Swift.Bool)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.MessageReference, b: TelegramCore.MessageReference) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum MessageReferenceContent : PostboxKit.PostboxCoding, Swift.Hashable, Swift.Equatable {
  case none
  case message(peer: TelegramCore.PeerReference, author: TelegramCore.PeerReference?, id: PostboxKit.MessageId, timestamp: Swift.Int32, incoming: Swift.Bool, secret: Swift.Bool)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.MessageReferenceContent, b: TelegramCore.MessageReferenceContent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct WebpageReference : PostboxKit.PostboxCoding, Swift.Hashable, Swift.Equatable {
  public let content: TelegramCore.WebpageReferenceContent
  public init(_ webPage: TelegramCore.TelegramMediaWebpage)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.WebpageReference, b: TelegramCore.WebpageReference) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum WebpageReferenceContent : PostboxKit.PostboxCoding, Swift.Hashable, Swift.Equatable {
  case none
  case webPage(id: Swift.Int64, url: Swift.String)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.WebpageReferenceContent, b: TelegramCore.WebpageReferenceContent) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum ThemeReference : PostboxKit.PostboxCoding, Swift.Hashable, Swift.Equatable {
  case slug(Swift.String)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.ThemeReference, rhs: TelegramCore.ThemeReference) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum WallpaperReference : PostboxKit.PostboxCoding, Swift.Hashable, Swift.Equatable {
  case slug(Swift.String)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.WallpaperReference, rhs: TelegramCore.WallpaperReference) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AnyMediaReference : Swift.Equatable {
  case standalone(media: PostboxKit.Media)
  case message(message: TelegramCore.MessageReference, media: PostboxKit.Media)
  case webPage(webPage: TelegramCore.WebpageReference, media: PostboxKit.Media)
  case stickerPack(stickerPack: TelegramCore.StickerPackReference, media: PostboxKit.Media)
  case savedGif(media: PostboxKit.Media)
  case avatarList(peer: TelegramCore.PeerReference, media: PostboxKit.Media)
  case attachBot(peer: TelegramCore.PeerReference, media: PostboxKit.Media)
  case customEmoji(media: PostboxKit.Media)
  public static func == (lhs: TelegramCore.AnyMediaReference, rhs: TelegramCore.AnyMediaReference) -> Swift.Bool
  public var partial: TelegramCore.PartialMediaReference? {
    get
  }
  public func concrete<T>(_ type: T.Type) -> TelegramCore.MediaReference<T>? where T : PostboxKit.Media
  public var media: PostboxKit.Media {
    get
  }
  public func resourceReference(_ resource: PostboxKit.MediaResource) -> TelegramCore.MediaResourceReference
}
public enum PartialMediaReference : Swift.Equatable {
  case message(message: TelegramCore.MessageReference)
  case webPage(webPage: TelegramCore.WebpageReference)
  case stickerPack(stickerPack: TelegramCore.StickerPackReference)
  case savedGif
  public init?(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func mediaReference(_ media: PostboxKit.Media) -> TelegramCore.AnyMediaReference
  public static func == (a: TelegramCore.PartialMediaReference, b: TelegramCore.PartialMediaReference) -> Swift.Bool
}
public enum MediaReference<T> where T : PostboxKit.Media {
  case standalone(media: T)
  case message(message: TelegramCore.MessageReference, media: T)
  case webPage(webPage: TelegramCore.WebpageReference, media: T)
  case stickerPack(stickerPack: TelegramCore.StickerPackReference, media: T)
  case savedGif(media: T)
  case avatarList(peer: TelegramCore.PeerReference, media: T)
  case attachBot(peer: TelegramCore.PeerReference, media: T)
  case customEmoji(media: T)
  public init?(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public var abstract: TelegramCore.AnyMediaReference {
    get
  }
  public var partial: TelegramCore.PartialMediaReference? {
    get
  }
  public var media: T {
    get
  }
  public func resourceReference(_ resource: PostboxKit.MediaResource) -> TelegramCore.MediaResourceReference
}
public typealias FileMediaReference = TelegramCore.MediaReference<TelegramCore.TelegramMediaFile>
public typealias ImageMediaReference = TelegramCore.MediaReference<TelegramCore.TelegramMediaImage>
public enum MediaResourceReference : Swift.Equatable {
  case media(media: TelegramCore.AnyMediaReference, resource: PostboxKit.MediaResource)
  case standalone(resource: PostboxKit.MediaResource)
  case avatar(peer: TelegramCore.PeerReference, resource: PostboxKit.MediaResource)
  case avatarList(peer: TelegramCore.PeerReference, resource: PostboxKit.MediaResource)
  case messageAuthorAvatar(message: TelegramCore.MessageReference, resource: PostboxKit.MediaResource)
  case wallpaper(wallpaper: TelegramCore.WallpaperReference?, resource: PostboxKit.MediaResource)
  case stickerPackThumbnail(stickerPack: TelegramCore.StickerPackReference, resource: PostboxKit.MediaResource)
  case theme(theme: TelegramCore.ThemeReference, resource: PostboxKit.MediaResource)
  case soundList(resource: PostboxKit.MediaResource)
  public var resource: PostboxKit.MediaResource {
    get
  }
  public static func == (lhs: TelegramCore.MediaResourceReference, rhs: TelegramCore.MediaResourceReference) -> Swift.Bool
}
public enum SaveSecureIdValueError {
  case generic
  case verificationRequired
  case versionOutdated
  public static func == (a: TelegramCore.SaveSecureIdValueError, b: TelegramCore.SaveSecureIdValueError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func saveSecureIdValue(postbox: PostboxKit.Postbox, network: TelegramCore.Network, context: TelegramCore.SecureIdAccessContext, value: TelegramCore.SecureIdValue, uploadedFiles: [Foundation.Data : Foundation.Data]) -> SwiftSignalKit.Signal<TelegramCore.SecureIdValueWithContext, TelegramCore.SaveSecureIdValueError>
public enum DeleteSecureIdValueError {
  case generic
  case versionOutdated
  public static func == (a: TelegramCore.DeleteSecureIdValueError, b: TelegramCore.DeleteSecureIdValueError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func deleteSecureIdValues(network: TelegramCore.Network, keys: Swift.Set<TelegramCore.SecureIdValueKey>) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.DeleteSecureIdValueError>
public func dropSecureId(network: TelegramCore.Network, currentPassword: Swift.String) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.AuthorizationPasswordVerificationError>
public enum GetAllSecureIdValuesError {
  case generic
  case versionOutdated
  public static func == (a: TelegramCore.GetAllSecureIdValuesError, b: TelegramCore.GetAllSecureIdValuesError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct EncryptedAllSecureIdValues {
}
public func getAllSecureIdValues(network: TelegramCore.Network) -> SwiftSignalKit.Signal<TelegramCore.EncryptedAllSecureIdValues, TelegramCore.GetAllSecureIdValuesError>
public func decryptedAllSecureIdValues(context: TelegramCore.SecureIdAccessContext, encryptedValues: TelegramCore.EncryptedAllSecureIdValues) -> [TelegramCore.SecureIdValueWithContext]
public enum AddContactError {
  case generic
  public static func == (a: TelegramCore.AddContactError, b: TelegramCore.AddContactError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AcceptAndShareContactError {
  case generic
  public static func == (a: TelegramCore.AcceptAndShareContactError, b: TelegramCore.AcceptAndShareContactError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ActiveSessionsContextState : Swift.Equatable {
  public var isLoadingMore: Swift.Bool
  public var sessions: [TelegramCore.RecentAccountSession]
  public var ttlDays: Swift.Int32
  public static func == (a: TelegramCore.ActiveSessionsContextState, b: TelegramCore.ActiveSessionsContextState) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class ActiveSessionsContext {
  final public var state: SwiftSignalKit.Signal<TelegramCore.ActiveSessionsContextState, SwiftSignalKit.NoError> {
    get
  }
  final public func loadMore()
  final public func remove(hash: Swift.Int64) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.TerminateSessionError>
  final public func removeOther() -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.TerminateSessionError>
  final public func updateSessionAcceptsSecretChats(_ session: TelegramCore.RecentAccountSession, accepts: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.UpdateSessionError>
  final public func updateSessionAcceptsIncomingCalls(_ session: TelegramCore.RecentAccountSession, accepts: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.UpdateSessionError>
  final public func updateAuthorizationTTL(days: Swift.Int32) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.UpadteAuthorizationTTLError>
  @objc deinit
}
public struct WebSessionsContextState : Swift.Equatable {
  public var isLoadingMore: Swift.Bool
  public var sessions: [TelegramCore.WebAuthorization]
  public var peers: [PostboxKit.PeerId : PostboxKit.Peer]
  public static func == (lhs: TelegramCore.WebSessionsContextState, rhs: TelegramCore.WebSessionsContextState) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class WebSessionsContext {
  final public var state: SwiftSignalKit.Signal<TelegramCore.WebSessionsContextState, SwiftSignalKit.NoError> {
    get
  }
  @objc deinit
  final public func loadMore()
  final public func remove(hash: Swift.Int64) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
  final public func removeAll() -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
}
public struct BlockedPeersContextState : Swift.Equatable {
  public var isLoadingMore: Swift.Bool
  public var canLoadMore: Swift.Bool
  public var totalCount: Swift.Int?
  public var peers: [PostboxKit.RenderedPeer]
  public static func == (a: TelegramCore.BlockedPeersContextState, b: TelegramCore.BlockedPeersContextState) -> Swift.Bool
}
public enum BlockedPeersContextAddError {
  case generic
  public static func == (a: TelegramCore.BlockedPeersContextAddError, b: TelegramCore.BlockedPeersContextAddError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BlockedPeersContextRemoveError {
  case generic
  public static func == (a: TelegramCore.BlockedPeersContextRemoveError, b: TelegramCore.BlockedPeersContextRemoveError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class BlockedPeersContext {
  final public var state: SwiftSignalKit.Signal<TelegramCore.BlockedPeersContextState, SwiftSignalKit.NoError> {
    get
  }
  public init(account: TelegramCore.Account)
  @objc deinit
  final public func loadMore()
  final public func add(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.BlockedPeersContextAddError>
  final public func remove(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.BlockedPeersContextRemoveError>
}
final public class TelegramMediaUnsupported : PostboxKit.Media {
  final public let id: PostboxKit.MediaId?
  final public let peerIds: [PostboxKit.PeerId]
  public init()
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to other: PostboxKit.Media) -> Swift.Bool
  final public func isSemanticallyEqual(to other: PostboxKit.Media) -> Swift.Bool
  @objc deinit
}
public enum TelegramMediaWebFileDecodingError : Swift.Error {
  case generic
  public static func == (a: TelegramCore.TelegramMediaWebFileDecodingError, b: TelegramCore.TelegramMediaWebFileDecodingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class TelegramMediaWebFile : PostboxKit.Media, Swift.Codable, Swift.Equatable {
  final public let resource: TelegramCore.TelegramMediaResource
  final public let mimeType: Swift.String
  final public let size: Swift.Int32
  final public let attributes: [TelegramCore.TelegramMediaFileAttribute]
  final public let peerIds: [PostboxKit.PeerId]
  public var id: PostboxKit.MediaId? {
    get
  }
  public init(resource: TelegramCore.TelegramMediaResource, mimeType: Swift.String, size: Swift.Int32, attributes: [TelegramCore.TelegramMediaFileAttribute])
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func isEqual(to other: PostboxKit.Media) -> Swift.Bool
  public static func == (lhs: TelegramCore.TelegramMediaWebFile, rhs: TelegramCore.TelegramMediaWebFile) -> Swift.Bool
  public func isSemanticallyEqual(to other: PostboxKit.Media) -> Swift.Bool
  @objc deinit
}
public func combineInt64Hash(_ acc: inout Swift.UInt64, with value: Swift.UInt64)
public func combineInt64Hash(_ acc: inout Swift.UInt64, with peerId: PostboxKit.PeerId)
public func finalizeInt64Hash(_ acc: Swift.UInt64) -> Swift.Int64
public struct SecureIdAccessContext : Swift.Equatable {
  public static func == (a: TelegramCore.SecureIdAccessContext, b: TelegramCore.SecureIdAccessContext) -> Swift.Bool
}
public enum SecureIdAccessError {
  case generic
  case passwordError(TelegramCore.AuthorizationPasswordVerificationError)
  case secretPasswordMismatch
}
final public class SelectivePrivacyPeer : Swift.Equatable {
  final public let peer: PostboxKit.Peer
  final public let participantCount: Swift.Int32?
  public init(peer: PostboxKit.Peer, participantCount: Swift.Int32?)
  public static func == (lhs: TelegramCore.SelectivePrivacyPeer, rhs: TelegramCore.SelectivePrivacyPeer) -> Swift.Bool
  final public var userCount: Swift.Int {
    get
  }
  @objc deinit
}
public enum SelectivePrivacySettings : Swift.Equatable {
  case enableEveryone(disableFor: [PostboxKit.PeerId : TelegramCore.SelectivePrivacyPeer])
  case enableContacts(enableFor: [PostboxKit.PeerId : TelegramCore.SelectivePrivacyPeer], disableFor: [PostboxKit.PeerId : TelegramCore.SelectivePrivacyPeer])
  case disableEveryone(enableFor: [PostboxKit.PeerId : TelegramCore.SelectivePrivacyPeer])
  public static func == (lhs: TelegramCore.SelectivePrivacySettings, rhs: TelegramCore.SelectivePrivacySettings) -> Swift.Bool
}
public struct AccountPrivacySettings : Swift.Equatable {
  public let presence: TelegramCore.SelectivePrivacySettings
  public let groupInvitations: TelegramCore.SelectivePrivacySettings
  public let voiceCalls: TelegramCore.SelectivePrivacySettings
  public let voiceCallsP2P: TelegramCore.SelectivePrivacySettings
  public let profilePhoto: TelegramCore.SelectivePrivacySettings
  public let forwards: TelegramCore.SelectivePrivacySettings
  public let phoneNumber: TelegramCore.SelectivePrivacySettings
  public let phoneDiscoveryEnabled: Swift.Bool
  public let voiceMessages: TelegramCore.SelectivePrivacySettings
  public let automaticallyArchiveAndMuteNonContacts: Swift.Bool
  public let accountRemovalTimeout: Swift.Int32
  public let messageAutoremoveTimeout: Swift.Int32?
  public init(presence: TelegramCore.SelectivePrivacySettings, groupInvitations: TelegramCore.SelectivePrivacySettings, voiceCalls: TelegramCore.SelectivePrivacySettings, voiceCallsP2P: TelegramCore.SelectivePrivacySettings, profilePhoto: TelegramCore.SelectivePrivacySettings, forwards: TelegramCore.SelectivePrivacySettings, phoneNumber: TelegramCore.SelectivePrivacySettings, phoneDiscoveryEnabled: Swift.Bool, voiceMessages: TelegramCore.SelectivePrivacySettings, automaticallyArchiveAndMuteNonContacts: Swift.Bool, accountRemovalTimeout: Swift.Int32, messageAutoremoveTimeout: Swift.Int32?)
  public static func == (lhs: TelegramCore.AccountPrivacySettings, rhs: TelegramCore.AccountPrivacySettings) -> Swift.Bool
}
public struct GlobalMessageAutoremoveTimeoutSettings : Swift.Equatable, Swift.Codable {
  public static var `default`: TelegramCore.GlobalMessageAutoremoveTimeoutSettings
  public var messageAutoremoveTimeout: Swift.Int32?
  public init(messageAutoremoveTimeout: Swift.Int32?)
  public static func == (a: TelegramCore.GlobalMessageAutoremoveTimeoutSettings, b: TelegramCore.GlobalMessageAutoremoveTimeoutSettings) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum MediaResourceStatsCategory {
  case generic
  case image
  case video
  case audio
  case file
  case call
  case stickers
  case voiceMessages
  public static func == (a: TelegramCore.MediaResourceStatsCategory, b: TelegramCore.MediaResourceStatsCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct GroupCallInfo : Swift.Equatable {
  public var id: Swift.Int64
  public var accessHash: Swift.Int64
  public var participantCount: Swift.Int
  public var streamDcId: Swift.Int32?
  public var title: Swift.String?
  public var scheduleTimestamp: Swift.Int32?
  public var subscribedToScheduled: Swift.Bool
  public var recordingStartTimestamp: Swift.Int32?
  public var sortAscending: Swift.Bool
  public var defaultParticipantsAreMuted: TelegramCore.GroupCallParticipantsContext.State.DefaultParticipantsAreMuted?
  public var isVideoEnabled: Swift.Bool
  public var unmutedVideoLimit: Swift.Int
  public var isStream: Swift.Bool
  public init(id: Swift.Int64, accessHash: Swift.Int64, participantCount: Swift.Int, streamDcId: Swift.Int32?, title: Swift.String?, scheduleTimestamp: Swift.Int32?, subscribedToScheduled: Swift.Bool, recordingStartTimestamp: Swift.Int32?, sortAscending: Swift.Bool, defaultParticipantsAreMuted: TelegramCore.GroupCallParticipantsContext.State.DefaultParticipantsAreMuted?, isVideoEnabled: Swift.Bool, unmutedVideoLimit: Swift.Int, isStream: Swift.Bool)
  public static func == (a: TelegramCore.GroupCallInfo, b: TelegramCore.GroupCallInfo) -> Swift.Bool
}
public struct GroupCallSummary : Swift.Equatable {
  public var info: TelegramCore.GroupCallInfo
  public var topParticipants: [TelegramCore.GroupCallParticipantsContext.Participant]
  public static func == (a: TelegramCore.GroupCallSummary, b: TelegramCore.GroupCallSummary) -> Swift.Bool
}
public enum GetCurrentGroupCallError {
  case generic
  public static func == (a: TelegramCore.GetCurrentGroupCallError, b: TelegramCore.GetCurrentGroupCallError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CreateGroupCallError {
  case generic
  case anonymousNotAllowed
  case scheduledTooLate
  public static func == (a: TelegramCore.CreateGroupCallError, b: TelegramCore.CreateGroupCallError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum StartScheduledGroupCallError {
  case generic
  public static func == (a: TelegramCore.StartScheduledGroupCallError, b: TelegramCore.StartScheduledGroupCallError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ToggleScheduledGroupCallSubscriptionError {
  case generic
  public static func == (a: TelegramCore.ToggleScheduledGroupCallSubscriptionError, b: TelegramCore.ToggleScheduledGroupCallSubscriptionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UpdateGroupCallJoinAsPeerError {
  case generic
  public static func == (a: TelegramCore.UpdateGroupCallJoinAsPeerError, b: TelegramCore.UpdateGroupCallJoinAsPeerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum GetGroupCallParticipantsError {
  case generic
  public static func == (a: TelegramCore.GetGroupCallParticipantsError, b: TelegramCore.GetGroupCallParticipantsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum JoinGroupCallError {
  case generic
  case anonymousNotAllowed
  case tooManyParticipants
  case invalidJoinAsPeer
  public static func == (a: TelegramCore.JoinGroupCallError, b: TelegramCore.JoinGroupCallError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct JoinGroupCallResult {
  public enum ConnectionMode {
    case rtc
    case broadcast(isExternalStream: Swift.Bool)
  }
  public var callInfo: TelegramCore.GroupCallInfo
  public var state: TelegramCore.GroupCallParticipantsContext.State
  public var connectionMode: TelegramCore.JoinGroupCallResult.ConnectionMode
  public var jsonParams: Swift.String
}
public struct JoinGroupCallAsScreencastResult {
  public var jsonParams: Swift.String
  public var endpointId: Swift.String
}
public enum LeaveGroupCallAsScreencastError {
  case generic
  public static func == (a: TelegramCore.LeaveGroupCallAsScreencastError, b: TelegramCore.LeaveGroupCallAsScreencastError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LeaveGroupCallError {
  case generic
  public static func == (a: TelegramCore.LeaveGroupCallError, b: TelegramCore.LeaveGroupCallError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum StopGroupCallError {
  case generic
  public static func == (a: TelegramCore.StopGroupCallError, b: TelegramCore.StopGroupCallError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class GroupCallParticipantsContext {
  public struct Participant : Swift.Equatable, Swift.CustomStringConvertible {
    public struct MuteState : Swift.Equatable {
      public var canUnmute: Swift.Bool
      public var mutedByYou: Swift.Bool
      public init(canUnmute: Swift.Bool, mutedByYou: Swift.Bool)
      public static func == (a: TelegramCore.GroupCallParticipantsContext.Participant.MuteState, b: TelegramCore.GroupCallParticipantsContext.Participant.MuteState) -> Swift.Bool
    }
    public struct VideoDescription : Swift.Equatable {
      public struct SsrcGroup : Swift.Equatable {
        public var semantics: Swift.String
        public var ssrcs: [Swift.UInt32]
        public static func == (a: TelegramCore.GroupCallParticipantsContext.Participant.VideoDescription.SsrcGroup, b: TelegramCore.GroupCallParticipantsContext.Participant.VideoDescription.SsrcGroup) -> Swift.Bool
      }
      public var endpointId: Swift.String
      public var ssrcGroups: [TelegramCore.GroupCallParticipantsContext.Participant.VideoDescription.SsrcGroup]
      public var audioSsrc: Swift.UInt32?
      public var isPaused: Swift.Bool
      public init(endpointId: Swift.String, ssrcGroups: [TelegramCore.GroupCallParticipantsContext.Participant.VideoDescription.SsrcGroup], audioSsrc: Swift.UInt32?, isPaused: Swift.Bool)
      public static func == (a: TelegramCore.GroupCallParticipantsContext.Participant.VideoDescription, b: TelegramCore.GroupCallParticipantsContext.Participant.VideoDescription) -> Swift.Bool
    }
    public var peer: PostboxKit.Peer
    public var ssrc: Swift.UInt32?
    public var videoDescription: TelegramCore.GroupCallParticipantsContext.Participant.VideoDescription?
    public var presentationDescription: TelegramCore.GroupCallParticipantsContext.Participant.VideoDescription?
    public var joinTimestamp: Swift.Int32
    public var raiseHandRating: Swift.Int64?
    public var hasRaiseHand: Swift.Bool
    public var activityTimestamp: Swift.Double?
    public var activityRank: Swift.Int?
    public var muteState: TelegramCore.GroupCallParticipantsContext.Participant.MuteState?
    public var volume: Swift.Int32?
    public var about: Swift.String?
    public var joinedVideo: Swift.Bool
    public init(peer: PostboxKit.Peer, ssrc: Swift.UInt32?, videoDescription: TelegramCore.GroupCallParticipantsContext.Participant.VideoDescription?, presentationDescription: TelegramCore.GroupCallParticipantsContext.Participant.VideoDescription?, joinTimestamp: Swift.Int32, raiseHandRating: Swift.Int64?, hasRaiseHand: Swift.Bool, activityTimestamp: Swift.Double?, activityRank: Swift.Int?, muteState: TelegramCore.GroupCallParticipantsContext.Participant.MuteState?, volume: Swift.Int32?, about: Swift.String?, joinedVideo: Swift.Bool)
    public var description: Swift.String {
      get
    }
    public mutating func mergeActivity(from other: TelegramCore.GroupCallParticipantsContext.Participant, mergeActivityTimestamp: Swift.Bool)
    public static func == (lhs: TelegramCore.GroupCallParticipantsContext.Participant, rhs: TelegramCore.GroupCallParticipantsContext.Participant) -> Swift.Bool
    public static func compare(lhs: TelegramCore.GroupCallParticipantsContext.Participant, rhs: TelegramCore.GroupCallParticipantsContext.Participant, sortAscending: Swift.Bool) -> Swift.Bool
  }
  public struct State : Swift.Equatable {
    public struct DefaultParticipantsAreMuted : Swift.Equatable {
      public var isMuted: Swift.Bool
      public var canChange: Swift.Bool
      public init(isMuted: Swift.Bool, canChange: Swift.Bool)
      public static func == (a: TelegramCore.GroupCallParticipantsContext.State.DefaultParticipantsAreMuted, b: TelegramCore.GroupCallParticipantsContext.State.DefaultParticipantsAreMuted) -> Swift.Bool
    }
    public var participants: [TelegramCore.GroupCallParticipantsContext.Participant]
    public var nextParticipantsFetchOffset: Swift.String?
    public var adminIds: Swift.Set<PostboxKit.PeerId>
    public var isCreator: Swift.Bool
    public var defaultParticipantsAreMuted: TelegramCore.GroupCallParticipantsContext.State.DefaultParticipantsAreMuted
    public var sortAscending: Swift.Bool
    public var recordingStartTimestamp: Swift.Int32?
    public var title: Swift.String?
    public var scheduleTimestamp: Swift.Int32?
    public var subscribedToScheduled: Swift.Bool
    public var totalCount: Swift.Int
    public var isVideoEnabled: Swift.Bool
    public var unmutedVideoLimit: Swift.Int
    public var isStream: Swift.Bool
    public var version: Swift.Int32
    public mutating func mergeActivity(from other: TelegramCore.GroupCallParticipantsContext.State, myPeerId: PostboxKit.PeerId?, previousMyPeerId: PostboxKit.PeerId?, mergeActivityTimestamps: Swift.Bool)
    public init(participants: [TelegramCore.GroupCallParticipantsContext.Participant], nextParticipantsFetchOffset: Swift.String?, adminIds: Swift.Set<PostboxKit.PeerId>, isCreator: Swift.Bool, defaultParticipantsAreMuted: TelegramCore.GroupCallParticipantsContext.State.DefaultParticipantsAreMuted, sortAscending: Swift.Bool, recordingStartTimestamp: Swift.Int32?, title: Swift.String?, scheduleTimestamp: Swift.Int32?, subscribedToScheduled: Swift.Bool, totalCount: Swift.Int, isVideoEnabled: Swift.Bool, unmutedVideoLimit: Swift.Int, isStream: Swift.Bool, version: Swift.Int32)
    public static func == (a: TelegramCore.GroupCallParticipantsContext.State, b: TelegramCore.GroupCallParticipantsContext.State) -> Swift.Bool
  }
  public enum Update {
    public struct StateUpdate {
      public struct ParticipantUpdate {
        public enum ParticipationStatusChange {
          case none
          case joined
          case left
          public static func == (a: TelegramCore.GroupCallParticipantsContext.Update.StateUpdate.ParticipantUpdate.ParticipationStatusChange, b: TelegramCore.GroupCallParticipantsContext.Update.StateUpdate.ParticipantUpdate.ParticipationStatusChange) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var peerId: PostboxKit.PeerId
        public var ssrc: Swift.UInt32?
        public var videoDescription: TelegramCore.GroupCallParticipantsContext.Participant.VideoDescription?
        public var presentationDescription: TelegramCore.GroupCallParticipantsContext.Participant.VideoDescription?
        public var joinTimestamp: Swift.Int32
        public var activityTimestamp: Swift.Double?
        public var raiseHandRating: Swift.Int64?
        public var muteState: TelegramCore.GroupCallParticipantsContext.Participant.MuteState?
        public var participationStatusChange: TelegramCore.GroupCallParticipantsContext.Update.StateUpdate.ParticipantUpdate.ParticipationStatusChange
        public var volume: Swift.Int32?
        public var about: Swift.String?
        public var joinedVideo: Swift.Bool
        public var isMin: Swift.Bool
      }
      public var participantUpdates: [TelegramCore.GroupCallParticipantsContext.Update.StateUpdate.ParticipantUpdate]
      public var version: Swift.Int32
      public var removePendingMuteStates: Swift.Set<PostboxKit.PeerId>
    }
    case state(update: TelegramCore.GroupCallParticipantsContext.Update.StateUpdate)
    case call(isTerminated: Swift.Bool, defaultParticipantsAreMuted: TelegramCore.GroupCallParticipantsContext.State.DefaultParticipantsAreMuted, title: Swift.String?, recordingStartTimestamp: Swift.Int32?, scheduleTimestamp: Swift.Int32?, isVideoEnabled: Swift.Bool, participantCount: Swift.Int?)
  }
  final public class MemberEvent {
    final public let peerId: PostboxKit.PeerId
    final public let canUnmute: Swift.Bool
    final public let joined: Swift.Bool
    public init(peerId: PostboxKit.PeerId, canUnmute: Swift.Bool, joined: Swift.Bool)
    @objc deinit
  }
  final public let myPeerId: PostboxKit.PeerId
  final public let id: Swift.Int64
  final public let accessHash: Swift.Int64
  final public var immediateState: TelegramCore.GroupCallParticipantsContext.State?
  final public var state: SwiftSignalKit.Signal<TelegramCore.GroupCallParticipantsContext.State, SwiftSignalKit.NoError> {
    get
  }
  final public var activeSpeakers: SwiftSignalKit.Signal<Swift.Set<PostboxKit.PeerId>, SwiftSignalKit.NoError> {
    get
  }
  final public var memberEvents: SwiftSignalKit.Signal<TelegramCore.GroupCallParticipantsContext.MemberEvent, SwiftSignalKit.NoError> {
    get
  }
  public struct ServiceState {
  }
  final public var serviceState: TelegramCore.GroupCallParticipantsContext.ServiceState {
    get
  }
  @objc deinit
  final public func addUpdates(updates: [TelegramCore.GroupCallParticipantsContext.Update])
  final public func removeLocalPeerId()
  final public func updateAdminIds(_ adminIds: Swift.Set<PostboxKit.PeerId>)
  final public func reportSpeakingParticipants(ids: [PostboxKit.PeerId : Swift.UInt32])
  final public func ensureHaveParticipants(ssrcs: Swift.Set<Swift.UInt32>)
  final public func updateMuteState(peerId: PostboxKit.PeerId, muteState: TelegramCore.GroupCallParticipantsContext.Participant.MuteState?, volume: Swift.Int32?, raiseHand: Swift.Bool?)
  final public func updateVideoState(peerId: PostboxKit.PeerId, isVideoMuted: Swift.Bool?, isVideoPaused: Swift.Bool?, isPresentationPaused: Swift.Bool?)
  final public func raiseHand()
  final public func lowerHand()
  final public func updateShouldBeRecording(_ shouldBeRecording: Swift.Bool, title: Swift.String?, videoOrientation: Swift.Bool?)
  final public func updateDefaultParticipantsAreMuted(isMuted: Swift.Bool)
  final public func resetInviteLinks()
  final public func toggleScheduledSubscription(_ subscribe: Swift.Bool)
  final public func loadMore(token: Swift.String)
}
public enum InviteToGroupCallError {
  case generic
  public static func == (a: TelegramCore.InviteToGroupCallError, b: TelegramCore.InviteToGroupCallError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct GroupCallInviteLinks {
  public let listenerLink: Swift.String
  public let speakerLink: Swift.String?
  public init(listenerLink: Swift.String, speakerLink: Swift.String?)
}
public enum EditGroupCallTitleError {
  case generic
  public static func == (a: TelegramCore.EditGroupCallTitleError, b: TelegramCore.EditGroupCallTitleError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class CachedDisplayAsPeers : Swift.Codable {
  final public let peerIds: [PostboxKit.PeerId]
  final public let timestamp: Swift.Int32
  public init(peerIds: [PostboxKit.PeerId], timestamp: Swift.Int32)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AudioBroadcastDataSource {
  @objc deinit
}
public struct GetAudioBroadcastPartResult {
  public enum Status {
    case data(Foundation.Data)
    case notReady
    case resyncNeeded
    case rejoinNeeded
  }
  public var status: TelegramCore.GetAudioBroadcastPartResult.Status
  public var responseTimestamp: Swift.Double
  public init(status: TelegramCore.GetAudioBroadcastPartResult.Status, responseTimestamp: Swift.Double)
}
public struct GroupCallStreamCredentials : Swift.Equatable {
  public var url: Swift.String
  public var streamKey: Swift.String
  public static func == (a: TelegramCore.GroupCallStreamCredentials, b: TelegramCore.GroupCallStreamCredentials) -> Swift.Bool
}
public enum GetGroupCallStreamCredentialsError {
  case generic
  public static func == (a: TelegramCore.GetGroupCallStreamCredentialsError, b: TelegramCore.GetGroupCallStreamCredentialsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SecureIdTemporaryRegistrationValue : Swift.Equatable {
  public var verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference]
  public var translations: [TelegramCore.SecureIdVerificationDocumentReference]
  public init(verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference], translations: [TelegramCore.SecureIdVerificationDocumentReference])
  public static func == (lhs: TelegramCore.SecureIdTemporaryRegistrationValue, rhs: TelegramCore.SecureIdTemporaryRegistrationValue) -> Swift.Bool
}
public class ConsumableContentMessageAttribute : PostboxKit.MessageAttribute {
  final public let consumed: Swift.Bool
  public init(consumed: Swift.Bool)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public func extractMediaResourceDebugInfo(resource: PostboxKit.MediaResource) -> Swift.String?
public protocol TelegramMultipartFetchableResource : TelegramCore.TelegramMediaResource {
  var datacenterId: Swift.Int { get }
}
public protocol TelegramCloudMediaResourceWithFileReference {
  var fileReference: Foundation.Data? { get }
}
extension TelegramCore.CloudFileMediaResource : TelegramCore.TelegramMultipartFetchableResource, TelegramCore.TelegramCloudMediaResourceWithFileReference {
}
extension TelegramCore.CloudPhotoSizeMediaResource : TelegramCore.TelegramMultipartFetchableResource, TelegramCore.TelegramCloudMediaResourceWithFileReference {
}
extension TelegramCore.CloudDocumentSizeMediaResource : TelegramCore.TelegramMultipartFetchableResource, TelegramCore.TelegramCloudMediaResourceWithFileReference {
}
extension TelegramCore.CloudPeerPhotoSizeMediaResource : TelegramCore.TelegramMultipartFetchableResource {
}
extension TelegramCore.CloudStickerPackThumbnailMediaResource : TelegramCore.TelegramMultipartFetchableResource {
}
extension TelegramCore.CloudDocumentMediaResource : TelegramCore.TelegramMultipartFetchableResource, TelegramCore.TelegramCloudMediaResourceWithFileReference {
}
extension TelegramCore.SecretFileMediaResource : TelegramCore.TelegramMultipartFetchableResource {
}
public class ReplyMessageAttribute : PostboxKit.MessageAttribute {
  final public let messageId: PostboxKit.MessageId
  final public let threadMessageId: PostboxKit.MessageId?
  public var associatedMessageIds: [PostboxKit.MessageId] {
    get
  }
  public init(messageId: PostboxKit.MessageId, threadMessageId: PostboxKit.MessageId?)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
extension PostboxKit.Message {
  final public var effectiveReplyThreadMessageId: PostboxKit.MessageId? {
    get
  }
}
public enum UpdateMessageReaction {
  case builtin(Swift.String)
  case custom(fileId: Swift.Int64, file: TelegramCore.TelegramMediaFile?)
  public var reaction: TelegramCore.MessageReaction.Reaction {
    get
  }
}
public func updateMessageReactionsInteractively(account: TelegramCore.Account, messageId: PostboxKit.MessageId, reactions: [TelegramCore.UpdateMessageReaction], isLarge: Swift.Bool, storeAsRecentlyUsed: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
extension TelegramCore.EngineMessageReactionListContext.State {
  public init(message: TelegramCore.EngineMessage, reaction: TelegramCore.MessageReaction.Reaction?)
}
@_hasMissingDesignatedInitializers final public class EngineMessageReactionListContext {
  final public class Item : Swift.Equatable {
    final public let peer: TelegramCore.EnginePeer
    final public let reaction: TelegramCore.MessageReaction.Reaction?
    public init(peer: TelegramCore.EnginePeer, reaction: TelegramCore.MessageReaction.Reaction?)
    public static func == (lhs: TelegramCore.EngineMessageReactionListContext.Item, rhs: TelegramCore.EngineMessageReactionListContext.Item) -> Swift.Bool
    @objc deinit
  }
  public struct State : Swift.Equatable {
    public var hasOutgoingReaction: Swift.Bool
    public var totalCount: Swift.Int
    public var items: [TelegramCore.EngineMessageReactionListContext.Item]
    public var canLoadMore: Swift.Bool
    public init(hasOutgoingReaction: Swift.Bool, totalCount: Swift.Int, items: [TelegramCore.EngineMessageReactionListContext.Item], canLoadMore: Swift.Bool)
    public static func == (a: TelegramCore.EngineMessageReactionListContext.State, b: TelegramCore.EngineMessageReactionListContext.State) -> Swift.Bool
  }
  final public var state: SwiftSignalKit.Signal<TelegramCore.EngineMessageReactionListContext.State, SwiftSignalKit.NoError> {
    get
  }
  final public func loadMore()
  @objc deinit
}
public enum UpdatePeerAllowedReactionsError {
  case generic
  public static func == (a: TelegramCore.UpdatePeerAllowedReactionsError, b: TelegramCore.UpdatePeerAllowedReactionsError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct WallpapersState : Swift.Codable, Swift.Equatable {
  public var wallpapers: [TelegramCore.TelegramWallpaper]
  public static var `default`: TelegramCore.WallpapersState {
    get
  }
  public init(wallpapers: [TelegramCore.TelegramWallpaper])
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.WallpapersState, b: TelegramCore.WallpapersState) -> Swift.Bool
}
extension TelegramCore.WallpapersState {
  public static func update(transaction: TelegramCore.AccountManagerModifier<TelegramCore.TelegramAccountManagerTypes>, _ f: (TelegramCore.WallpapersState) -> TelegramCore.WallpapersState)
}
@_hasMissingDesignatedInitializers public class UnauthorizedAccount {
  final public let networkArguments: TelegramCore.NetworkInitializationArguments
  final public let id: TelegramCore.AccountRecordId
  final public let rootPath: Swift.String
  final public let basePath: Swift.String
  final public let testingEnvironment: Swift.Bool
  final public let postbox: PostboxKit.Postbox
  final public let network: TelegramCore.Network
  public var updateLoginTokenEvents: SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError> {
    get
  }
  public var serviceNotificationEvents: SwiftSignalKit.Signal<Swift.String, SwiftSignalKit.NoError> {
    get
  }
  public var masterDatacenterId: Swift.Int32 {
    get
  }
  final public let shouldBeServiceTaskMaster: SwiftSignalKit.Promise<TelegramCore.AccountServiceTaskMasterMode>
  public func changedMasterDatacenterId(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, masterDatacenterId: Swift.Int32) -> SwiftSignalKit.Signal<TelegramCore.UnauthorizedAccount, SwiftSignalKit.NoError>
  @objc deinit
}
public func accountRecordIdPathName(_ id: TelegramCore.AccountRecordId) -> Swift.String
public enum AccountResult {
  case upgrading(Swift.Float)
  case unauthorized(TelegramCore.UnauthorizedAccount)
  case authorized(TelegramCore.Account)
}
public func accountWithId(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, networkArguments: TelegramCore.NetworkInitializationArguments, id: TelegramCore.AccountRecordId, encryptionParameters: PostboxKit.ValueBoxEncryptionParameters, supplementary: Swift.Bool, rootPath: Swift.String, beginWithTestingEnvironment: Swift.Bool, backupData: TelegramCore.AccountBackupData?, auxiliaryMethods: TelegramCore.AccountAuxiliaryMethods, shouldKeepAutoConnection: Swift.Bool = true) -> SwiftSignalKit.Signal<TelegramCore.AccountResult, SwiftSignalKit.NoError>
public enum TwoStepPasswordDerivation {
  case unknown
  case sha256_sha256_PBKDF2_HMAC_sha512_sha256_srp(salt1: Foundation.Data, salt2: Foundation.Data, iterations: Swift.Int32, g: Swift.Int32, p: Foundation.Data)
}
public enum TwoStepSecurePasswordDerivation {
  case unknown
  case sha512(salt: Foundation.Data)
  case PBKDF2_HMAC_sha512(salt: Foundation.Data, iterations: Swift.Int32)
}
public struct TwoStepSRPSessionData {
  public let id: Swift.Int64
  public let B: Foundation.Data
}
public struct TwoStepAuthData {
  public let nextPasswordDerivation: TelegramCore.TwoStepPasswordDerivation
  public let currentPasswordDerivation: TelegramCore.TwoStepPasswordDerivation?
  public let srpSessionData: TelegramCore.TwoStepSRPSessionData?
  public let hasRecovery: Swift.Bool
  public let hasSecretValues: Swift.Bool
  public let currentHint: Swift.String?
  public let unconfirmedEmailPattern: Swift.String?
  public let secretRandom: Foundation.Data
  public let nextSecurePasswordDerivation: TelegramCore.TwoStepSecurePasswordDerivation
  public let pendingResetTimestamp: Swift.Int32?
  public let loginEmailPattern: Swift.String?
}
public func hexString(_ data: Foundation.Data) -> Swift.String
public func dataWithHexString(_ string: Swift.String) -> Foundation.Data
public enum AccountServiceTaskMasterMode {
  case now
  case always
  case never
  public static func == (a: TelegramCore.AccountServiceTaskMasterMode, b: TelegramCore.AccountServiceTaskMasterMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AccountNetworkProxyState : Swift.Equatable {
  public let address: Swift.String
  public let hasConnectionIssues: Swift.Bool
  public static func == (a: TelegramCore.AccountNetworkProxyState, b: TelegramCore.AccountNetworkProxyState) -> Swift.Bool
}
public enum AccountNetworkState : Swift.Equatable {
  case waitingForNetwork
  case connecting(proxy: TelegramCore.AccountNetworkProxyState?)
  case updating(proxy: TelegramCore.AccountNetworkProxyState?)
  case online(proxy: TelegramCore.AccountNetworkProxyState?)
  public static func == (a: TelegramCore.AccountNetworkState, b: TelegramCore.AccountNetworkState) -> Swift.Bool
}
final public class AccountAuxiliaryMethods {
  final public let fetchResource: (TelegramCore.Account, PostboxKit.MediaResource, SwiftSignalKit.Signal<[(Swift.Range<Swift.Int64>, PostboxKit.MediaBoxFetchPriority)], SwiftSignalKit.NoError>, PostboxKit.MediaResourceFetchParameters?) -> SwiftSignalKit.Signal<PostboxKit.MediaResourceDataFetchResult, PostboxKit.MediaResourceDataFetchError>?
  final public let fetchResourceMediaReferenceHash: (PostboxKit.MediaResource) -> SwiftSignalKit.Signal<Foundation.Data?, SwiftSignalKit.NoError>
  final public let prepareSecretThumbnailData: (PostboxKit.MediaResourceData) -> (TelegramCore.PixelDimensions, Foundation.Data)?
  final public let backgroundUpload: (PostboxKit.Postbox, TelegramCore.Network, PostboxKit.MediaResource) -> SwiftSignalKit.Signal<Swift.String?, SwiftSignalKit.NoError>
  public init(fetchResource: @escaping (TelegramCore.Account, PostboxKit.MediaResource, SwiftSignalKit.Signal<[(Swift.Range<Swift.Int64>, PostboxKit.MediaBoxFetchPriority)], SwiftSignalKit.NoError>, PostboxKit.MediaResourceFetchParameters?) -> SwiftSignalKit.Signal<PostboxKit.MediaResourceDataFetchResult, PostboxKit.MediaResourceDataFetchError>?, fetchResourceMediaReferenceHash: @escaping (PostboxKit.MediaResource) -> SwiftSignalKit.Signal<Foundation.Data?, SwiftSignalKit.NoError>, prepareSecretThumbnailData: @escaping (PostboxKit.MediaResourceData) -> (TelegramCore.PixelDimensions, Foundation.Data)?, backgroundUpload: @escaping (PostboxKit.Postbox, TelegramCore.Network, PostboxKit.MediaResource) -> SwiftSignalKit.Signal<Swift.String?, SwiftSignalKit.NoError>)
  @objc deinit
}
public struct AccountRunningImportantTasks : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public static let other: TelegramCore.AccountRunningImportantTasks
  public static let pendingMessages: TelegramCore.AccountRunningImportantTasks
  public typealias ArrayLiteralElement = TelegramCore.AccountRunningImportantTasks
  public typealias Element = TelegramCore.AccountRunningImportantTasks
  public typealias RawValue = Swift.Int32
}
public struct MasterNotificationKey : Swift.Codable {
  public let id: Foundation.Data
  public let data: Foundation.Data
  public init(id: Foundation.Data, data: Foundation.Data)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public func masterNotificationsKey(account: TelegramCore.Account, ignoreDisabled: Swift.Bool) -> SwiftSignalKit.Signal<TelegramCore.MasterNotificationKey, SwiftSignalKit.NoError>
public func existingMasterNotificationsKey(postbox: PostboxKit.Postbox) -> SwiftSignalKit.Signal<TelegramCore.MasterNotificationKey?, SwiftSignalKit.NoError>
public func notificationPayloadKeyId(data: Foundation.Data) -> Foundation.Data?
public func decryptedNotificationPayload(key: TelegramCore.MasterNotificationKey, data: Foundation.Data) -> Foundation.Data?
public func decryptedNotificationPayload(account: TelegramCore.Account, data: Foundation.Data) -> SwiftSignalKit.Signal<Foundation.Data?, SwiftSignalKit.NoError>
public func accountBackupData(postbox: PostboxKit.Postbox) -> SwiftSignalKit.Signal<TelegramCore.AccountBackupData?, SwiftSignalKit.NoError>
public class Account {
  final public let id: TelegramCore.AccountRecordId
  final public let basePath: Swift.String
  final public let testingEnvironment: Swift.Bool
  final public let supplementary: Swift.Bool
  final public let postbox: PostboxKit.Postbox
  final public let network: TelegramCore.Network
  final public let networkArguments: TelegramCore.NetworkInitializationArguments
  final public let peerId: PostboxKit.PeerId
  final public let auxiliaryMethods: TelegramCore.AccountAuxiliaryMethods
  public var stateManager: TelegramCore.AccountStateManager! {
    get
  }
  public var callSessionManager: TelegramCore.CallSessionManager! {
    get
  }
  public var viewTracker: TelegramCore.AccountViewTracker! {
    get
  }
  public var pendingMessageManager: TelegramCore.PendingMessageManager! {
    get
  }
  public var pendingUpdateMessageManager: TelegramCore.PendingUpdateMessageManager! {
    get
  }
  final public let importableContacts: SwiftSignalKit.Promise<[TelegramCore.DeviceContactNormalizedPhoneNumber : TelegramCore.ImportableDeviceContactData]>
  final public let shouldBeServiceTaskMaster: SwiftSignalKit.Promise<TelegramCore.AccountServiceTaskMasterMode>
  final public let shouldKeepOnlinePresence: SwiftSignalKit.Promise<Swift.Bool>
  final public let autolockReportDeadline: SwiftSignalKit.Promise<Swift.Int32?>
  final public let shouldExplicitelyKeepWorkerConnections: SwiftSignalKit.Promise<Swift.Bool>
  final public let shouldKeepBackgroundDownloadConnections: SwiftSignalKit.Promise<Swift.Bool>
  public var networkState: SwiftSignalKit.Signal<TelegramCore.AccountNetworkState, SwiftSignalKit.NoError> {
    get
  }
  public var networkType: SwiftSignalKit.Signal<TelegramCore.NetworkType, SwiftSignalKit.NoError> {
    get
  }
  public var immediateNetworkType: TelegramCore.NetworkType {
    get
  }
  public var loggedOut: SwiftSignalKit.Signal<Swift.Bool, SwiftSignalKit.NoError> {
    get
  }
  public var importantTasksRunning: SwiftSignalKit.Signal<TelegramCore.AccountRunningImportantTasks, SwiftSignalKit.NoError> {
    get
  }
  public init(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, id: TelegramCore.AccountRecordId, basePath: Swift.String, testingEnvironment: Swift.Bool, postbox: PostboxKit.Postbox, network: TelegramCore.Network, networkArguments: TelegramCore.NetworkInitializationArguments, peerId: PostboxKit.PeerId, auxiliaryMethods: TelegramCore.AccountAuxiliaryMethods, supplementary: Swift.Bool)
  @objc deinit
  public func resetStateManagement()
  public func resetCachedData()
  public func cleanupTasks(lowImpact: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
  public func restartContactManagement()
  public func addAdditionalPreloadHistoryPeerId(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Disposable
  public func peerInputActivities(peerId: TelegramCore.PeerActivitySpace) -> SwiftSignalKit.Signal<[(PostboxKit.PeerId, TelegramCore.PeerInputActivity)], SwiftSignalKit.NoError>
  public func allPeerInputActivities() -> SwiftSignalKit.Signal<[TelegramCore.PeerActivitySpace : [(PostboxKit.PeerId, TelegramCore.PeerInputActivity)]], SwiftSignalKit.NoError>
  public func updateLocalInputActivity(peerId: TelegramCore.PeerActivitySpace, activity: TelegramCore.PeerInputActivity, isPresent: Swift.Bool)
  public func acquireLocalInputActivity(peerId: TelegramCore.PeerActivitySpace, activity: TelegramCore.PeerInputActivity) -> SwiftSignalKit.Disposable
  public func addUpdates(serializedData: Foundation.Data)
}
public func accountNetworkUsageStats(account: TelegramCore.Account, reset: TelegramCore.ResetNetworkUsageStats) -> SwiftSignalKit.Signal<TelegramCore.NetworkUsageStats, SwiftSignalKit.NoError>
public func updateAccountNetworkUsageStats(account: TelegramCore.Account, category: TelegramCore.MediaResourceStatsCategory, delta: TelegramCore.NetworkUsageStatsConnectionsEntry)
public typealias FetchCachedResourceRepresentation = (_ account: TelegramCore.Account, _ resource: PostboxKit.MediaResource, _ representation: PostboxKit.CachedMediaResourceRepresentation) -> SwiftSignalKit.Signal<PostboxKit.CachedMediaResourceRepresentationResult, SwiftSignalKit.NoError>
public typealias TransformOutgoingMessageMedia = (_ postbox: PostboxKit.Postbox, _ network: TelegramCore.Network, _ media: TelegramCore.AnyMediaReference, _ userInteractive: Swift.Bool) -> SwiftSignalKit.Signal<TelegramCore.AnyMediaReference?, SwiftSignalKit.NoError>
public func setupAccount(_ account: TelegramCore.Account, fetchCachedResourceRepresentation: TelegramCore.FetchCachedResourceRepresentation? = nil, transformOutgoingMessageMedia: TelegramCore.TransformOutgoingMessageMedia? = nil)
public func standaloneStateManager(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, networkArguments: TelegramCore.NetworkInitializationArguments, id: TelegramCore.AccountRecordId, encryptionParameters: PostboxKit.ValueBoxEncryptionParameters, rootPath: Swift.String, auxiliaryMethods: TelegramCore.AccountAuxiliaryMethods) -> SwiftSignalKit.Signal<TelegramCore.AccountStateManager?, SwiftSignalKit.NoError>
public enum TelegramAccountRecordAttribute : TelegramCore.AccountRecordAttribute, Swift.Equatable {
  case backupData(TelegramCore.AccountBackupDataAttribute)
  case environment(TelegramCore.AccountEnvironmentAttribute)
  case sortOrder(TelegramCore.AccountSortOrderAttribute)
  case loggedOut(TelegramCore.LoggedOutAccountAttribute)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func isEqual(to: TelegramCore.AccountRecordAttribute) -> Swift.Bool
  public static func == (a: TelegramCore.TelegramAccountRecordAttribute, b: TelegramCore.TelegramAccountRecordAttribute) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class TelegramAccountManagerTypes : TelegramCore.AccountManagerTypes {
  public typealias Attribute = TelegramCore.TelegramAccountRecordAttribute
  @objc deinit
}
public func initializeAccountManagement()
public func rootPathForBasePath(_ appGroupPath: Swift.String) -> Swift.String
public func performAppGroupUpgrades(appGroupPath: Swift.String, rootPath: Swift.String)
public func currentAccount(allocateIfNotExists: Swift.Bool, networkArguments: TelegramCore.NetworkInitializationArguments, supplementary: Swift.Bool, manager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, rootPath: Swift.String, auxiliaryMethods: TelegramCore.AccountAuxiliaryMethods, encryptionParameters: PostboxKit.ValueBoxEncryptionParameters) -> SwiftSignalKit.Signal<TelegramCore.AccountResult?, SwiftSignalKit.NoError>
public func logoutFromAccount(id: TelegramCore.AccountRecordId, accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, alreadyLoggedOutRemotely: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public func managedCleanupAccounts(networkArguments: TelegramCore.NetworkInitializationArguments, accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, rootPath: Swift.String, auxiliaryMethods: TelegramCore.AccountAuxiliaryMethods, encryptionParameters: PostboxKit.ValueBoxEncryptionParameters) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public typealias AccountManagerPreferencesEntry = PostboxKit.PreferencesEntry
public struct MessageReaction : Swift.Equatable, PostboxKit.PostboxCoding {
  public enum Reaction : Swift.Hashable, Swift.Codable, PostboxKit.PostboxCoding {
    case builtin(Swift.String)
    case custom(Swift.Int64)
    public init(from decoder: Swift.Decoder) throws
    public init(decoder: PostboxKit.PostboxDecoder)
    public func encode(to encoder: Swift.Encoder) throws
    public func encode(_ encoder: PostboxKit.PostboxEncoder)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: TelegramCore.MessageReaction.Reaction, b: TelegramCore.MessageReaction.Reaction) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public var value: TelegramCore.MessageReaction.Reaction
  public var count: Swift.Int32
  public var chosenOrder: Swift.Int?
  public var isSelected: Swift.Bool {
    get
  }
  public init(value: TelegramCore.MessageReaction.Reaction, count: Swift.Int32, chosenOrder: Swift.Int?)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.MessageReaction, b: TelegramCore.MessageReaction) -> Swift.Bool
}
final public class ReactionsMessageAttribute : Swift.Equatable, PostboxKit.MessageAttribute {
  public struct RecentPeer : Swift.Equatable, PostboxKit.PostboxCoding {
    public var value: TelegramCore.MessageReaction.Reaction
    public var isLarge: Swift.Bool
    public var isUnseen: Swift.Bool
    public var peerId: PostboxKit.PeerId
    public init(value: TelegramCore.MessageReaction.Reaction, isLarge: Swift.Bool, isUnseen: Swift.Bool, peerId: PostboxKit.PeerId)
    public init(decoder: PostboxKit.PostboxDecoder)
    public func encode(_ encoder: PostboxKit.PostboxEncoder)
    public static func == (a: TelegramCore.ReactionsMessageAttribute.RecentPeer, b: TelegramCore.ReactionsMessageAttribute.RecentPeer) -> Swift.Bool
  }
  final public let canViewList: Swift.Bool
  final public let reactions: [TelegramCore.MessageReaction]
  final public let recentPeers: [TelegramCore.ReactionsMessageAttribute.RecentPeer]
  final public var associatedPeerIds: [PostboxKit.PeerId] {
    get
  }
  final public var associatedMediaIds: [PostboxKit.MediaId] {
    get
  }
  public init(canViewList: Swift.Bool, reactions: [TelegramCore.MessageReaction], recentPeers: [TelegramCore.ReactionsMessageAttribute.RecentPeer])
  required public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.ReactionsMessageAttribute, rhs: TelegramCore.ReactionsMessageAttribute) -> Swift.Bool
  final public var hasUnseen: Swift.Bool {
    get
  }
  final public func withAllSeen() -> TelegramCore.ReactionsMessageAttribute
  @objc deinit
}
final public class PendingReactionsMessageAttribute : PostboxKit.MessageAttribute {
  public struct PendingReaction : Swift.Equatable, PostboxKit.PostboxCoding {
    public var value: TelegramCore.MessageReaction.Reaction
    public init(value: TelegramCore.MessageReaction.Reaction)
    public init(decoder: PostboxKit.PostboxDecoder)
    public func encode(_ encoder: PostboxKit.PostboxEncoder)
    public static func == (a: TelegramCore.PendingReactionsMessageAttribute.PendingReaction, b: TelegramCore.PendingReactionsMessageAttribute.PendingReaction) -> Swift.Bool
  }
  final public let accountPeerId: PostboxKit.PeerId?
  final public let reactions: [TelegramCore.PendingReactionsMessageAttribute.PendingReaction]
  final public let isLarge: Swift.Bool
  final public let storeAsRecentlyUsed: Swift.Bool
  final public var associatedPeerIds: [PostboxKit.PeerId] {
    get
  }
  final public var associatedMediaIds: [PostboxKit.MediaId] {
    get
  }
  public init(accountPeerId: PostboxKit.PeerId?, reactions: [TelegramCore.PendingReactionsMessageAttribute.PendingReaction], isLarge: Swift.Bool, storeAsRecentlyUsed: Swift.Bool)
  required public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
final public class SynchronizeEmojiKeywordsOperation : PostboxKit.PostboxCoding {
  final public let inputLanguageCode: Swift.String
  final public let languageCode: Swift.String?
  final public let fromVersion: Swift.Int32?
  public init(inputLanguageCode: Swift.String, languageCode: Swift.String?, fromVersion: Swift.Int32?)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public func updateContentPrivacySettings(postbox: PostboxKit.Postbox, _ f: @escaping (TelegramCore.ContentPrivacySettings) -> TelegramCore.ContentPrivacySettings) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public enum ConnectionStatus : Swift.Equatable {
  case waitingForNetwork
  case connecting(proxyAddress: Swift.String?, proxyHasConnectionIssues: Swift.Bool)
  case updating(proxyAddress: Swift.String?)
  case online(proxyAddress: Swift.String?)
  public static func == (a: TelegramCore.ConnectionStatus, b: TelegramCore.ConnectionStatus) -> Swift.Bool
}
public protocol NetworkRequestDependencyTag {
  func shouldDependOn(other: TelegramCore.NetworkRequestDependencyTag) -> Swift.Bool
}
public struct NetworkUsageStatsDirectionsEntry : Swift.Equatable {
  public let incoming: Swift.Int64
  public let outgoing: Swift.Int64
  public init(incoming: Swift.Int64, outgoing: Swift.Int64)
  public static func == (lhs: TelegramCore.NetworkUsageStatsDirectionsEntry, rhs: TelegramCore.NetworkUsageStatsDirectionsEntry) -> Swift.Bool
}
public struct NetworkUsageStatsConnectionsEntry : Swift.Equatable {
  public let cellular: TelegramCore.NetworkUsageStatsDirectionsEntry
  public let wifi: TelegramCore.NetworkUsageStatsDirectionsEntry
  public init(cellular: TelegramCore.NetworkUsageStatsDirectionsEntry, wifi: TelegramCore.NetworkUsageStatsDirectionsEntry)
  public static func == (lhs: TelegramCore.NetworkUsageStatsConnectionsEntry, rhs: TelegramCore.NetworkUsageStatsConnectionsEntry) -> Swift.Bool
}
public struct NetworkUsageStats : Swift.Equatable {
  public var generic: TelegramCore.NetworkUsageStatsConnectionsEntry
  public var image: TelegramCore.NetworkUsageStatsConnectionsEntry
  public var video: TelegramCore.NetworkUsageStatsConnectionsEntry
  public var audio: TelegramCore.NetworkUsageStatsConnectionsEntry
  public var file: TelegramCore.NetworkUsageStatsConnectionsEntry
  public var call: TelegramCore.NetworkUsageStatsConnectionsEntry
  public var sticker: TelegramCore.NetworkUsageStatsConnectionsEntry
  public var voiceMessage: TelegramCore.NetworkUsageStatsConnectionsEntry
  public var resetWifiTimestamp: Swift.Int32
  public var resetCellularTimestamp: Swift.Int32
  public static func == (a: TelegramCore.NetworkUsageStats, b: TelegramCore.NetworkUsageStats) -> Swift.Bool
}
public struct ResetNetworkUsageStats : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public init()
  public static let wifi: TelegramCore.ResetNetworkUsageStats
  public static let cellular: TelegramCore.ResetNetworkUsageStats
  public typealias ArrayLiteralElement = TelegramCore.ResetNetworkUsageStats
  public typealias Element = TelegramCore.ResetNetworkUsageStats
  public typealias RawValue = Swift.Int32
}
public struct NetworkInitializationArguments {
  public let apiId: Swift.Int32
  public let apiHash: Swift.String
  public let languagesCategory: Swift.String
  public let appVersion: Swift.String
  public let voipMaxLayer: Swift.Int32
  public let voipVersions: [TelegramCore.CallSessionManagerImplementationVersion]
  public let appData: SwiftSignalKit.Signal<Foundation.Data?, SwiftSignalKit.NoError>
  public let autolockDeadine: SwiftSignalKit.Signal<Swift.Int32?, SwiftSignalKit.NoError>
  public let encryptionProvider: EncryptionProviderKit.EncryptionProvider
  public let resolvedDeviceName: [Swift.String : Swift.String]?
  public init(apiId: Swift.Int32, apiHash: Swift.String, languagesCategory: Swift.String, appVersion: Swift.String, voipMaxLayer: Swift.Int32, voipVersions: [TelegramCore.CallSessionManagerImplementationVersion], appData: SwiftSignalKit.Signal<Foundation.Data?, SwiftSignalKit.NoError>, autolockDeadine: SwiftSignalKit.Signal<Swift.Int32?, SwiftSignalKit.NoError>, encryptionProvider: EncryptionProviderKit.EncryptionProvider, resolvedDeviceName: [Swift.String : Swift.String]?)
}
public struct NetworkRequestAdditionalInfo : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public static let acknowledgement: TelegramCore.NetworkRequestAdditionalInfo
  public static let progress: TelegramCore.NetworkRequestAdditionalInfo
  public typealias ArrayLiteralElement = TelegramCore.NetworkRequestAdditionalInfo
  public typealias Element = TelegramCore.NetworkRequestAdditionalInfo
  public typealias RawValue = Swift.Int32
}
public enum NetworkRequestResult<T> {
  case result(T)
  case acknowledged
  case progress(Swift.Float, Swift.Int32)
}
@objc @_hasMissingDesignatedInitializers final public class Network : ObjectiveC.NSObject, MtProtoKit.MTRequestMessageServiceDelegate {
  final public let encryptionProvider: EncryptionProviderKit.EncryptionProvider
  final public let datacenterId: Swift.Int
  final public let context: MtProtoKit.MTContext
  final public var connectionStatus: SwiftSignalKit.Signal<TelegramCore.ConnectionStatus, SwiftSignalKit.NoError> {
    get
  }
  final public func dropConnectionStatus()
  final public let shouldKeepConnection: SwiftSignalKit.Promise<Swift.Bool>
  final public let shouldExplicitelyKeepWorkerConnections: SwiftSignalKit.Promise<Swift.Bool>
  final public let shouldKeepBackgroundDownloadConnections: SwiftSignalKit.Promise<Swift.Bool>
  final public var mockConnectionStatus: TelegramCore.ConnectionStatus? {
    get
    set
  }
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
  final public var globalTime: Foundation.TimeInterval {
    get
  }
  final public var globalTimeDifference: Foundation.TimeInterval {
    get
  }
  final public var currentGlobalTime: SwiftSignalKit.Signal<Swift.Double, SwiftSignalKit.NoError> {
    get
  }
  @objc final public func requestMessageServiceAuthorizationRequired(_ requestMessageService: MtProtoKit.MTRequestMessageService!)
  final public func getApproximateRemoteTimestamp() -> Swift.Int32
  final public func mergeBackupDatacenterAddress(datacenterId: Swift.Int32, host: Swift.String, port: Swift.Int32, secret: Foundation.Data?)
  final public func requestWithAdditionalInfo<T>(_ data: (TelegramApi.FunctionDescription, TelegramApi.Buffer, TelegramApi.DeserializeFunctionResponse<T>), info: TelegramCore.NetworkRequestAdditionalInfo, tag: TelegramCore.NetworkRequestDependencyTag? = nil, automaticFloodWait: Swift.Bool = true) -> SwiftSignalKit.Signal<TelegramCore.NetworkRequestResult<T>, MtProtoKit.MTRpcError>
  final public func request<T>(_ data: (TelegramApi.FunctionDescription, TelegramApi.Buffer, TelegramApi.DeserializeFunctionResponse<T>), tag: TelegramCore.NetworkRequestDependencyTag? = nil, automaticFloodWait: Swift.Bool = true) -> SwiftSignalKit.Signal<T, MtProtoKit.MTRpcError>
}
public func retryRequest<T>(signal: SwiftSignalKit.Signal<T, MtProtoKit.MTRpcError>) -> SwiftSignalKit.Signal<T, SwiftSignalKit.NoError>
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class Preferences {
    final public func update(id: PostboxKit.ValueBoxKey, _ f: @escaping (PostboxKit.PreferencesEntry?) -> PostboxKit.PreferencesEntry?) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    @objc deinit
  }
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class OrderedLists {
    final public func addOrMoveToFirstPosition<T>(collectionId: Swift.Int32, id: PostboxKit.MemoryBuffer, item: T, removeTailIfCountExceeds: Swift.Int?) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError> where T : Swift.Decodable, T : Swift.Encodable
    final public func clear(collectionId: Swift.Int32) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func removeItem(collectionId: Swift.Int32, id: PostboxKit.MemoryBuffer) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    @objc deinit
  }
}
public enum SentAuthorizationCodeType : PostboxKit.PostboxCoding, Swift.Equatable {
  case otherSession(length: Swift.Int32)
  case sms(length: Swift.Int32)
  case call(length: Swift.Int32)
  case flashCall(pattern: Swift.String)
  case missedCall(numberPrefix: Swift.String, length: Swift.Int32)
  case email(emailPattern: Swift.String, length: Swift.Int32, nextPhoneLoginDate: Swift.Int32?, appleSignInAllowed: Swift.Bool, setup: Swift.Bool)
  case emailSetupRequired(appleSignInAllowed: Swift.Bool)
  case fragment(url: Swift.String, length: Swift.Int32)
  case firebase(pushTimeout: Swift.Int32?, length: Swift.Int32)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.SentAuthorizationCodeType, b: TelegramCore.SentAuthorizationCodeType) -> Swift.Bool
}
public enum AuthorizationCodeNextType : Swift.Int32 {
  case sms
  case call
  case flashCall
  case missedCall
  case fragment
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
public struct UnauthorizedAccountTermsOfService : PostboxKit.PostboxCoding, Swift.Equatable {
  public let id: Swift.String
  public let text: Swift.String
  public let entities: [TelegramCore.MessageTextEntity]
  public let ageConfirmation: Swift.Int32?
  public init(id: Swift.String, text: Swift.String, entities: [TelegramCore.MessageTextEntity], ageConfirmation: Swift.Int32?)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.UnauthorizedAccountTermsOfService, b: TelegramCore.UnauthorizedAccountTermsOfService) -> Swift.Bool
}
public enum UnauthorizedAccountStateContents : PostboxKit.PostboxCoding, Swift.Equatable {
  case empty
  case phoneEntry(countryCode: Swift.Int32, number: Swift.String)
  case confirmationCodeEntry(number: Swift.String, type: TelegramCore.SentAuthorizationCodeType, hash: Swift.String, timeout: Swift.Int32?, nextType: TelegramCore.AuthorizationCodeNextType?, syncContacts: Swift.Bool)
  case passwordEntry(hint: Swift.String, number: Swift.String?, code: TelegramCore.AuthorizationCode?, suggestReset: Swift.Bool, syncContacts: Swift.Bool)
  case passwordRecovery(hint: Swift.String, number: Swift.String?, code: TelegramCore.AuthorizationCode?, emailPattern: Swift.String, syncContacts: Swift.Bool)
  case awaitingAccountReset(protectedUntil: Swift.Int32, number: Swift.String?, syncContacts: Swift.Bool)
  case signUp(number: Swift.String, codeHash: Swift.String, firstName: Swift.String, lastName: Swift.String, termsOfService: TelegramCore.UnauthorizedAccountTermsOfService?, syncContacts: Swift.Bool)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.UnauthorizedAccountStateContents, rhs: TelegramCore.UnauthorizedAccountStateContents) -> Swift.Bool
}
final public class UnauthorizedAccountState : TelegramCore.AccountState {
  final public let isTestingEnvironment: Swift.Bool
  final public let masterDatacenterId: Swift.Int32
  final public let contents: TelegramCore.UnauthorizedAccountStateContents
  public init(isTestingEnvironment: Swift.Bool, masterDatacenterId: Swift.Int32, contents: TelegramCore.UnauthorizedAccountStateContents)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func equalsTo(_ other: TelegramCore.AccountState) -> Swift.Bool
  @objc deinit
}
public enum AuthorizationCodeRequestError {
  case invalidPhoneNumber
  case limitExceeded
  case generic(info: (Swift.Int, Swift.String)?)
  case phoneLimitExceeded
  case phoneBanned
  case timeout
}
public enum SendAuthorizationCodeResult {
  case sentCode(TelegramCore.UnauthorizedAccount)
  case loggedIn
}
public struct AuthorizationCodePushNotificationConfiguration {
  public var token: Swift.String
  public var isSandbox: Swift.Bool
  public init(token: Swift.String, isSandbox: Swift.Bool)
}
public func sendAuthorizationCode(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, account: TelegramCore.UnauthorizedAccount, phoneNumber: Swift.String, apiId: Swift.Int32, apiHash: Swift.String, pushNotificationConfiguration: TelegramCore.AuthorizationCodePushNotificationConfiguration?, firebaseSecretStream: SwiftSignalKit.Signal<[Swift.String : Swift.String], SwiftSignalKit.NoError>, syncContacts: Swift.Bool, forcedPasswordSetupNotice: @escaping (Swift.Int32) -> (PostboxKit.NoticeEntryKey, PostboxKit.CodableEntry)?) -> SwiftSignalKit.Signal<TelegramCore.SendAuthorizationCodeResult, TelegramCore.AuthorizationCodeRequestError>
public func resendAuthorizationCode(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, account: TelegramCore.UnauthorizedAccount, apiId: Swift.Int32, apiHash: Swift.String, firebaseSecretStream: SwiftSignalKit.Signal<[Swift.String : Swift.String], SwiftSignalKit.NoError>) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.AuthorizationCodeRequestError>
public enum AuthorizationCodeVerificationError {
  case invalidCode
  case limitExceeded
  case generic
  case codeExpired
  case invalidEmailToken
  case invalidEmailAddress
  public static func == (a: TelegramCore.AuthorizationCodeVerificationError, b: TelegramCore.AuthorizationCodeVerificationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AuthorizationCode : PostboxKit.PostboxCoding, Swift.Equatable {
  public enum EmailVerification : Swift.Equatable {
    case emailCode(Swift.String)
    case appleToken(Swift.String)
    case googleToken(Swift.String)
    public static func == (a: TelegramCore.AuthorizationCode.EmailVerification, b: TelegramCore.AuthorizationCode.EmailVerification) -> Swift.Bool
  }
  case phoneCode(Swift.String)
  case emailVerification(TelegramCore.AuthorizationCode.EmailVerification)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (a: TelegramCore.AuthorizationCode, b: TelegramCore.AuthorizationCode) -> Swift.Bool
}
public struct AuthorizationSignUpData {
}
public enum AuthorizeWithCodeResult {
  case signUp(TelegramCore.AuthorizationSignUpData)
  case loggedIn
}
public enum AuthorizationSendEmailCodeError {
  case generic
  case limitExceeded
  case codeExpired
  case timeout
  case invalidEmail
  case emailNotAllowed
  public static func == (a: TelegramCore.AuthorizationSendEmailCodeError, b: TelegramCore.AuthorizationSendEmailCodeError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AuthorizationEmailVerificationError {
  case generic
  case limitExceeded
  case codeExpired
  case invalidCode
  case timeout
  case invalidEmailToken
  case emailNotAllowed
  public static func == (a: TelegramCore.AuthorizationEmailVerificationError, b: TelegramCore.AuthorizationEmailVerificationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ChangeLoginEmailData : Swift.Equatable {
  public let email: Swift.String
  public let length: Swift.Int32
  public static func == (a: TelegramCore.ChangeLoginEmailData, b: TelegramCore.ChangeLoginEmailData) -> Swift.Bool
}
public func sendLoginEmailChangeCode(account: TelegramCore.Account, email: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.ChangeLoginEmailData, TelegramCore.AuthorizationSendEmailCodeError>
public func sendLoginEmailCode(account: TelegramCore.UnauthorizedAccount, email: Swift.String) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.AuthorizationSendEmailCodeError>
public func verifyLoginEmailChange(account: TelegramCore.Account, code: TelegramCore.AuthorizationCode.EmailVerification) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.AuthorizationEmailVerificationError>
public func verifyLoginEmailSetup(account: TelegramCore.UnauthorizedAccount, code: TelegramCore.AuthorizationCode.EmailVerification) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.AuthorizationEmailVerificationError>
public func authorizeWithCode(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, account: TelegramCore.UnauthorizedAccount, code: TelegramCore.AuthorizationCode, termsOfService: TelegramCore.UnauthorizedAccountTermsOfService?, forcedPasswordSetupNotice: @escaping (Swift.Int32) -> (PostboxKit.NoticeEntryKey, PostboxKit.CodableEntry)?) -> SwiftSignalKit.Signal<TelegramCore.AuthorizeWithCodeResult, TelegramCore.AuthorizationCodeVerificationError>
public func beginSignUp(account: TelegramCore.UnauthorizedAccount, data: TelegramCore.AuthorizationSignUpData) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
public enum AuthorizationPasswordVerificationError {
  case limitExceeded
  case invalidPassword
  case generic
  public static func == (a: TelegramCore.AuthorizationPasswordVerificationError, b: TelegramCore.AuthorizationPasswordVerificationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func authorizeWithPassword(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, account: TelegramCore.UnauthorizedAccount, password: Swift.String, syncContacts: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.AuthorizationPasswordVerificationError>
public enum PasswordRecoveryRequestError {
  case limitExceeded
  case generic
  public static func == (a: TelegramCore.PasswordRecoveryRequestError, b: TelegramCore.PasswordRecoveryRequestError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PasswordRecoveryOption {
  case none
  case email(pattern: Swift.String)
}
public enum PasswordRecoveryError {
  case invalidCode
  case limitExceeded
  case expired
  case generic
  public static func == (a: TelegramCore.PasswordRecoveryError, b: TelegramCore.PasswordRecoveryError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class RecoveredAccountData {
  @objc deinit
}
public func loginWithRecoveredAccountData(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, account: TelegramCore.UnauthorizedAccount, recoveredAccountData: TelegramCore.RecoveredAccountData, syncContacts: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
public enum AccountResetError {
  case generic
  case limitExceeded
  public static func == (a: TelegramCore.AccountResetError, b: TelegramCore.AccountResetError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func performAccountReset(account: TelegramCore.UnauthorizedAccount) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.AccountResetError>
public enum SignUpError {
  case generic
  case limitExceeded
  case codeExpired
  case invalidFirstName
  case invalidLastName
  public static func == (a: TelegramCore.SignUpError, b: TelegramCore.SignUpError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func signUpWithName(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, account: TelegramCore.UnauthorizedAccount, firstName: Swift.String, lastName: Swift.String, avatarData: Foundation.Data?, avatarVideo: SwiftSignalKit.Signal<TelegramCore.UploadedPeerPhotoData?, SwiftSignalKit.NoError>?, videoStartTimestamp: Swift.Double?, forcedPasswordSetupNotice: @escaping (Swift.Int32) -> (PostboxKit.NoticeEntryKey, PostboxKit.CodableEntry)?) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.SignUpError>
public enum AuthorizationStateReset {
  case empty
  public static func == (a: TelegramCore.AuthorizationStateReset, b: TelegramCore.AuthorizationStateReset) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func resetAuthorizationState(account: TelegramCore.UnauthorizedAccount, to value: TelegramCore.AuthorizationStateReset) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public func webpagePreview(account: TelegramCore.Account, url: Swift.String, webpageId: PostboxKit.MediaId? = nil) -> SwiftSignalKit.Signal<TelegramCore.TelegramMediaWebpage?, SwiftSignalKit.NoError>
public enum WebpagePreviewWithProgressResult {
  case result(TelegramCore.TelegramMediaWebpage?)
  case progress(Swift.Float)
}
public func webpagePreviewWithProgress(account: TelegramCore.Account, url: Swift.String, webpageId: PostboxKit.MediaId? = nil) -> SwiftSignalKit.Signal<TelegramCore.WebpagePreviewWithProgressResult, SwiftSignalKit.NoError>
public func actualizedWebpage(postbox: PostboxKit.Postbox, network: TelegramCore.Network, webpage: TelegramCore.TelegramMediaWebpage) -> SwiftSignalKit.Signal<TelegramCore.TelegramMediaWebpage, SwiftSignalKit.NoError>
public struct LocalizationListState : Swift.Codable, Swift.Equatable {
  public var availableOfficialLocalizations: [TelegramCore.LocalizationInfo]
  public var availableSavedLocalizations: [TelegramCore.LocalizationInfo]
  public static var defaultSettings: TelegramCore.LocalizationListState {
    get
  }
  public init(availableOfficialLocalizations: [TelegramCore.LocalizationInfo], availableSavedLocalizations: [TelegramCore.LocalizationInfo])
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.LocalizationListState, b: TelegramCore.LocalizationListState) -> Swift.Bool
}
public struct SecureIdPersonName : Swift.Equatable {
  public let firstName: Swift.String
  public let lastName: Swift.String
  public let middleName: Swift.String
  public init(firstName: Swift.String, lastName: Swift.String, middleName: Swift.String)
  public func isComplete() -> Swift.Bool
  public static func == (a: TelegramCore.SecureIdPersonName, b: TelegramCore.SecureIdPersonName) -> Swift.Bool
}
public struct SecureIdDate : Swift.Equatable {
  public let day: Swift.Int32
  public let month: Swift.Int32
  public let year: Swift.Int32
  public init(day: Swift.Int32, month: Swift.Int32, year: Swift.Int32)
  public static func == (a: TelegramCore.SecureIdDate, b: TelegramCore.SecureIdDate) -> Swift.Bool
}
public enum SecureIdGender {
  case male
  case female
  public static func == (a: TelegramCore.SecureIdGender, b: TelegramCore.SecureIdGender) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RequestSimpleWebViewError {
  case generic
  public static func == (a: TelegramCore.RequestSimpleWebViewError, b: TelegramCore.RequestSimpleWebViewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum KeepWebViewError {
  case generic
  public static func == (a: TelegramCore.KeepWebViewError, b: TelegramCore.KeepWebViewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RequestWebViewResult {
  public let queryId: Swift.Int64
  public let url: Swift.String
  public let keepAliveSignal: SwiftSignalKit.Signal<Swift.Never, TelegramCore.KeepWebViewError>
}
public enum RequestWebViewError {
  case generic
  public static func == (a: TelegramCore.RequestWebViewError, b: TelegramCore.RequestWebViewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SendWebViewDataError {
  case generic
  public static func == (a: TelegramCore.SendWebViewDataError, b: TelegramCore.SendWebViewDataError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct StringCodingKey : Swift.CodingKey, Swift.ExpressibleByStringLiteral {
  public var stringValue: Swift.String
  public init?(stringValue: Swift.String)
  public init(_ stringValue: Swift.String)
  public init(stringLiteral: Swift.String)
  public var intValue: Swift.Int? {
    get
  }
  public init?(intValue: Swift.Int)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class Localization {
    final public func getCountriesList(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, langCode: Swift.String?, forceUpdate: Swift.Bool = false) -> SwiftSignalKit.Signal<[TelegramCore.Country], SwiftSignalKit.NoError>
    final public func markSuggestedLocalizationAsSeenInteractively(languageCode: Swift.String) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func synchronizedLocalizationListState() -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func suggestedLocalizationInfo(languageCode: Swift.String, extractKeys: [Swift.String]) -> SwiftSignalKit.Signal<TelegramCore.SuggestedLocalizationInfo, SwiftSignalKit.NoError>
    final public func requestLocalizationPreview(identifier: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.LocalizationInfo, TelegramCore.RequestLocalizationPreviewError>
    final public func downloadAndApplyLocalization(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, languageCode: Swift.String) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.DownloadAndApplyLocalizationError>
    final public func removeSavedLocalization(languageCode: Swift.String) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    @objc deinit
  }
}
extension TelegramCore.TelegramEngineUnauthorized {
  @_hasMissingDesignatedInitializers final public class Localization {
    final public func getCountriesList(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, langCode: Swift.String?, forceUpdate: Swift.Bool = false) -> SwiftSignalKit.Signal<[TelegramCore.Country], SwiftSignalKit.NoError>
    final public func markSuggestedLocalizationAsSeenInteractively(languageCode: Swift.String) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func currentlySuggestedLocalization(extractKeys: [Swift.String]) -> SwiftSignalKit.Signal<TelegramCore.SuggestedLocalizationInfo?, SwiftSignalKit.NoError>
    final public func downloadAndApplyLocalization(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, languageCode: Swift.String) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.DownloadAndApplyLocalizationError>
    @objc deinit
  }
}
public struct RecentlySearchedPeerSubpeerSummary : Swift.Equatable {
  public let count: Swift.Int
  public static func == (a: TelegramCore.RecentlySearchedPeerSubpeerSummary, b: TelegramCore.RecentlySearchedPeerSubpeerSummary) -> Swift.Bool
}
public struct RecentlySearchedPeer : Swift.Equatable {
  public let peer: PostboxKit.RenderedPeer
  public let presence: TelegramCore.TelegramUserPresence?
  public let notificationSettings: TelegramCore.TelegramPeerNotificationSettings?
  public let unreadCount: Swift.Int32
  public let subpeerSummary: TelegramCore.RecentlySearchedPeerSubpeerSummary?
  public static func == (a: TelegramCore.RecentlySearchedPeer, b: TelegramCore.RecentlySearchedPeer) -> Swift.Bool
}
public enum DownloadLocalizationError {
  case generic
  public static func == (a: TelegramCore.DownloadLocalizationError, b: TelegramCore.DownloadLocalizationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DownloadAndApplyLocalizationError {
  case generic
  public static func == (a: TelegramCore.DownloadAndApplyLocalizationError, b: TelegramCore.DownloadAndApplyLocalizationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct AccessChallengeAttempts : Swift.Equatable {
  public let count: Swift.Int32
  public var bootTimestamp: Swift.Int32
  public var uptime: Swift.Int32
  public init(count: Swift.Int32, bootTimestamp: Swift.Int32, uptime: Swift.Int32)
  public static func == (a: TelegramCore.AccessChallengeAttempts, b: TelegramCore.AccessChallengeAttempts) -> Swift.Bool
}
public enum PostboxAccessChallengeData : PostboxKit.PostboxCoding, Swift.Equatable, Swift.Codable {
  case none
  case numericalPassword(value: Swift.String)
  case plaintextPassword(value: Swift.String)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var isLockable: Swift.Bool {
    get
  }
  public var lockId: Swift.String? {
    get
  }
  public static func == (a: TelegramCore.PostboxAccessChallengeData, b: TelegramCore.PostboxAccessChallengeData) -> Swift.Bool
}
public struct AuthAccountRecord<Attribute> : Swift.Codable where Attribute : TelegramCore.AccountRecordAttribute {
  public let id: TelegramCore.AccountRecordId
  public let attributes: [Attribute]
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public func secureIdConfiguration(postbox: PostboxKit.Postbox, network: TelegramCore.Network) -> SwiftSignalKit.Signal<TelegramCore.SecureIdConfiguration, SwiftSignalKit.NoError>
@_hasMissingDesignatedInitializers final public class SparseMessageList {
  public struct State {
    @_hasMissingDesignatedInitializers final public class Item {
      public enum Content {
        case message(message: PostboxKit.Message, isLocal: Swift.Bool)
        case placeholder(id: PostboxKit.MessageId, timestamp: Swift.Int32)
      }
      final public let index: Swift.Int
      final public let content: TelegramCore.SparseMessageList.State.Item.Content
      @objc deinit
    }
    public var items: [TelegramCore.SparseMessageList.State.Item]
    public var totalCount: Swift.Int
    public var isLoading: Swift.Bool
  }
  public enum LoadHoleDirection {
    case around
    case earlier
    case later
    public static func == (a: TelegramCore.SparseMessageList.LoadHoleDirection, b: TelegramCore.SparseMessageList.LoadHoleDirection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public var state: SwiftSignalKit.Signal<TelegramCore.SparseMessageList.State, SwiftSignalKit.NoError> {
    get
  }
  final public func loadMoreFromTopSection()
  final public func loadHole(anchor: PostboxKit.MessageId, direction: TelegramCore.SparseMessageList.LoadHoleDirection, completion: @escaping () -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SparseMessageCalendar {
  public struct Entry {
    public var message: PostboxKit.Message
    public var count: Swift.Int
  }
  public struct State {
    public var messagesByDay: [Swift.Int32 : TelegramCore.SparseMessageCalendar.Entry]
    public var minTimestamp: Swift.Int32?
    public var hasMore: Swift.Bool
  }
  final public var minTimestamp: Swift.Int32?
  @objc deinit
  final public var state: SwiftSignalKit.Signal<TelegramCore.SparseMessageCalendar.State, SwiftSignalKit.NoError> {
    get
  }
  final public var isLoadingMore: SwiftSignalKit.Signal<Swift.Bool, SwiftSignalKit.NoError> {
    get
  }
  final public func loadMore()
  final public func removeMessagesInRange(minTimestamp: Swift.Int32, maxTimestamp: Swift.Int32, type: TelegramCore.InteractiveHistoryClearingType, completion: @escaping () -> Swift.Void) -> SwiftSignalKit.Disposable
}
public struct SecureIdPassportRegistrationValue : Swift.Equatable {
  public var verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference]
  public var translations: [TelegramCore.SecureIdVerificationDocumentReference]
  public init(verificationDocuments: [TelegramCore.SecureIdVerificationDocumentReference], translations: [TelegramCore.SecureIdVerificationDocumentReference])
  public static func == (lhs: TelegramCore.SecureIdPassportRegistrationValue, rhs: TelegramCore.SecureIdPassportRegistrationValue) -> Swift.Bool
}
public enum StandaloneUploadMediaError {
  case generic
  public static func == (a: TelegramCore.StandaloneUploadMediaError, b: TelegramCore.StandaloneUploadMediaError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct StandaloneUploadSecretFile {
}
public enum StandaloneUploadMediaThumbnailResult {
  case pending
  case file(TelegramApi.Api.InputFile)
  case none
}
public enum StandaloneUploadMediaResult {
  case media(TelegramCore.AnyMediaReference)
}
public enum StandaloneUploadMediaEvent {
  case progress(Swift.Float)
  case result(TelegramCore.StandaloneUploadMediaResult)
}
public func standaloneUploadedImage(account: TelegramCore.Account, peerId: PostboxKit.PeerId, text: Swift.String, data: Foundation.Data, thumbnailData: Foundation.Data? = nil, dimensions: TelegramCore.PixelDimensions) -> SwiftSignalKit.Signal<TelegramCore.StandaloneUploadMediaEvent, TelegramCore.StandaloneUploadMediaError>
public func standaloneUploadedFile(account: TelegramCore.Account, peerId: PostboxKit.PeerId, text: Swift.String, source: TelegramCore.MultipartUploadSource, thumbnailData: Foundation.Data? = nil, mimeType: Swift.String, attributes: [TelegramCore.TelegramMediaFileAttribute], hintFileIsLarge: Swift.Bool) -> SwiftSignalKit.Signal<TelegramCore.StandaloneUploadMediaEvent, TelegramCore.StandaloneUploadMediaError>
public func requestOldFeaturedStickerPacks(network: TelegramCore.Network, postbox: PostboxKit.Postbox, offset: Swift.Int, limit: Swift.Int) -> SwiftSignalKit.Signal<[TelegramCore.FeaturedStickerPackItem], SwiftSignalKit.NoError>
public func preloadedFeaturedStickerSet(network: TelegramCore.Network, postbox: PostboxKit.Postbox, id: PostboxKit.ItemCollectionId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public class MediaSpoilerMessageAttribute : PostboxKit.MessageAttribute {
  public var associatedMessageIds: [PostboxKit.MessageId]
  public init()
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AccessChallengeDataView : PostboxKit.PostboxView {
  final public let data: TelegramCore.PostboxAccessChallengeData
  @objc deinit
}
public struct AppConfiguration : Swift.Codable, Swift.Equatable {
  public var data: TelegramCore.JSON?
  public static var defaultValue: TelegramCore.AppConfiguration {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: TelegramCore.AppConfiguration, b: TelegramCore.AppConfiguration) -> Swift.Bool
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class ItemCache {
    final public func put<T>(collectionId: Swift.Int8, id: PostboxKit.ValueBoxKey, item: T) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError> where T : Swift.Decodable, T : Swift.Encodable
    final public func remove(collectionId: Swift.Int8, id: PostboxKit.ValueBoxKey) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func clear(collectionIds: [Swift.Int8]) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    @objc deinit
  }
}
final public class CachedLocalizationInfos : Swift.Codable {
  final public let list: [TelegramCore.LocalizationInfo]
  public init(list: [TelegramCore.LocalizationInfo])
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public enum LocalizationEntry : Swift.Equatable {
  case string(key: Swift.String, value: Swift.String)
  case pluralizedString(key: Swift.String, zero: Swift.String?, one: Swift.String?, two: Swift.String?, few: Swift.String?, many: Swift.String?, other: Swift.String)
  public var key: Swift.String {
    get
  }
  public static func == (a: TelegramCore.LocalizationEntry, b: TelegramCore.LocalizationEntry) -> Swift.Bool
}
final public class Localization : Swift.Codable, Swift.Equatable {
  final public let version: Swift.Int32
  final public let entries: [TelegramCore.LocalizationEntry]
  public init(version: Swift.Int32, entries: [TelegramCore.LocalizationEntry])
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: TelegramCore.Localization, rhs: TelegramCore.Localization) -> Swift.Bool
  @objc deinit
}
public func unarchiveAutomaticallyArchivedPeer(account: TelegramCore.Account, peerId: PostboxKit.PeerId)
final public class PromoChatListItem : PostboxKit.AdditionalChatListItem {
  public enum Kind : Swift.Equatable {
    case proxy
    case psa(type: Swift.String, message: Swift.String?)
    public static func == (a: TelegramCore.PromoChatListItem.Kind, b: TelegramCore.PromoChatListItem.Kind) -> Swift.Bool
  }
  final public let peerId: PostboxKit.PeerId
  final public let kind: TelegramCore.PromoChatListItem.Kind
  final public var includeIfNoHistory: Swift.Bool {
    get
  }
  public init(peerId: PostboxKit.PeerId, kind: TelegramCore.PromoChatListItem.Kind)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to other: PostboxKit.AdditionalChatListItem) -> Swift.Bool
  @objc deinit
}
public func hideAccountPromoInfoChat(account: TelegramCore.Account, peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
public enum PeerReference : PostboxKit.PostboxCoding, Swift.Hashable, Swift.Equatable {
  case user(id: Swift.Int64, accessHash: Swift.Int64)
  case group(id: Swift.Int64)
  case channel(id: Swift.Int64, accessHash: Swift.Int64)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public init?(_ peer: PostboxKit.Peer)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: TelegramCore.PeerReference, b: TelegramCore.PeerReference) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public func updateCacheStorageSettingsInteractively(accountManager: TelegramCore.AccountManager<TelegramCore.TelegramAccountManagerTypes>, _ f: @escaping (TelegramCore.CacheStorageSettings) -> TelegramCore.CacheStorageSettings) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public func updateAccountSpecificCacheStorageSettingsInteractively(postbox: PostboxKit.Postbox, _ f: @escaping (TelegramCore.AccountSpecificCacheStorageSettings) -> TelegramCore.AccountSpecificCacheStorageSettings) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
final public class CachedWallpapersConfiguration : Swift.Codable {
  final public let hash: Swift.Int64
  public init(hash: Swift.Int64)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public func standalonePollChannelOnce(accountPeerId: PostboxKit.PeerId, postbox: PostboxKit.Postbox, network: TelegramCore.Network, peerId: PostboxKit.PeerId, stateManager: TelegramCore.AccountStateManager) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
final public class RestrictionRule : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let platform: Swift.String
  final public let reason: Swift.String
  final public let text: Swift.String
  public init(platform: Swift.String, reason: Swift.String, text: Swift.String)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.RestrictionRule, rhs: TelegramCore.RestrictionRule) -> Swift.Bool
  @objc deinit
}
final public class PeerAccessRestrictionInfo : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let rules: [TelegramCore.RestrictionRule]
  public init(rules: [TelegramCore.RestrictionRule])
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.PeerAccessRestrictionInfo, rhs: TelegramCore.PeerAccessRestrictionInfo) -> Swift.Bool
  @objc deinit
}
extension PostboxKit.MemoryBuffer {
  convenience public init(_ buffer: TelegramApi.Buffer)
}
public struct Namespaces {
  public struct Message {
    public static let Cloud: Swift.Int32
    public static let Local: Swift.Int32
    public static let SecretIncoming: Swift.Int32
    public static let ScheduledCloud: Swift.Int32
    public static let ScheduledLocal: Swift.Int32
    public static let allScheduled: Swift.Set<Swift.Int32>
  }
  public struct Media {
    public static let CloudImage: Swift.Int32
    public static let CloudAudio: Swift.Int32
    public static let CloudContact: Swift.Int32
    public static let CloudMap: Swift.Int32
    public static let CloudFile: Swift.Int32
    public static let CloudWebpage: Swift.Int32
    public static let LocalImage: Swift.Int32
    public static let LocalFile: Swift.Int32
    public static let CloudSecretImage: Swift.Int32
    public static let CloudSecretFile: Swift.Int32
    public static let CloudGame: Swift.Int32
    public static let CloudInvoice: Swift.Int32
    public static let LocalWebpage: Swift.Int32
    public static let LocalPoll: Swift.Int32
    public static let CloudPoll: Swift.Int32
  }
  public struct Peer {
    public static let CloudUser: PostboxKit.PeerId.Namespace
    public static let CloudGroup: PostboxKit.PeerId.Namespace
    public static let CloudChannel: PostboxKit.PeerId.Namespace
    public static let SecretChat: PostboxKit.PeerId.Namespace
    public static let Empty: PostboxKit.PeerId.Namespace
  }
  public struct ItemCollection {
    public static let CloudStickerPacks: Swift.Int32
    public static let CloudMaskPacks: Swift.Int32
    public static let EmojiKeywords: Swift.Int32
    public static let CloudAnimatedEmoji: Swift.Int32
    public static let CloudDice: Swift.Int32
    public static let CloudAnimatedEmojiAnimations: Swift.Int32
    public static let CloudAnimatedEmojiReactions: Swift.Int32
    public static let CloudPremiumGifts: Swift.Int32
    public static let CloudEmojiPacks: Swift.Int32
    public static let CloudEmojiGenericAnimations: Swift.Int32
    public static let CloudIconStatusEmoji: Swift.Int32
    public static let CloudIconTopicEmoji: Swift.Int32
  }
  public struct OrderedItemList {
    public static let CloudRecentStickers: Swift.Int32
    public static let CloudRecentGifs: Swift.Int32
    public static let RecentlySearchedPeerIds: Swift.Int32
    public static let CloudRecentInlineBots: Swift.Int32
    public static let CloudFeaturedStickerPacks: Swift.Int32
    public static let CloudArchivedStickerPacks: Swift.Int32
    public static let CloudWallpapers: Swift.Int32
    public static let CloudSavedStickers: Swift.Int32
    public static let RecentlyUsedHashtags: Swift.Int32
    public static let CloudThemes: Swift.Int32
    public static let CloudGreetingStickers: Swift.Int32
    public static let RecentDownloads: Swift.Int32
    public static let PremiumStickers: Swift.Int32
    public static let CloudPremiumStickers: Swift.Int32
    public static let LocalRecentEmoji: Swift.Int32
    public static let CloudFeaturedEmojiPacks: Swift.Int32
    public static let CloudAllPremiumStickers: Swift.Int32
    public static let CloudRecentStatusEmoji: Swift.Int32
    public static let CloudFeaturedStatusEmoji: Swift.Int32
    public static let CloudRecentReactions: Swift.Int32
    public static let CloudTopReactions: Swift.Int32
    public static let CloudEmojiCategories: Swift.Int32
    public static let CloudEmojiStatusCategories: Swift.Int32
    public static let CloudFeaturedProfilePhotoEmoji: Swift.Int32
    public static let CloudFeaturedGroupPhotoEmoji: Swift.Int32
  }
  public struct CachedItemCollection {
    public static let resolvedByNamePeers: Swift.Int8
    public static let cachedTwoStepToken: Swift.Int8
    public static let cachedStickerPacks: Swift.Int8
    public static let cachedAvailableLocalizations: Swift.Int8
    public static let cachedSentMediaReferences: Swift.Int8
    public static let cachedStickerQueryResults: Swift.Int8
    public static let cachedSecureIdConfiguration: Swift.Int8
    public static let cachedWallpapersConfiguration: Swift.Int8
    public static let cachedThemesConfiguration: Swift.Int8
    public static let cachedPollResults: Swift.Int8
    public static let cachedContextResults: Swift.Int8
    public static let proximityNotificationStoredState: Swift.Int8
    public static let cachedGroupCallDisplayAsPeers: Swift.Int8
    public static let cachedAdMessageStates: Swift.Int8
    public static let cachedPeerInvitationImporters: Swift.Int8
    public static let cachedPeerExportedInvitations: Swift.Int8
    public static let cachedSendAsPeers: Swift.Int8
    public static let availableReactions: Swift.Int8
    public static let resolvedByPhonePeers: Swift.Int8
    public static let notificationSoundList: Swift.Int8
    public static let attachMenuBots: Swift.Int8
    public static let featuredStickersConfiguration: Swift.Int8
    public static let emojiSearchCategories: Swift.Int8
    public static let cachedEmojiQueryResults: Swift.Int8
  }
  public struct UnorderedItemList {
    public static let synchronizedDeviceContacts: PostboxKit.UnorderedItemListEntryTag
  }
  public struct PeerGroup {
    public static let archive: PostboxKit.PeerGroupId
  }
}
extension PostboxKit.MessageTags {
  public static let photoOrVideo: PostboxKit.MessageTags
  public static let file: PostboxKit.MessageTags
  public static let music: PostboxKit.MessageTags
  public static let webPage: PostboxKit.MessageTags
  public static let voiceOrInstantVideo: PostboxKit.MessageTags
  public static let unseenPersonalMessage: PostboxKit.MessageTags
  public static let liveLocation: PostboxKit.MessageTags
  public static let gif: PostboxKit.MessageTags
  public static let photo: PostboxKit.MessageTags
  public static let video: PostboxKit.MessageTags
  public static let pinned: PostboxKit.MessageTags
  public static let unseenReaction: PostboxKit.MessageTags
  public static let all: PostboxKit.MessageTags
}
extension PostboxKit.GlobalMessageTags {
  public static let Calls: PostboxKit.GlobalMessageTags
  public static let MissedCalls: PostboxKit.GlobalMessageTags
  public static let all: PostboxKit.GlobalMessageTags
}
extension PostboxKit.LocalMessageTags {
  public static let OutgoingLiveLocation: PostboxKit.LocalMessageTags
  public static let OutgoingDeliveredToServer: PostboxKit.LocalMessageTags
}
extension PostboxKit.PendingMessageActionType {
  public static let consumeUnseenPersonalMessage: PostboxKit.PendingMessageActionType
  public static let updateReaction: PostboxKit.PendingMessageActionType
  public static let sendScheduledMessageImmediately: PostboxKit.PendingMessageActionType
  public static let readReaction: PostboxKit.PendingMessageActionType
}
public let peerIdNamespacesWithInitialCloudMessageHoles: [PostboxKit.PeerId.Namespace]
public struct OperationLogTags {
  public static let SecretOutgoing: PostboxKit.PeerOperationLogTag
  public static let SecretIncomingEncrypted: PostboxKit.PeerOperationLogTag
  public static let SecretIncomingDecrypted: PostboxKit.PeerOperationLogTag
  public static let CloudChatRemoveMessages: PostboxKit.PeerOperationLogTag
  public static let SynchronizePinnedCloudChats: PostboxKit.PeerOperationLogTag
  public static let AutoremoveMessages: PostboxKit.PeerOperationLogTag
  public static let SynchronizePinnedChats: PostboxKit.PeerOperationLogTag
  public static let SynchronizeConsumeMessageContents: PostboxKit.PeerOperationLogTag
  public static let SynchronizeInstalledStickerPacks: PostboxKit.PeerOperationLogTag
  public static let SynchronizeInstalledMasks: PostboxKit.PeerOperationLogTag
  public static let SynchronizeMarkFeaturedStickerPacksAsSeen: PostboxKit.PeerOperationLogTag
  public static let SynchronizeChatInputStates: PostboxKit.PeerOperationLogTag
  public static let SynchronizeSavedGifs: PostboxKit.PeerOperationLogTag
  public static let SynchronizeLocalizationUpdates: PostboxKit.PeerOperationLogTag
  public static let SynchronizeSavedStickers: PostboxKit.PeerOperationLogTag
  public static let SynchronizeGroupedPeers: PostboxKit.PeerOperationLogTag
  public static let SynchronizeMarkAllUnseenPersonalMessages: PostboxKit.PeerOperationLogTag
  public static let SynchronizeRecentlyUsedStickers: PostboxKit.PeerOperationLogTag
  public static let SynchronizeAppLogEvents: PostboxKit.PeerOperationLogTag
  public static let SynchronizeEmojiKeywords: PostboxKit.PeerOperationLogTag
  public static let SynchronizeChatListFilters: PostboxKit.PeerOperationLogTag
  public static let SynchronizeMarkAllUnseenReactions: PostboxKit.PeerOperationLogTag
  public static let SynchronizeInstalledEmoji: PostboxKit.PeerOperationLogTag
  public static let SynchronizeAutosaveItems: PostboxKit.PeerOperationLogTag
}
public struct LegacyPeerSummaryCounterTags : Swift.OptionSet, Swift.Sequence, Swift.Hashable {
  public var rawValue: Swift.Int32
  public init(rawValue: Swift.Int32)
  public static let regularChatsAndPrivateGroups: TelegramCore.LegacyPeerSummaryCounterTags
  public static let publicGroups: TelegramCore.LegacyPeerSummaryCounterTags
  public static let channels: TelegramCore.LegacyPeerSummaryCounterTags
  public func makeIterator() -> Swift.AnyIterator<TelegramCore.LegacyPeerSummaryCounterTags>
  public typealias ArrayLiteralElement = TelegramCore.LegacyPeerSummaryCounterTags.Element
  public typealias Element = TelegramCore.LegacyPeerSummaryCounterTags
  public typealias Iterator = Swift.AnyIterator<TelegramCore.LegacyPeerSummaryCounterTags>
  public typealias RawValue = Swift.Int32
}
extension PostboxKit.PeerSummaryCounterTags {
  public static let contact: PostboxKit.PeerSummaryCounterTags
  public static let nonContact: PostboxKit.PeerSummaryCounterTags
  public static let group: PostboxKit.PeerSummaryCounterTags
  public static let bot: PostboxKit.PeerSummaryCounterTags
  public static let channel: PostboxKit.PeerSummaryCounterTags
  public static let all: PostboxKit.PeerSummaryCounterTags
}
public func applicationSpecificPreferencesKey(_ value: Swift.Int32) -> PostboxKit.ValueBoxKey
public func applicationSpecificSharedDataKey(_ value: Swift.Int32) -> PostboxKit.ValueBoxKey
public struct PreferencesKeys {
  public static let globalNotifications: PostboxKit.ValueBoxKey
  public static let suggestedLocalization: PostboxKit.ValueBoxKey
  public static let limitsConfiguration: PostboxKit.ValueBoxKey
  public static let contentPrivacySettings: PostboxKit.ValueBoxKey
  public static let networkSettings: PostboxKit.ValueBoxKey
  public static let remoteStorageConfiguration: PostboxKit.ValueBoxKey
  public static let voipConfiguration: PostboxKit.ValueBoxKey
  public static let appChangelogState: PostboxKit.ValueBoxKey
  public static let localizationListState: PostboxKit.ValueBoxKey
  public static let appConfiguration: PostboxKit.ValueBoxKey
  public static let searchBotsConfiguration: PostboxKit.ValueBoxKey
  public static let contactsSettings: PostboxKit.ValueBoxKey
  public static let secretChatSettings: PostboxKit.ValueBoxKey
  public static let contentSettings: PostboxKit.ValueBoxKey
  public static let chatListFilters: PostboxKit.ValueBoxKey
  public static let peersNearby: PostboxKit.ValueBoxKey
  public static let chatListFiltersFeaturedState: PostboxKit.ValueBoxKey
  public static let reactionSettings: PostboxKit.ValueBoxKey
  public static let premiumPromo: PostboxKit.ValueBoxKey
  public static let globalMessageAutoremoveTimeoutSettings: PostboxKit.ValueBoxKey
  public static let accountSpecificCacheStorageSettings: PostboxKit.ValueBoxKey
}
public struct SharedDataKeys {
  public static let loggingSettings: PostboxKit.ValueBoxKey
  public static let cacheStorageSettings: PostboxKit.ValueBoxKey
  public static let localizationSettings: PostboxKit.ValueBoxKey
  public static let proxySettings: PostboxKit.ValueBoxKey
  public static let autodownloadSettings: PostboxKit.ValueBoxKey
  public static let themeSettings: PostboxKit.ValueBoxKey
  public static let countriesList: PostboxKit.ValueBoxKey
  public static let wallapersState: PostboxKit.ValueBoxKey
  public static let chatThemes: PostboxKit.ValueBoxKey
}
public func applicationSpecificItemCacheCollectionId(_ value: Swift.Int8) -> Swift.Int8
public func applicationSpecificOrderedItemListCollectionId(_ value: Swift.Int32) -> Swift.Int32
public enum RequestSecureIdFormError {
  case generic
  case serverError(Swift.String)
  case versionOutdated
}
public struct EncryptedSecureIdForm {
  public let peerId: PostboxKit.PeerId
  public let requestedFields: [TelegramCore.SecureIdRequestedFormField]
  public let termsUrl: Swift.String?
}
public func requestSecureIdForm(postbox: PostboxKit.Postbox, network: TelegramCore.Network, peerId: PostboxKit.PeerId, scope: Swift.String, publicKey: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.EncryptedSecureIdForm, TelegramCore.RequestSecureIdFormError>
public func decryptedSecureIdForm(context: TelegramCore.SecureIdAccessContext, form: TelegramCore.EncryptedSecureIdForm) -> TelegramCore.SecureIdForm?
public struct PendingMessageStatus : Swift.Equatable {
  public let isRunning: Swift.Bool
  public let progress: Swift.Float
  public static func == (a: TelegramCore.PendingMessageStatus, b: TelegramCore.PendingMessageStatus) -> Swift.Bool
}
public enum PendingMessageFailureReason {
  case flood
  case publicBan
  case mediaRestricted
  case slowmodeActive
  case tooMuchScheduled
  case voiceMessagesForbidden
  public static func == (a: TelegramCore.PendingMessageFailureReason, b: TelegramCore.PendingMessageFailureReason) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class PendingMessageManager {
  final public var hasPendingMessages: SwiftSignalKit.Signal<Swift.Set<PostboxKit.PeerId>, SwiftSignalKit.NoError> {
    get
  }
  @objc deinit
  final public func pendingMessageStatus(_ id: PostboxKit.MessageId) -> SwiftSignalKit.Signal<(TelegramCore.PendingMessageStatus?, TelegramCore.PendingMessageFailureReason?), SwiftSignalKit.NoError>
  final public func deliveredMessageEvents(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<(namespace: PostboxKit.MessageId.Namespace, silent: Swift.Bool), SwiftSignalKit.NoError>
  final public func failedMessageEvents(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<TelegramCore.PendingMessageFailureReason, SwiftSignalKit.NoError>
}
public func smallestVideoRepresentation(_ representations: [TelegramCore.TelegramMediaImage.VideoRepresentation]) -> TelegramCore.TelegramMediaImage.VideoRepresentation?
public func smallestImageRepresentation(_ representations: [TelegramCore.TelegramMediaImageRepresentation]) -> TelegramCore.TelegramMediaImageRepresentation?
public func largestImageRepresentation(_ representations: [TelegramCore.TelegramMediaImageRepresentation]) -> TelegramCore.TelegramMediaImageRepresentation?
public func imageRepresentationLargerThan(_ representations: [TelegramCore.TelegramMediaImageRepresentation], size: TelegramCore.PixelDimensions) -> TelegramCore.TelegramMediaImageRepresentation?
public func progressiveImageRepresentation(_ representations: [TelegramCore.TelegramMediaImageRepresentation]) -> TelegramCore.TelegramMediaImageRepresentation?
public func parseMediaData(data: Foundation.Data) -> PostboxKit.Media?
public enum StandaloneMedia {
  case image(Foundation.Data)
  case file(data: Foundation.Data, mimeType: Swift.String, attributes: [TelegramCore.TelegramMediaFileAttribute])
}
public enum StandaloneSendMessageError {
  case generic
  public static func == (a: TelegramCore.StandaloneSendMessageError, b: TelegramCore.StandaloneSendMessageError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func standaloneSendMessage(account: TelegramCore.Account, peerId: PostboxKit.PeerId, text: Swift.String, attributes: [PostboxKit.MessageAttribute], media: TelegramCore.StandaloneMedia?, replyToMessageId: PostboxKit.MessageId?) -> SwiftSignalKit.Signal<Swift.Float, TelegramCore.StandaloneSendMessageError>
public struct CachedChannelFlags : Swift.OptionSet {
  public var rawValue: Swift.Int32
  public init()
  public init(rawValue: Swift.Int32)
  public static let canDisplayParticipants: TelegramCore.CachedChannelFlags
  public static let canChangeUsername: TelegramCore.CachedChannelFlags
  public static let canSetStickerSet: TelegramCore.CachedChannelFlags
  public static let preHistoryEnabled: TelegramCore.CachedChannelFlags
  public static let canViewStats: TelegramCore.CachedChannelFlags
  public static let canChangePeerGeoLocation: TelegramCore.CachedChannelFlags
  public static let canDeleteHistory: TelegramCore.CachedChannelFlags
  public static let antiSpamEnabled: TelegramCore.CachedChannelFlags
  public static let translationHidden: TelegramCore.CachedChannelFlags
  public typealias ArrayLiteralElement = TelegramCore.CachedChannelFlags
  public typealias Element = TelegramCore.CachedChannelFlags
  public typealias RawValue = Swift.Int32
}
public struct CachedChannelParticipantsSummary : PostboxKit.PostboxCoding, Swift.Equatable {
  public let memberCount: Swift.Int32?
  public let adminCount: Swift.Int32?
  public let bannedCount: Swift.Int32?
  public let kickedCount: Swift.Int32?
  public init(memberCount: Swift.Int32?, adminCount: Swift.Int32?, bannedCount: Swift.Int32?, kickedCount: Swift.Int32?)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.CachedChannelParticipantsSummary, rhs: TelegramCore.CachedChannelParticipantsSummary) -> Swift.Bool
  public func withUpdatedMemberCount(_ memberCount: Swift.Int32?) -> TelegramCore.CachedChannelParticipantsSummary
  public func withUpdatedAdminCount(_ adminCount: Swift.Int32?) -> TelegramCore.CachedChannelParticipantsSummary
  public func withUpdatedBannedCount(_ bannedCount: Swift.Int32?) -> TelegramCore.CachedChannelParticipantsSummary
  public func withUpdatedKickedCount(_ kickedCount: Swift.Int32?) -> TelegramCore.CachedChannelParticipantsSummary
}
public struct ChannelMigrationReference : PostboxKit.PostboxCoding, Swift.Equatable {
  public let maxMessageId: PostboxKit.MessageId
  public init(maxMessageId: PostboxKit.MessageId)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.ChannelMigrationReference, rhs: TelegramCore.ChannelMigrationReference) -> Swift.Bool
}
public struct PeerGeoLocation : PostboxKit.PostboxCoding, Swift.Equatable {
  public let latitude: Swift.Double
  public let longitude: Swift.Double
  public let address: Swift.String
  public init(latitude: Swift.Double, longitude: Swift.Double, address: Swift.String)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.PeerGeoLocation, rhs: TelegramCore.PeerGeoLocation) -> Swift.Bool
}
public struct PeerMembersHidden : Swift.Codable, Swift.Equatable {
  public var value: Swift.Bool
  public init(value: Swift.Bool)
  public static func == (a: TelegramCore.PeerMembersHidden, b: TelegramCore.PeerMembersHidden) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
final public class CachedChannelData : PostboxKit.CachedPeerData {
  public enum LinkedDiscussionPeerId : Swift.Equatable {
    case unknown
    case known(PostboxKit.PeerId?)
    public static func == (a: TelegramCore.CachedChannelData.LinkedDiscussionPeerId, b: TelegramCore.CachedChannelData.LinkedDiscussionPeerId) -> Swift.Bool
  }
  public struct ActiveCall : Swift.Equatable, PostboxKit.PostboxCoding {
    public var id: Swift.Int64
    public var accessHash: Swift.Int64
    public var title: Swift.String?
    public var scheduleTimestamp: Swift.Int32?
    public var subscribedToScheduled: Swift.Bool
    public var isStream: Swift.Bool?
    public init(id: Swift.Int64, accessHash: Swift.Int64, title: Swift.String?, scheduleTimestamp: Swift.Int32?, subscribedToScheduled: Swift.Bool, isStream: Swift.Bool?)
    public init(decoder: PostboxKit.PostboxDecoder)
    public func encode(_ encoder: PostboxKit.PostboxEncoder)
    public static func == (a: TelegramCore.CachedChannelData.ActiveCall, b: TelegramCore.CachedChannelData.ActiveCall) -> Swift.Bool
  }
  final public let isNotAccessible: Swift.Bool
  final public let flags: TelegramCore.CachedChannelFlags
  final public let about: Swift.String?
  final public let participantsSummary: TelegramCore.CachedChannelParticipantsSummary
  final public let exportedInvitation: TelegramCore.ExportedInvitation?
  final public let botInfos: [TelegramCore.CachedPeerBotInfo]
  final public let peerStatusSettings: TelegramCore.PeerStatusSettings?
  final public let pinnedMessageId: PostboxKit.MessageId?
  final public let stickerPack: TelegramCore.StickerPackCollectionInfo?
  final public let minAvailableMessageId: PostboxKit.MessageId?
  final public let migrationReference: TelegramCore.ChannelMigrationReference?
  final public let linkedDiscussionPeerId: TelegramCore.CachedChannelData.LinkedDiscussionPeerId
  final public let peerGeoLocation: TelegramCore.PeerGeoLocation?
  final public let slowModeTimeout: Swift.Int32?
  final public let slowModeValidUntilTimestamp: Swift.Int32?
  final public let hasScheduledMessages: Swift.Bool
  final public let autoremoveTimeout: TelegramCore.CachedPeerAutoremoveTimeout
  final public let statsDatacenterId: Swift.Int32
  final public let invitedBy: PostboxKit.PeerId?
  final public let invitedOn: Swift.Int32?
  final public let photo: TelegramCore.TelegramMediaImage?
  final public let activeCall: TelegramCore.CachedChannelData.ActiveCall?
  final public let callJoinPeerId: PostboxKit.PeerId?
  final public let pendingSuggestions: [Swift.String]
  final public let themeEmoticon: Swift.String?
  final public let inviteRequestsPending: Swift.Int32?
  final public let sendAsPeerId: PostboxKit.PeerId?
  final public let allowedReactions: TelegramCore.EnginePeerCachedInfoItem<TelegramCore.PeerAllowedReactions>
  final public let membersHidden: TelegramCore.EnginePeerCachedInfoItem<TelegramCore.PeerMembersHidden>
  final public let peerIds: Swift.Set<PostboxKit.PeerId>
  final public let messageIds: Swift.Set<PostboxKit.MessageId>
  final public var associatedHistoryMessageId: PostboxKit.MessageId? {
    get
  }
  public init()
  public init(isNotAccessible: Swift.Bool, flags: TelegramCore.CachedChannelFlags, about: Swift.String?, participantsSummary: TelegramCore.CachedChannelParticipantsSummary, exportedInvitation: TelegramCore.ExportedInvitation?, botInfos: [TelegramCore.CachedPeerBotInfo], peerStatusSettings: TelegramCore.PeerStatusSettings?, pinnedMessageId: PostboxKit.MessageId?, stickerPack: TelegramCore.StickerPackCollectionInfo?, minAvailableMessageId: PostboxKit.MessageId?, migrationReference: TelegramCore.ChannelMigrationReference?, linkedDiscussionPeerId: TelegramCore.CachedChannelData.LinkedDiscussionPeerId, peerGeoLocation: TelegramCore.PeerGeoLocation?, slowModeTimeout: Swift.Int32?, slowModeValidUntilTimestamp: Swift.Int32?, hasScheduledMessages: Swift.Bool, statsDatacenterId: Swift.Int32, invitedBy: PostboxKit.PeerId?, invitedOn: Swift.Int32?, photo: TelegramCore.TelegramMediaImage?, activeCall: TelegramCore.CachedChannelData.ActiveCall?, callJoinPeerId: PostboxKit.PeerId?, autoremoveTimeout: TelegramCore.CachedPeerAutoremoveTimeout, pendingSuggestions: [Swift.String], themeEmoticon: Swift.String?, inviteRequestsPending: Swift.Int32?, sendAsPeerId: PostboxKit.PeerId?, allowedReactions: TelegramCore.EnginePeerCachedInfoItem<TelegramCore.PeerAllowedReactions>, membersHidden: TelegramCore.EnginePeerCachedInfoItem<TelegramCore.PeerMembersHidden>)
  final public func withUpdatedIsNotAccessible(_ isNotAccessible: Swift.Bool) -> TelegramCore.CachedChannelData
  final public func withUpdatedFlags(_ flags: TelegramCore.CachedChannelFlags) -> TelegramCore.CachedChannelData
  final public func withUpdatedAbout(_ about: Swift.String?) -> TelegramCore.CachedChannelData
  final public func withUpdatedParticipantsSummary(_ participantsSummary: TelegramCore.CachedChannelParticipantsSummary) -> TelegramCore.CachedChannelData
  final public func withUpdatedExportedInvitation(_ exportedInvitation: TelegramCore.ExportedInvitation?) -> TelegramCore.CachedChannelData
  final public func withUpdatedBotInfos(_ botInfos: [TelegramCore.CachedPeerBotInfo]) -> TelegramCore.CachedChannelData
  final public func withUpdatedPeerStatusSettings(_ peerStatusSettings: TelegramCore.PeerStatusSettings?) -> TelegramCore.CachedChannelData
  final public func withUpdatedPinnedMessageId(_ pinnedMessageId: PostboxKit.MessageId?) -> TelegramCore.CachedChannelData
  final public func withUpdatedStickerPack(_ stickerPack: TelegramCore.StickerPackCollectionInfo?) -> TelegramCore.CachedChannelData
  final public func withUpdatedMinAvailableMessageId(_ minAvailableMessageId: PostboxKit.MessageId?) -> TelegramCore.CachedChannelData
  final public func withUpdatedMigrationReference(_ migrationReference: TelegramCore.ChannelMigrationReference?) -> TelegramCore.CachedChannelData
  final public func withUpdatedLinkedDiscussionPeerId(_ linkedDiscussionPeerId: TelegramCore.CachedChannelData.LinkedDiscussionPeerId) -> TelegramCore.CachedChannelData
  final public func withUpdatedPeerGeoLocation(_ peerGeoLocation: TelegramCore.PeerGeoLocation?) -> TelegramCore.CachedChannelData
  final public func withUpdatedSlowModeTimeout(_ slowModeTimeout: Swift.Int32?) -> TelegramCore.CachedChannelData
  final public func withUpdatedSlowModeValidUntilTimestamp(_ slowModeValidUntilTimestamp: Swift.Int32?) -> TelegramCore.CachedChannelData
  final public func withUpdatedHasScheduledMessages(_ hasScheduledMessages: Swift.Bool) -> TelegramCore.CachedChannelData
  final public func withUpdatedStatsDatacenterId(_ statsDatacenterId: Swift.Int32) -> TelegramCore.CachedChannelData
  final public func withUpdatedInvitedBy(_ invitedBy: PostboxKit.PeerId?) -> TelegramCore.CachedChannelData
  final public func withUpdatedInvitedOn(_ invitedOn: Swift.Int32?) -> TelegramCore.CachedChannelData
  final public func withUpdatedPhoto(_ photo: TelegramCore.TelegramMediaImage?) -> TelegramCore.CachedChannelData
  final public func withUpdatedActiveCall(_ activeCall: TelegramCore.CachedChannelData.ActiveCall?) -> TelegramCore.CachedChannelData
  final public func withUpdatedCallJoinPeerId(_ callJoinPeerId: PostboxKit.PeerId?) -> TelegramCore.CachedChannelData
  final public func withUpdatedAutoremoveTimeout(_ autoremoveTimeout: TelegramCore.CachedPeerAutoremoveTimeout) -> TelegramCore.CachedChannelData
  final public func withUpdatedPendingSuggestions(_ pendingSuggestions: [Swift.String]) -> TelegramCore.CachedChannelData
  final public func withUpdatedThemeEmoticon(_ themeEmoticon: Swift.String?) -> TelegramCore.CachedChannelData
  final public func withUpdatedInviteRequestsPending(_ inviteRequestsPending: Swift.Int32?) -> TelegramCore.CachedChannelData
  final public func withUpdatedSendAsPeerId(_ sendAsPeerId: PostboxKit.PeerId?) -> TelegramCore.CachedChannelData
  final public func withUpdatedAllowedReactions(_ allowedReactions: TelegramCore.EnginePeerCachedInfoItem<TelegramCore.PeerAllowedReactions>) -> TelegramCore.CachedChannelData
  final public func withUpdatedMembersHidden(_ membersHidden: TelegramCore.EnginePeerCachedInfoItem<TelegramCore.PeerMembersHidden>) -> TelegramCore.CachedChannelData
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to: PostboxKit.CachedPeerData) -> Swift.Bool
  @objc deinit
}
final public class ContentPrivacySettings : Swift.Codable {
  final public let enableSecretChatWebpagePreviews: Swift.Bool?
  public static var defaultSettings: TelegramCore.ContentPrivacySettings
  public init(enableSecretChatWebpagePreviews: Swift.Bool?)
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  final public func withUpdatedEnableSecretChatWebpagePreviews(_ enableSecretChatWebpagePreviews: Swift.Bool) -> TelegramCore.ContentPrivacySettings
  @objc deinit
}
public enum ChannelHistoryAvailabilityError {
  case generic
  case hasNotPermissions
  public static func == (a: TelegramCore.ChannelHistoryAvailabilityError, b: TelegramCore.ChannelHistoryAvailabilityError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
final public class SynchronizeLocalizationUpdatesOperation : PostboxKit.PostboxCoding {
  public init()
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
final public class AvailableReactions : Swift.Equatable, Swift.Codable {
  final public class Reaction : Swift.Equatable, Swift.Codable {
    final public let isEnabled: Swift.Bool
    final public let isPremium: Swift.Bool
    final public let value: TelegramCore.MessageReaction.Reaction
    final public let title: Swift.String
    final public let staticIcon: TelegramCore.TelegramMediaFile
    final public let appearAnimation: TelegramCore.TelegramMediaFile
    final public let selectAnimation: TelegramCore.TelegramMediaFile
    final public let activateAnimation: TelegramCore.TelegramMediaFile
    final public let effectAnimation: TelegramCore.TelegramMediaFile
    final public let aroundAnimation: TelegramCore.TelegramMediaFile?
    final public let centerAnimation: TelegramCore.TelegramMediaFile?
    public init(isEnabled: Swift.Bool, isPremium: Swift.Bool, value: TelegramCore.MessageReaction.Reaction, title: Swift.String, staticIcon: TelegramCore.TelegramMediaFile, appearAnimation: TelegramCore.TelegramMediaFile, selectAnimation: TelegramCore.TelegramMediaFile, activateAnimation: TelegramCore.TelegramMediaFile, effectAnimation: TelegramCore.TelegramMediaFile, aroundAnimation: TelegramCore.TelegramMediaFile?, centerAnimation: TelegramCore.TelegramMediaFile?)
    public static func == (lhs: TelegramCore.AvailableReactions.Reaction, rhs: TelegramCore.AvailableReactions.Reaction) -> Swift.Bool
    public init(from decoder: Swift.Decoder) throws
    final public func encode(to encoder: Swift.Encoder) throws
    @objc deinit
  }
  final public let hash: Swift.Int32
  final public let reactions: [TelegramCore.AvailableReactions.Reaction]
  public init(hash: Swift.Int32, reactions: [TelegramCore.AvailableReactions.Reaction])
  public static func == (lhs: TelegramCore.AvailableReactions, rhs: TelegramCore.AvailableReactions) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public enum AddressNameValidationStatus : Swift.Equatable {
  case checking
  case invalidFormat(TelegramCore.AddressNameFormatError)
  case availability(TelegramCore.AddressNameAvailability)
  public static func == (a: TelegramCore.AddressNameValidationStatus, b: TelegramCore.AddressNameValidationStatus) -> Swift.Bool
}
final public class OpaqueChatInterfaceState {
  final public let opaqueData: Foundation.Data?
  final public let historyScrollMessageIndex: PostboxKit.MessageIndex?
  final public let synchronizeableInputState: TelegramCore.SynchronizeableChatInputState?
  public init(opaqueData: Foundation.Data?, historyScrollMessageIndex: PostboxKit.MessageIndex?, synchronizeableInputState: TelegramCore.SynchronizeableChatInputState?)
  @objc deinit
}
extension TelegramCore.TelegramEngine {
  public enum NextUnreadChannelLocation : Swift.Equatable {
    case same
    case archived
    case unarchived
    case folder(id: Swift.Int32, title: Swift.String)
    public static func == (a: TelegramCore.TelegramEngine.NextUnreadChannelLocation, b: TelegramCore.TelegramEngine.NextUnreadChannelLocation) -> Swift.Bool
  }
  @_hasMissingDesignatedInitializers final public class Peers {
    final public func addressNameAvailability(domain: TelegramCore.AddressNameDomain, name: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.AddressNameAvailability, SwiftSignalKit.NoError>
    final public func updateAddressName(domain: TelegramCore.AddressNameDomain, name: Swift.String?) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.UpdateAddressNameError>
    final public func deactivateAllAddressNames(peerId: TelegramCore.EnginePeer.Id) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.DeactivateAllAddressNamesError>
    final public func toggleAddressNameActive(domain: TelegramCore.AddressNameDomain, name: Swift.String, active: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.ToggleAddressNameActiveError>
    final public func reorderAddressNames(domain: TelegramCore.AddressNameDomain, names: [TelegramCore.TelegramPeerUsername]) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.ReorderAddressNamesError>
    final public func checkPublicChannelCreationAvailability(location: Swift.Bool = false) -> SwiftSignalKit.Signal<Swift.Bool, SwiftSignalKit.NoError>
    final public func adminedPublicChannels(scope: TelegramCore.AdminedPublicChannelsScope = .all) -> SwiftSignalKit.Signal<[PostboxKit.Peer], SwiftSignalKit.NoError>
    final public func channelAddressNameAssignmentAvailability(peerId: PostboxKit.PeerId?) -> SwiftSignalKit.Signal<TelegramCore.ChannelAddressNameAssignmentAvailability, SwiftSignalKit.NoError>
    final public func validateAddressNameInteractive(domain: TelegramCore.AddressNameDomain, name: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.AddressNameValidationStatus, SwiftSignalKit.NoError>
    final public func findChannelById(channelId: Swift.Int64) -> SwiftSignalKit.Signal<TelegramCore.EnginePeer?, SwiftSignalKit.NoError>
    final public func supportPeerId() -> SwiftSignalKit.Signal<PostboxKit.PeerId?, SwiftSignalKit.NoError>
    final public func inactiveChannelList() -> SwiftSignalKit.Signal<[TelegramCore.InactiveChannel], SwiftSignalKit.NoError>
    final public func resolvePeerByName(name: Swift.String, ageLimit: Swift.Int32 = 2 * 60 * 60 * 24) -> SwiftSignalKit.Signal<TelegramCore.EnginePeer?, SwiftSignalKit.NoError>
    final public func resolvePeerByPhone(phone: Swift.String, ageLimit: Swift.Int32 = 2 * 60 * 60 * 24) -> SwiftSignalKit.Signal<TelegramCore.EnginePeer?, SwiftSignalKit.NoError>
    final public func updatedRemotePeer(peer: TelegramCore.PeerReference) -> SwiftSignalKit.Signal<PostboxKit.Peer, TelegramCore.UpdatedRemotePeerError>
    final public func chatOnlineMembers(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Int32, SwiftSignalKit.NoError>
    final public func convertGroupToSupergroup(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<PostboxKit.PeerId, TelegramCore.ConvertGroupToSupergroupError>
    final public func createGroup(title: Swift.String, peerIds: [PostboxKit.PeerId], ttlPeriod: Swift.Int32?) -> SwiftSignalKit.Signal<PostboxKit.PeerId?, TelegramCore.CreateGroupError>
    final public func createSecretChat(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<PostboxKit.PeerId, TelegramCore.CreateSecretChatError>
    final public func setChatMessageAutoremoveTimeoutInteractively(peerId: PostboxKit.PeerId, timeout: Swift.Int32?) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.SetChatMessageAutoremoveTimeoutError>
    final public func setChatMessageAutoremoveTimeouts(peerIds: [TelegramCore.EnginePeer.Id], timeout: Swift.Int32?) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func updateChannelSlowModeInteractively(peerId: PostboxKit.PeerId, timeout: Swift.Int32?) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.UpdateChannelSlowModeError>
    final public func reportPeer(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func reportPeer(peerId: PostboxKit.PeerId, reason: TelegramCore.ReportReason, message: Swift.String) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func reportPeerPhoto(peerId: PostboxKit.PeerId, reason: TelegramCore.ReportReason, message: Swift.String) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func reportPeerMessages(messageIds: [PostboxKit.MessageId], reason: TelegramCore.ReportReason, message: Swift.String) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func reportPeerReaction(authorId: PostboxKit.PeerId, messageId: PostboxKit.MessageId) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func dismissPeerStatusOptions(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func reportRepliesMessage(messageId: PostboxKit.MessageId, deleteMessage: Swift.Bool, deleteHistory: Swift.Bool, reportSpam: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func togglePeerMuted(peerId: PostboxKit.PeerId, threadId: Swift.Int64?) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func updatePeerMuteSetting(peerId: PostboxKit.PeerId, threadId: Swift.Int64?, muteInterval: Swift.Int32?) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func updatePeerDisplayPreviewsSetting(peerId: PostboxKit.PeerId, threadId: Swift.Int64?, displayPreviews: TelegramCore.PeerNotificationDisplayPreviews) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func updatePeerNotificationSoundInteractive(peerId: PostboxKit.PeerId, threadId: Swift.Int64?, sound: TelegramCore.PeerMessageSound) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func removeCustomNotificationSettings(peerIds: [PostboxKit.PeerId]) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func removeCustomThreadNotificationSettings(peerId: TelegramCore.EnginePeer.Id, threadIds: [Swift.Int64]) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func channelAdminEventLog(peerId: PostboxKit.PeerId) -> TelegramCore.ChannelAdminEventLogContext
    final public func updateChannelMemberBannedRights(peerId: PostboxKit.PeerId, memberId: PostboxKit.PeerId, rights: TelegramCore.TelegramChatBannedRights?) -> SwiftSignalKit.Signal<(TelegramCore.ChannelParticipant?, TelegramCore.RenderedChannelParticipant?, Swift.Bool), SwiftSignalKit.NoError>
    final public func updateDefaultChannelMemberBannedRights(peerId: PostboxKit.PeerId, rights: TelegramCore.TelegramChatBannedRights) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func createChannel(title: Swift.String, description: Swift.String?, username: Swift.String? = nil) -> SwiftSignalKit.Signal<PostboxKit.PeerId, TelegramCore.CreateChannelError>
    final public func createSupergroup(title: Swift.String, description: Swift.String?, username: Swift.String? = nil, isForum: Swift.Bool = false, location: (latitude: Swift.Double, longitude: Swift.Double, address: Swift.String)? = nil, isForHistoryImport: Swift.Bool = false) -> SwiftSignalKit.Signal<PostboxKit.PeerId, TelegramCore.CreateChannelError>
    final public func deleteChannel(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.DeleteChannelError>
    final public func updateChannelHistoryAvailabilitySettingsInteractively(peerId: PostboxKit.PeerId, historyAvailableForNewMembers: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.ChannelHistoryAvailabilityError>
    final public func channelMembers(peerId: PostboxKit.PeerId, category: TelegramCore.ChannelMembersCategory = .recent(.all), offset: Swift.Int32 = 0, limit: Swift.Int32 = 64, hash: Swift.Int64 = 0) -> SwiftSignalKit.Signal<[TelegramCore.RenderedChannelParticipant]?, SwiftSignalKit.NoError>
    final public func checkOwnershipTranfserAvailability(memberId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.ChannelOwnershipTransferError>
    final public func updateChannelOwnership(channelId: PostboxKit.PeerId, memberId: PostboxKit.PeerId, password: Swift.String) -> SwiftSignalKit.Signal<[(TelegramCore.ChannelParticipant?, TelegramCore.RenderedChannelParticipant)], TelegramCore.ChannelOwnershipTransferError>
    final public func searchGroupMembers(peerId: PostboxKit.PeerId, query: Swift.String) -> SwiftSignalKit.Signal<[TelegramCore.EnginePeer], SwiftSignalKit.NoError>
    final public func toggleShouldChannelMessagesSignatures(peerId: PostboxKit.PeerId, enabled: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func toggleMessageCopyProtection(peerId: PostboxKit.PeerId, enabled: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func toggleChannelJoinToSend(peerId: PostboxKit.PeerId, enabled: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.UpdateChannelJoinToSendError>
    final public func toggleChannelJoinRequest(peerId: PostboxKit.PeerId, enabled: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.UpdateChannelJoinRequestError>
    final public func toggleAntiSpamProtection(peerId: PostboxKit.PeerId, enabled: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func reportAntiSpamFalsePositive(peerId: PostboxKit.PeerId, messageId: PostboxKit.MessageId) -> SwiftSignalKit.Signal<Swift.Bool, SwiftSignalKit.NoError>
    final public func requestPeerPhotos(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<[TelegramCore.TelegramPeerPhoto], SwiftSignalKit.NoError>
    final public func updateGroupSpecificStickerset(peerId: PostboxKit.PeerId, info: TelegramCore.StickerPackCollectionInfo?) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.UpdateGroupSpecificStickersetError>
    final public func joinChannel(peerId: PostboxKit.PeerId, hash: Swift.String?) -> SwiftSignalKit.Signal<TelegramCore.RenderedChannelParticipant?, TelegramCore.JoinChannelError>
    final public func removePeerMember(peerId: PostboxKit.PeerId, memberId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func availableGroupsForChannelDiscussion() -> SwiftSignalKit.Signal<[PostboxKit.Peer], TelegramCore.AvailableChannelDiscussionGroupError>
    final public func updateGroupDiscussionForChannel(channelId: PostboxKit.PeerId?, groupId: PostboxKit.PeerId?) -> SwiftSignalKit.Signal<Swift.Bool, TelegramCore.ChannelDiscussionGroupError>
    final public func peerCommands(id: PostboxKit.PeerId) -> SwiftSignalKit.Signal<TelegramCore.PeerCommands, SwiftSignalKit.NoError>
    final public func addGroupAdmin(peerId: PostboxKit.PeerId, adminId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.AddGroupAdminError>
    final public func removeGroupAdmin(peerId: PostboxKit.PeerId, adminId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.RemoveGroupAdminError>
    final public func fetchChannelParticipant(peerId: PostboxKit.PeerId, participantId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<TelegramCore.ChannelParticipant?, SwiftSignalKit.NoError>
    final public func updateChannelAdminRights(peerId: PostboxKit.PeerId, adminId: PostboxKit.PeerId, rights: TelegramCore.TelegramChatAdminRights?, rank: Swift.String?) -> SwiftSignalKit.Signal<(TelegramCore.ChannelParticipant?, TelegramCore.RenderedChannelParticipant), TelegramCore.UpdateChannelAdminRightsError>
    final public func peerSpecificStickerPack(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<TelegramCore.PeerSpecificStickerPackData, SwiftSignalKit.NoError>
    final public func addRecentlySearchedPeer(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func removeRecentlySearchedPeer(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func clearRecentlySearchedPeers() -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func recentlySearchedPeers() -> SwiftSignalKit.Signal<[TelegramCore.RecentlySearchedPeer], SwiftSignalKit.NoError>
    final public func removePeerChat(peerId: PostboxKit.PeerId, reportChatSpam: Swift.Bool, deleteGloballyIfPossible: Swift.Bool = false) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func removePeerChats(peerIds: [PostboxKit.PeerId]) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func terminateSecretChat(peerId: PostboxKit.PeerId, requestRemoteHistoryRemoval: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func addGroupMember(peerId: PostboxKit.PeerId, memberId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.AddGroupMemberError>
    final public func addChannelMember(peerId: PostboxKit.PeerId, memberId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<(TelegramCore.ChannelParticipant?, TelegramCore.RenderedChannelParticipant), TelegramCore.AddChannelMemberError>
    final public func sendBotRequestedPeer(messageId: PostboxKit.MessageId, buttonId: Swift.Int32, requestedPeerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.SendBotRequestedPeerError>
    final public func addChannelMembers(peerId: PostboxKit.PeerId, memberIds: [PostboxKit.PeerId]) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.AddChannelMemberError>
    final public func recentPeers() -> SwiftSignalKit.Signal<TelegramCore.RecentPeers, SwiftSignalKit.NoError>
    final public func managedUpdatedRecentPeers() -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func removeRecentPeer(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func updateRecentPeersEnabled(enabled: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func addRecentlyUsedInlineBot(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func recentlyUsedInlineBots() -> SwiftSignalKit.Signal<[(TelegramCore.EnginePeer, Swift.Double)], SwiftSignalKit.NoError>
    final public func removeRecentlyUsedInlineBot(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func uploadedPeerPhoto(resource: PostboxKit.MediaResource) -> SwiftSignalKit.Signal<TelegramCore.UploadedPeerPhotoData, SwiftSignalKit.NoError>
    final public func uploadedPeerVideo(resource: PostboxKit.MediaResource) -> SwiftSignalKit.Signal<TelegramCore.UploadedPeerPhotoData, SwiftSignalKit.NoError>
    final public func updatePeerPhoto(peerId: PostboxKit.PeerId, photo: SwiftSignalKit.Signal<TelegramCore.UploadedPeerPhotoData, SwiftSignalKit.NoError>?, video: SwiftSignalKit.Signal<TelegramCore.UploadedPeerPhotoData?, SwiftSignalKit.NoError>? = nil, videoStartTimestamp: Swift.Double? = nil, markup: TelegramCore.UploadPeerPhotoMarkup? = nil, mapResourceToAvatarSizes: @escaping (PostboxKit.MediaResource, [TelegramCore.TelegramMediaImageRepresentation]) -> SwiftSignalKit.Signal<[Swift.Int : Foundation.Data], SwiftSignalKit.NoError>) -> SwiftSignalKit.Signal<TelegramCore.UpdatePeerPhotoStatus, TelegramCore.UploadPeerPhotoError>
    final public func requestUpdateChatListFilter(id: Swift.Int32, filter: TelegramCore.ChatListFilter?) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.RequestUpdateChatListFilterError>
    final public func requestUpdateChatListFilterOrder(ids: [Swift.Int32]) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.RequestUpdateChatListFilterOrderError>
    final public func generateNewChatListFilterId(filters: [TelegramCore.ChatListFilter]) -> Swift.Int32
    final public func updateChatListFiltersInteractively(_ f: @escaping ([TelegramCore.ChatListFilter]) -> [TelegramCore.ChatListFilter]) -> SwiftSignalKit.Signal<[TelegramCore.ChatListFilter], SwiftSignalKit.NoError>
    final public func updatedChatListFilters() -> SwiftSignalKit.Signal<[TelegramCore.ChatListFilter], SwiftSignalKit.NoError>
    final public func updatedChatListFiltersInfo() -> SwiftSignalKit.Signal<(filters: [TelegramCore.ChatListFilter], synchronized: Swift.Bool), SwiftSignalKit.NoError>
    final public func currentChatListFilters() -> SwiftSignalKit.Signal<[TelegramCore.ChatListFilter], SwiftSignalKit.NoError>
    final public func markChatListFeaturedFiltersAsSeen() -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func updateChatListFeaturedFilters() -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func unmarkChatListFeaturedFiltersAsSeen() -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func checkPeerChatServiceActions(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func createPeerExportedInvitation(peerId: PostboxKit.PeerId, title: Swift.String?, expireDate: Swift.Int32?, usageLimit: Swift.Int32?, requestNeeded: Swift.Bool?) -> SwiftSignalKit.Signal<TelegramCore.ExportedInvitation?, TelegramCore.CreatePeerExportedInvitationError>
    final public func editPeerExportedInvitation(peerId: PostboxKit.PeerId, link: Swift.String, title: Swift.String?, expireDate: Swift.Int32?, usageLimit: Swift.Int32?, requestNeeded: Swift.Bool?) -> SwiftSignalKit.Signal<TelegramCore.ExportedInvitation?, TelegramCore.EditPeerExportedInvitationError>
    final public func revokePeerExportedInvitation(peerId: PostboxKit.PeerId, link: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.RevokeExportedInvitationResult?, TelegramCore.RevokePeerExportedInvitationError>
    final public func deletePeerExportedInvitation(peerId: PostboxKit.PeerId, link: Swift.String) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.DeletePeerExportedInvitationError>
    final public func deleteAllRevokedPeerExportedInvitations(peerId: PostboxKit.PeerId, adminId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func peerExportedInvitationsCreators(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<[TelegramCore.ExportedInvitationCreator], SwiftSignalKit.NoError>
    final public func direct_peerExportedInvitations(peerId: PostboxKit.PeerId, revoked: Swift.Bool, adminId: PostboxKit.PeerId? = nil, offsetLink: TelegramCore.ExportedInvitation? = nil) -> SwiftSignalKit.Signal<TelegramCore.ExportedInvitations?, SwiftSignalKit.NoError>
    final public func peerExportedInvitations(peerId: PostboxKit.PeerId, adminId: PostboxKit.PeerId?, revoked: Swift.Bool, forceUpdate: Swift.Bool) -> TelegramCore.PeerExportedInvitationsContext
    final public func revokePersistentPeerExportedInvitation(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<TelegramCore.ExportedInvitation?, SwiftSignalKit.NoError>
    final public func peerInvitationImporters(peerId: PostboxKit.PeerId, subject: TelegramCore.PeerInvitationImportersContext.Subject) -> TelegramCore.PeerInvitationImportersContext
    final public func notificationExceptionsList() -> SwiftSignalKit.Signal<TelegramCore.NotificationExceptionsList, SwiftSignalKit.NoError>
    final public func fetchAndUpdateCachedPeerData(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Bool, SwiftSignalKit.NoError>
    final public func toggleItemPinned(location: TelegramCore.TogglePeerChatPinnedLocation, itemId: PostboxKit.PinnedItemId) -> SwiftSignalKit.Signal<TelegramCore.TogglePeerChatPinnedResult, SwiftSignalKit.NoError>
    final public func getPinnedItemIds(location: TelegramCore.TogglePeerChatPinnedLocation) -> SwiftSignalKit.Signal<[PostboxKit.PinnedItemId], SwiftSignalKit.NoError>
    final public func reorderPinnedItemIds(location: TelegramCore.TogglePeerChatPinnedLocation, itemIds: [PostboxKit.PinnedItemId]) -> SwiftSignalKit.Signal<Swift.Bool, SwiftSignalKit.NoError>
    final public func joinChatInteractively(with hash: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.EnginePeer?, TelegramCore.JoinLinkError>
    final public func joinLinkInformation(_ hash: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.ExternalJoiningChatState, TelegramCore.JoinLinkInfoError>
    final public func updatePeerTitle(peerId: PostboxKit.PeerId, title: Swift.String) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.UpdatePeerTitleError>
    final public func updatePeerDescription(peerId: PostboxKit.PeerId, description: Swift.String?) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.UpdatePeerDescriptionError>
    final public func getNextUnreadChannel(peerId: PostboxKit.PeerId, chatListFilterId: Swift.Int32?, getFilterPredicate: @escaping (TelegramCore.ChatListFilterData) -> PostboxKit.ChatListFilterPredicate) -> SwiftSignalKit.Signal<(peer: TelegramCore.EnginePeer, unreadCount: Swift.Int, location: TelegramCore.TelegramEngine.NextUnreadChannelLocation)?, SwiftSignalKit.NoError>
    final public func getOpaqueChatInterfaceState(peerId: PostboxKit.PeerId, threadId: Swift.Int64?) -> SwiftSignalKit.Signal<TelegramCore.OpaqueChatInterfaceState?, SwiftSignalKit.NoError>
    final public func setOpaqueChatInterfaceState(peerId: PostboxKit.PeerId, threadId: Swift.Int64?, state: TelegramCore.OpaqueChatInterfaceState) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func sendAsAvailablePeers(peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<[TelegramCore.SendAsPeer], SwiftSignalKit.NoError>
    final public func updatePeerSendAsPeer(peerId: PostboxKit.PeerId, sendAs: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.UpdatePeerSendAsPeerError>
    final public func updatePeerAllowedReactions(peerId: PostboxKit.PeerId, allowedReactions: TelegramCore.PeerAllowedReactions) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.UpdatePeerAllowedReactionsError>
    final public func notificationSoundList() -> SwiftSignalKit.Signal<TelegramCore.NotificationSoundList?, SwiftSignalKit.NoError>
    final public func saveNotificationSound(file: TelegramCore.FileMediaReference) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.UploadNotificationSoundError>
    final public func removeNotificationSound(file: TelegramCore.FileMediaReference) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.UploadNotificationSoundError>
    final public func uploadNotificationSound(title: Swift.String, data: Foundation.Data) -> SwiftSignalKit.Signal<TelegramCore.NotificationSoundList.NotificationSound, TelegramCore.UploadNotificationSoundError>
    final public func deleteNotificationSound(fileId: Swift.Int64) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.DeleteNotificationSoundError>
    final public func ensurePeerIsLocallyAvailable(peer: TelegramCore.EnginePeer) -> SwiftSignalKit.Signal<TelegramCore.EnginePeer, SwiftSignalKit.NoError>
    final public func ensurePeersAreLocallyAvailable(peers: [TelegramCore.EnginePeer]) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func mostRecentSecretChat(id: TelegramCore.EnginePeer.Id) -> SwiftSignalKit.Signal<TelegramCore.EnginePeer.Id?, SwiftSignalKit.NoError>
    final public func updatePeersGroupIdInteractively(peerIds: [TelegramCore.EnginePeer.Id], groupId: TelegramCore.EngineChatList.Group) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func resetAllPeerNotificationSettings() -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func setChannelForumMode(id: TelegramCore.EnginePeer.Id, isForum: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func createForumChannelTopic(id: TelegramCore.EnginePeer.Id, title: Swift.String, iconColor: Swift.Int32, iconFileId: Swift.Int64?) -> SwiftSignalKit.Signal<Swift.Int64, TelegramCore.CreateForumChannelTopicError>
    final public func fetchForumChannelTopic(id: TelegramCore.EnginePeer.Id, threadId: Swift.Int64) -> SwiftSignalKit.Signal<PostboxKit.EngineMessageHistoryThread.Info?, SwiftSignalKit.NoError>
    final public func editForumChannelTopic(id: TelegramCore.EnginePeer.Id, threadId: Swift.Int64, title: Swift.String, iconFileId: Swift.Int64?) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.EditForumChannelTopicError>
    final public func setForumChannelTopicClosed(id: TelegramCore.EnginePeer.Id, threadId: Swift.Int64, isClosed: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.EditForumChannelTopicError>
    final public func setForumChannelTopicHidden(id: TelegramCore.EnginePeer.Id, threadId: Swift.Int64, isHidden: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.EditForumChannelTopicError>
    final public func removeForumChannelThread(id: TelegramCore.EnginePeer.Id, threadId: Swift.Int64) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func removeForumChannelThreads(id: TelegramCore.EnginePeer.Id, threadIds: [Swift.Int64]) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func toggleForumChannelTopicPinned(id: TelegramCore.EnginePeer.Id, threadId: Swift.Int64) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.SetForumChannelTopicPinnedError>
    final public func getForumChannelPinnedTopics(id: TelegramCore.EnginePeer.Id) -> SwiftSignalKit.Signal<[Swift.Int64], SwiftSignalKit.NoError>
    final public func setForumChannelPinnedTopics(id: TelegramCore.EnginePeer.Id, threadIds: [Swift.Int64]) -> SwiftSignalKit.Signal<Swift.Never, TelegramCore.SetForumChannelTopicPinnedError>
    final public func forumChannelTopicNotificationExceptions(id: TelegramCore.EnginePeer.Id) -> SwiftSignalKit.Signal<[PostboxKit.EngineMessageHistoryThread.NotificationException], SwiftSignalKit.NoError>
    final public func importContactToken(token: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.EnginePeer?, SwiftSignalKit.NoError>
    final public func exportContactToken() -> SwiftSignalKit.Signal<TelegramCore.ExportedContactToken?, SwiftSignalKit.NoError>
    final public func updateChannelMembersHidden(peerId: TelegramCore.EnginePeer.Id, value: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    @objc deinit
  }
}
public func _internal_decodeStoredChatInterfaceState(state: PostboxKit.StoredPeerChatInterfaceState) -> TelegramCore.OpaqueChatInterfaceState?
public class OutgoingChatContextResultMessageAttribute : PostboxKit.MessageAttribute {
  final public let queryId: Swift.Int64
  final public let id: Swift.String
  final public let hideVia: Swift.Bool
  public init(queryId: Swift.Int64, id: Swift.String, hideVia: Swift.Bool)
  required public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  @objc deinit
}
public enum UpdatePeerPhotoStatus {
  case progress(Swift.Float)
  case complete([TelegramCore.TelegramMediaImageRepresentation])
}
public enum UploadPeerPhotoError {
  case generic
  public static func == (a: TelegramCore.UploadPeerPhotoError, b: TelegramCore.UploadPeerPhotoError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UploadPeerPhotoMarkup {
  case emoji(fileId: Swift.Int64, backgroundColors: [Swift.Int32])
  case sticker(packReference: TelegramCore.StickerPackReference, fileId: Swift.Int64, backgroundColors: [Swift.Int32])
}
public enum SetCustomPeerPhotoMode {
  case custom
  case suggest
  case customAndSuggest
  public static func == (a: TelegramCore.SetCustomPeerPhotoMode, b: TelegramCore.SetCustomPeerPhotoMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct UploadedPeerPhotoData {
  public var isCompleted: Swift.Bool {
    get
  }
}
extension TelegramCore.TelegramEngine {
  @_hasMissingDesignatedInitializers final public class AccountData {
    final public func acceptTermsOfService(id: Swift.String) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func requestChangeAccountPhoneNumberVerification(phoneNumber: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.ChangeAccountPhoneNumberData, TelegramCore.RequestChangeAccountPhoneNumberVerificationError>
    final public func requestNextChangeAccountPhoneNumberVerification(phoneNumber: Swift.String, phoneCodeHash: Swift.String) -> SwiftSignalKit.Signal<TelegramCore.ChangeAccountPhoneNumberData, TelegramCore.RequestChangeAccountPhoneNumberVerificationError>
    final public func requestChangeAccountPhoneNumber(phoneNumber: Swift.String, phoneCodeHash: Swift.String, phoneCode: Swift.String) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.ChangeAccountPhoneNumberError>
    final public func updateAccountPeerName(firstName: Swift.String, lastName: Swift.String) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func updateAbout(about: Swift.String?) -> SwiftSignalKit.Signal<Swift.Void, TelegramCore.UpdateAboutError>
    final public func unregisterNotificationToken(token: Foundation.Data, type: TelegramCore.NotificationTokenType, otherAccountUserIds: [PostboxKit.PeerId.Id]) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func registerNotificationToken(token: Foundation.Data, type: TelegramCore.NotificationTokenType, sandbox: Swift.Bool, otherAccountUserIds: [PostboxKit.PeerId.Id], excludeMutedChats: Swift.Bool) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    final public func updateAccountPhoto(resource: PostboxKit.MediaResource?, videoResource: PostboxKit.MediaResource?, videoStartTimestamp: Swift.Double?, markup: TelegramCore.UploadPeerPhotoMarkup?, mapResourceToAvatarSizes: @escaping (PostboxKit.MediaResource, [TelegramCore.TelegramMediaImageRepresentation]) -> SwiftSignalKit.Signal<[Swift.Int : Foundation.Data], SwiftSignalKit.NoError>) -> SwiftSignalKit.Signal<TelegramCore.UpdatePeerPhotoStatus, TelegramCore.UploadPeerPhotoError>
    final public func updatePeerPhotoExisting(reference: TelegramCore.TelegramMediaImageReference) -> SwiftSignalKit.Signal<TelegramCore.TelegramMediaImage?, SwiftSignalKit.NoError>
    final public func removeAccountPhoto(reference: TelegramCore.TelegramMediaImageReference?) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func updateFallbackPhoto(resource: PostboxKit.MediaResource?, videoResource: PostboxKit.MediaResource?, videoStartTimestamp: Swift.Double?, markup: TelegramCore.UploadPeerPhotoMarkup?, mapResourceToAvatarSizes: @escaping (PostboxKit.MediaResource, [TelegramCore.TelegramMediaImageRepresentation]) -> SwiftSignalKit.Signal<[Swift.Int : Foundation.Data], SwiftSignalKit.NoError>) -> SwiftSignalKit.Signal<TelegramCore.UpdatePeerPhotoStatus, TelegramCore.UploadPeerPhotoError>
    final public func removeFallbackPhoto(reference: TelegramCore.TelegramMediaImageReference?) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
    final public func setEmojiStatus(file: TelegramCore.TelegramMediaFile?, expirationDate: Swift.Int32?) -> SwiftSignalKit.Signal<Swift.Never, SwiftSignalKit.NoError>
    @objc deinit
  }
}
public struct PeerStatusSettings : PostboxKit.PostboxCoding, Swift.Equatable {
  public struct Flags : Swift.OptionSet {
    public var rawValue: Swift.Int32
    public init(rawValue: Swift.Int32)
    public static let canReport: TelegramCore.PeerStatusSettings.Flags
    public static let canShareContact: TelegramCore.PeerStatusSettings.Flags
    public static let canBlock: TelegramCore.PeerStatusSettings.Flags
    public static let canAddContact: TelegramCore.PeerStatusSettings.Flags
    public static let addExceptionWhenAddingContact: TelegramCore.PeerStatusSettings.Flags
    public static let canReportIrrelevantGeoLocation: TelegramCore.PeerStatusSettings.Flags
    public static let autoArchived: TelegramCore.PeerStatusSettings.Flags
    public static let suggestAddMembers: TelegramCore.PeerStatusSettings.Flags
    public typealias ArrayLiteralElement = TelegramCore.PeerStatusSettings.Flags
    public typealias Element = TelegramCore.PeerStatusSettings.Flags
    public typealias RawValue = Swift.Int32
  }
  public var flags: TelegramCore.PeerStatusSettings.Flags
  public var geoDistance: Swift.Int32?
  public var requestChatTitle: Swift.String?
  public var requestChatDate: Swift.Int32?
  public var requestChatIsChannel: Swift.Bool?
  public init()
  public init(flags: TelegramCore.PeerStatusSettings.Flags, geoDistance: Swift.Int32? = nil, requestChatTitle: Swift.String? = nil, requestChatDate: Swift.Int32? = nil, requestChatIsChannel: Swift.Bool? = nil)
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public func contains(_ member: TelegramCore.PeerStatusSettings.Flags) -> Swift.Bool
  public static func == (a: TelegramCore.PeerStatusSettings, b: TelegramCore.PeerStatusSettings) -> Swift.Bool
}
public func returnGroup(account: TelegramCore.Account, peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
public func leftGroup(account: TelegramCore.Account, peerId: PostboxKit.PeerId) -> SwiftSignalKit.Signal<Swift.Void, SwiftSignalKit.NoError>
final public class ConsumePersonalMessageAction : PostboxKit.PendingMessageActionData {
  public init()
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to: PostboxKit.PendingMessageActionData) -> Swift.Bool
  @objc deinit
}
final public class ReadReactionAction : PostboxKit.PendingMessageActionData {
  public init()
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  final public func isEqual(to: PostboxKit.PendingMessageActionData) -> Swift.Bool
  @objc deinit
}
public enum CachedStickerPackResult {
  case none
  case fetching
  case result(TelegramCore.StickerPackCollectionInfo, [TelegramCore.StickerPackItem], Swift.Bool)
}
public protocol TelegramMediaResource : PostboxKit.MediaResource, PostboxKit.PostboxCoding {
}
public enum GroupParticipant : PostboxKit.PostboxCoding, Swift.Equatable {
  case member(id: PostboxKit.PeerId, invitedBy: PostboxKit.PeerId, invitedAt: Swift.Int32)
  case creator(id: PostboxKit.PeerId)
  case admin(id: PostboxKit.PeerId, invitedBy: PostboxKit.PeerId, invitedAt: Swift.Int32)
  public var peerId: PostboxKit.PeerId {
    get
  }
  public init(decoder: PostboxKit.PostboxDecoder)
  public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public var invitedBy: PostboxKit.PeerId {
    get
  }
  public static func == (a: TelegramCore.GroupParticipant, b: TelegramCore.GroupParticipant) -> Swift.Bool
}
final public class CachedGroupParticipants : PostboxKit.PostboxCoding, Swift.Equatable {
  final public let participants: [TelegramCore.GroupParticipant]
  final public let version: Swift.Int32
  public init(participants: [TelegramCore.GroupParticipant], version: Swift.Int32)
  public init(decoder: PostboxKit.PostboxDecoder)
  final public func encode(_ encoder: PostboxKit.PostboxEncoder)
  public static func == (lhs: TelegramCore.CachedGroupParticipants, rhs: TelegramCore.CachedGroupParticipants) -> Swift.Bool
  @objc deinit
}
extension TelegramCore.JSON {
  public init?(data: Foundation.Data)
  public init?(string: Swift.String)
}
extension TelegramCore.JSON : Swift.Collection {
  public var startIndex: TelegramCore.JSON.Index {
    get
  }
  public var endIndex: TelegramCore.JSON.Index {
    get
  }
  public func index(after i: TelegramCore.JSON.Index) -> TelegramCore.JSON.Index
  public subscript(position: TelegramCore.JSON.Index) -> (Swift.String, TelegramCore.JSON) {
    get
  }
  public typealias Element = (Swift.String, TelegramCore.JSON)
  public typealias Indices = Swift.DefaultIndices<TelegramCore.JSON>
  public typealias Iterator = Swift.IndexingIterator<TelegramCore.JSON>
  public typealias SubSequence = Swift.Slice<TelegramCore.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: TelegramCore.JSONKey { get }
}
extension Swift.Int : TelegramCore.JSONSubscriptType {
  public var jsonKey: TelegramCore.JSONKey {
    get
  }
}
extension Swift.String : TelegramCore.JSONSubscriptType {
  public var jsonKey: TelegramCore.JSONKey {
    get
  }
}
extension TelegramCore.JSON {
  public subscript(key: TelegramCore.JSONSubscriptType) -> TelegramCore.JSONElement? {
    get
  }
}
extension TelegramCore.JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension TelegramCore.JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
public protocol JSONElement {
}
extension Swift.Int : TelegramCore.JSONElement {
}
extension Swift.Int8 : TelegramCore.JSONElement {
}
extension Swift.Int16 : TelegramCore.JSONElement {
}
extension Swift.Int32 : TelegramCore.JSONElement {
}
extension Swift.Int64 : TelegramCore.JSONElement {
}
extension Swift.UInt : TelegramCore.JSONElement {
}
extension Swift.UInt8 : TelegramCore.JSONElement {
}
extension Swift.UInt16 : TelegramCore.JSONElement {
}
extension Swift.UInt32 : TelegramCore.JSONElement {
}
extension Swift.UInt64 : TelegramCore.JSONElement {
}
extension Swift.Double : TelegramCore.JSONElement {
}
extension Swift.String : TelegramCore.JSONElement {
}
extension Swift.Bool : TelegramCore.JSONElement {
}
extension Swift.Array : TelegramCore.JSONElement where Element == TelegramCore.JSONElement {
}
extension Swift.Dictionary : TelegramCore.JSONElement where Key == Swift.String, Value == TelegramCore.JSONElement {
}
extension TelegramCore.JSON {
  public init?(apiJson: TelegramApi.Api.JSONValue)
}
extension TelegramCore.EngineMediaResource.CacheTimeout : Swift.Equatable {}
extension TelegramCore.EngineMediaResource.CacheTimeout : Swift.Hashable {}
extension TelegramCore.EngineMediaResource.ByteRange.Priority : Swift.Equatable {}
extension TelegramCore.EngineMediaResource.ByteRange.Priority : Swift.Hashable {}
extension TelegramCore.EngineMediaResource.Fetch.Error : Swift.Equatable {}
extension TelegramCore.EngineMediaResource.Fetch.Error : Swift.Hashable {}
extension TelegramCore.EnqueueMessageGrouping : Swift.Equatable {}
extension TelegramCore.EnqueueMessageGrouping : Swift.Hashable {}
extension TelegramCore.RequestUpdateChatListFilterError : Swift.Equatable {}
extension TelegramCore.RequestUpdateChatListFilterError : Swift.Hashable {}
extension TelegramCore.RequestUpdateChatListFilterOrderError : Swift.Equatable {}
extension TelegramCore.RequestUpdateChatListFilterOrderError : Swift.Hashable {}
extension TelegramCore.EngineCallList.Scope : Swift.Equatable {}
extension TelegramCore.EngineCallList.Scope : Swift.Hashable {}
extension TelegramCore.AddressNameFormatError : Swift.Equatable {}
extension TelegramCore.AddressNameFormatError : Swift.Hashable {}
extension TelegramCore.AddressNameAvailability : Swift.Hashable {}
extension TelegramCore.UpdateAddressNameError : Swift.Equatable {}
extension TelegramCore.UpdateAddressNameError : Swift.Hashable {}
extension TelegramCore.DeactivateAllAddressNamesError : Swift.Equatable {}
extension TelegramCore.DeactivateAllAddressNamesError : Swift.Hashable {}
extension TelegramCore.ToggleAddressNameActiveError : Swift.Equatable {}
extension TelegramCore.ToggleAddressNameActiveError : Swift.Hashable {}
extension TelegramCore.ReorderAddressNamesError : Swift.Equatable {}
extension TelegramCore.ReorderAddressNamesError : Swift.Hashable {}
extension TelegramCore.AdminedPublicChannelsScope : Swift.Equatable {}
extension TelegramCore.AdminedPublicChannelsScope : Swift.Hashable {}
extension TelegramCore.ChannelAddressNameAssignmentAvailability : Swift.Equatable {}
extension TelegramCore.ChannelAddressNameAssignmentAvailability : Swift.Hashable {}
extension TelegramCore.CloudPeerPhotoSizeSpec : Swift.Equatable {}
extension TelegramCore.CloudPeerPhotoSizeSpec : Swift.Hashable {}
extension TelegramCore.CloudPeerPhotoSizeSpec : Swift.RawRepresentable {}
extension TelegramCore.TelegramBaseTheme : Swift.Equatable {}
extension TelegramCore.TelegramBaseTheme : Swift.Hashable {}
extension TelegramCore.TelegramBaseTheme : Swift.RawRepresentable {}
extension TelegramCore.TelegramMediaImageReferenceDecodingError : Swift.Equatable {}
extension TelegramCore.TelegramMediaImageReferenceDecodingError : Swift.Hashable {}
extension TelegramCore.TelegramMediaImageDecodingError : Swift.Equatable {}
extension TelegramCore.TelegramMediaImageDecodingError : Swift.Hashable {}
extension TelegramCore.ReportReason : Swift.Hashable {}
extension TelegramCore.SavedAutodownloadPreset : Swift.Equatable {}
extension TelegramCore.SavedAutodownloadPreset : Swift.Hashable {}
extension TelegramCore.FetchChannelReplyThreadMessageError : Swift.Equatable {}
extension TelegramCore.FetchChannelReplyThreadMessageError : Swift.Hashable {}
extension TelegramCore.TelegramChannelParticipationStatus : Swift.Equatable {}
extension TelegramCore.TelegramChannelParticipationStatus : Swift.Hashable {}
extension TelegramCore.CloudSoundBuiltinCategory : Swift.Equatable {}
extension TelegramCore.CloudSoundBuiltinCategory : Swift.Hashable {}
extension TelegramCore.PeerNotificationDisplayPreviews : Swift.Hashable {}
extension TelegramCore.TranslationError : Swift.Equatable {}
extension TelegramCore.TranslationError : Swift.Hashable {}
extension TelegramCore.EngineAudioTranscriptionResult : Swift.Equatable {}
extension TelegramCore.EngineAudioTranscriptionResult : Swift.Hashable {}
extension TelegramCore.AttachMenuBots.Bot.IconName : Swift.Equatable {}
extension TelegramCore.AttachMenuBots.Bot.IconName : Swift.Hashable {}
extension TelegramCore.AttachMenuBots.Bot.IconName : Swift.RawRepresentable {}
extension TelegramCore.AddBotToAttachMenuError : Swift.Equatable {}
extension TelegramCore.AddBotToAttachMenuError : Swift.Hashable {}
extension TelegramCore.GetAttachMenuBotError : Swift.Equatable {}
extension TelegramCore.GetAttachMenuBotError : Swift.Hashable {}
extension TelegramCore.RemoveGroupAdminError : Swift.Equatable {}
extension TelegramCore.RemoveGroupAdminError : Swift.Hashable {}
extension TelegramCore.UpdatePeerTitleError : Swift.Equatable {}
extension TelegramCore.UpdatePeerTitleError : Swift.Hashable {}
extension TelegramCore.UpdatePeerDescriptionError : Swift.Equatable {}
extension TelegramCore.UpdatePeerDescriptionError : Swift.Hashable {}
extension TelegramCore.SecureIdPreparePhoneVerificationError : Swift.Equatable {}
extension TelegramCore.SecureIdPreparePhoneVerificationError : Swift.Hashable {}
extension TelegramCore.SecureIdCommitPhoneVerificationError : Swift.Equatable {}
extension TelegramCore.SecureIdCommitPhoneVerificationError : Swift.Hashable {}
extension TelegramCore.SecureIdPrepareEmailVerificationError : Swift.Equatable {}
extension TelegramCore.SecureIdPrepareEmailVerificationError : Swift.Hashable {}
extension TelegramCore.SecureIdCommitEmailVerificationError : Swift.Equatable {}
extension TelegramCore.SecureIdCommitEmailVerificationError : Swift.Hashable {}
extension TelegramCore.PhoneCallDiscardReason : Swift.Equatable {}
extension TelegramCore.PhoneCallDiscardReason : Swift.Hashable {}
extension TelegramCore.PhoneCallDiscardReason : Swift.RawRepresentable {}
extension TelegramCore.SentSecureValueType : Swift.Equatable {}
extension TelegramCore.SentSecureValueType : Swift.Hashable {}
extension TelegramCore.SentSecureValueType : Swift.RawRepresentable {}
extension TelegramCore.CallListViewType : Swift.Equatable {}
extension TelegramCore.CallListViewType : Swift.Hashable {}
extension TelegramCore.AutodownloadPreset : Swift.Equatable {}
extension TelegramCore.AutodownloadPreset : Swift.Hashable {}
extension TelegramCore.TelegramMediaFileDecodingError : Swift.Equatable {}
extension TelegramCore.TelegramMediaFileDecodingError : Swift.Hashable {}
extension TelegramCore.RequestChatContextResultsError : Swift.Equatable {}
extension TelegramCore.RequestChatContextResultsError : Swift.Hashable {}
extension TelegramCore.RequestEditMessageError : Swift.Equatable {}
extension TelegramCore.RequestEditMessageError : Swift.Hashable {}
extension TelegramCore.UpdateGroupSpecificStickersetError : Swift.Equatable {}
extension TelegramCore.UpdateGroupSpecificStickersetError : Swift.Hashable {}
extension TelegramCore.UpdatedRemotePeerError : Swift.Equatable {}
extension TelegramCore.UpdatedRemotePeerError : Swift.Hashable {}
extension TelegramCore.ChannelAdminLogEventError : Swift.Equatable {}
extension TelegramCore.ChannelAdminLogEventError : Swift.Hashable {}
extension TelegramCore.AvailableChannelDiscussionGroupError : Swift.Equatable {}
extension TelegramCore.AvailableChannelDiscussionGroupError : Swift.Hashable {}
extension TelegramCore.ChannelDiscussionGroupError : Swift.Equatable {}
extension TelegramCore.ChannelDiscussionGroupError : Swift.Hashable {}
extension TelegramCore.RequestStartBotInGroupError : Swift.Equatable {}
extension TelegramCore.RequestStartBotInGroupError : Swift.Hashable {}
extension TelegramCore.SecretChatRole : Swift.Equatable {}
extension TelegramCore.SecretChatRole : Swift.Hashable {}
extension TelegramCore.SecretChatRole : Swift.RawRepresentable {}
extension TelegramCore.SecretChatLayer : Swift.Equatable {}
extension TelegramCore.SecretChatLayer : Swift.Hashable {}
extension TelegramCore.SecretChatLayer : Swift.RawRepresentable {}
extension TelegramCore.SecretChatEmbeddedPeerState : Swift.Equatable {}
extension TelegramCore.SecretChatEmbeddedPeerState : Swift.Hashable {}
extension TelegramCore.SecretChatEmbeddedPeerState : Swift.RawRepresentable {}
extension TelegramCore.ArchivedStickerPacksNamespace : Swift.Equatable {}
extension TelegramCore.ArchivedStickerPacksNamespace : Swift.Hashable {}
extension TelegramCore.ArchivedStickerPacksNamespace : Swift.RawRepresentable {}
extension TelegramCore.ExportAuthTransferTokenError : Swift.Equatable {}
extension TelegramCore.ExportAuthTransferTokenError : Swift.Hashable {}
extension TelegramCore.ApproveAuthTransferTokenError : Swift.Equatable {}
extension TelegramCore.ApproveAuthTransferTokenError : Swift.Hashable {}
extension TelegramCore.TableHorizontalAlignment : Swift.Equatable {}
extension TelegramCore.TableHorizontalAlignment : Swift.Hashable {}
extension TelegramCore.TableHorizontalAlignment : Swift.RawRepresentable {}
extension TelegramCore.TableVerticalAlignment : Swift.Equatable {}
extension TelegramCore.TableVerticalAlignment : Swift.Hashable {}
extension TelegramCore.TableVerticalAlignment : Swift.RawRepresentable {}
extension TelegramCore.AuthorizationCodeNextType : Swift.Equatable {}
extension TelegramCore.AuthorizationCodeNextType : Swift.Hashable {}
extension TelegramCore.AuthorizationCodeNextType : Swift.RawRepresentable {}
extension TelegramCore.UpdateChannelJoinToSendError : Swift.Equatable {}
extension TelegramCore.UpdateChannelJoinToSendError : Swift.Hashable {}
extension TelegramCore.UpdateChannelJoinRequestError : Swift.Equatable {}
extension TelegramCore.UpdateChannelJoinRequestError : Swift.Hashable {}
extension TelegramCore.UploadNotificationSoundError : Swift.Equatable {}
extension TelegramCore.UploadNotificationSoundError : Swift.Hashable {}
extension TelegramCore.DeleteNotificationSoundError : Swift.Equatable {}
extension TelegramCore.DeleteNotificationSoundError : Swift.Hashable {}
extension TelegramCore.CreateSecretChatError : Swift.Equatable {}
extension TelegramCore.CreateSecretChatError : Swift.Hashable {}
extension TelegramCore.RequestStickerSetError : Swift.Equatable {}
extension TelegramCore.RequestStickerSetError : Swift.Hashable {}
extension TelegramCore.InstallStickerSetError : Swift.Equatable {}
extension TelegramCore.InstallStickerSetError : Swift.Hashable {}
extension TelegramCore.CellularNetworkType : Swift.Equatable {}
extension TelegramCore.CellularNetworkType : Swift.Hashable {}
extension TelegramCore.TelegramMediaPollPublicity : Swift.Equatable {}
extension TelegramCore.TelegramMediaPollPublicity : Swift.Hashable {}
extension TelegramCore.TelegramMediaPollPublicity : Swift.RawRepresentable {}
extension TelegramCore.DeleteChannelError : Swift.Equatable {}
extension TelegramCore.DeleteChannelError : Swift.Hashable {}
extension TelegramCore.TelegramGroupMembership : Swift.Equatable {}
extension TelegramCore.TelegramGroupMembership : Swift.Hashable {}
extension TelegramCore.TelegramGroupMembership : Swift.RawRepresentable {}
extension TelegramCore.UpdateChannelSlowModeError : Swift.Equatable {}
extension TelegramCore.UpdateChannelSlowModeError : Swift.Hashable {}
extension TelegramCore.RemoveStickerPackOption : Swift.Equatable {}
extension TelegramCore.RemoveStickerPackOption : Swift.Hashable {}
extension TelegramCore.UpdateTwoStepVerificationPasswordError : Swift.Equatable {}
extension TelegramCore.UpdateTwoStepVerificationPasswordError : Swift.Hashable {}
extension TelegramCore.RequestTwoStepVerificationPasswordRecoveryCodeError : Swift.Equatable {}
extension TelegramCore.RequestTwoStepVerificationPasswordRecoveryCodeError : Swift.Hashable {}
extension TelegramCore.RecoverTwoStepVerificationPasswordError : Swift.Equatable {}
extension TelegramCore.RecoverTwoStepVerificationPasswordError : Swift.Hashable {}
extension TelegramCore.BotPaymentFormRequestError : Swift.Equatable {}
extension TelegramCore.BotPaymentFormRequestError : Swift.Hashable {}
extension TelegramCore.ValidateBotPaymentFormError : Swift.Equatable {}
extension TelegramCore.ValidateBotPaymentFormError : Swift.Hashable {}
extension TelegramCore.SendBotPaymentFormError : Swift.Equatable {}
extension TelegramCore.SendBotPaymentFormError : Swift.Hashable {}
extension TelegramCore.RequestBotPaymentReceiptError : Swift.Equatable {}
extension TelegramCore.RequestBotPaymentReceiptError : Swift.Hashable {}
extension TelegramCore.DeleteAccountError : Swift.Equatable {}
extension TelegramCore.DeleteAccountError : Swift.Hashable {}
extension TelegramCore.ClearCallHistoryError : Swift.Equatable {}
extension TelegramCore.ClearCallHistoryError : Swift.Hashable {}
extension TelegramCore.SetChatMessageAutoremoveTimeoutError : Swift.Equatable {}
extension TelegramCore.SetChatMessageAutoremoveTimeoutError : Swift.Hashable {}
extension TelegramCore.PeerCacheUsageCategory : Swift.Equatable {}
extension TelegramCore.PeerCacheUsageCategory : Swift.Hashable {}
extension TelegramCore.PeerCacheUsageCategory : Swift.RawRepresentable {}
extension TelegramCore.RequestMessageSelectPollOptionError : Swift.Equatable {}
extension TelegramCore.RequestMessageSelectPollOptionError : Swift.Hashable {}
extension TelegramCore.CallSessionEndedType : Swift.Equatable {}
extension TelegramCore.CallSessionEndedType : Swift.Hashable {}
extension TelegramCore.DropCallReason : Swift.Equatable {}
extension TelegramCore.DropCallReason : Swift.Hashable {}
extension TelegramCore.CallSession.CallType : Swift.Equatable {}
extension TelegramCore.CallSession.CallType : Swift.Hashable {}
extension TelegramCore.CallRequestError : Swift.Equatable {}
extension TelegramCore.CallRequestError : Swift.Hashable {}
extension TelegramCore.UpdateAboutError : Swift.Equatable {}
extension TelegramCore.UpdateAboutError : Swift.Hashable {}
extension TelegramCore.TelegramChannelPermission : Swift.Equatable {}
extension TelegramCore.TelegramChannelPermission : Swift.Hashable {}
extension TelegramCore.ChatContextResultMessageDecodingError : Swift.Equatable {}
extension TelegramCore.ChatContextResultMessageDecodingError : Swift.Hashable {}
extension TelegramCore.ChatContextResultDecodingError : Swift.Equatable {}
extension TelegramCore.ChatContextResultDecodingError : Swift.Hashable {}
extension TelegramCore.ChatContextResultCollectionPresentation : Swift.Equatable {}
extension TelegramCore.ChatContextResultCollectionPresentation : Swift.Hashable {}
extension TelegramCore.ChatContextResultCollectionPresentation : Swift.RawRepresentable {}
extension TelegramCore.SecretChatIncomingEncryptedOperationType : Swift.Equatable {}
extension TelegramCore.SecretChatIncomingEncryptedOperationType : Swift.Hashable {}
extension TelegramCore.SecretChatIncomingEncryptedOperationType : Swift.RawRepresentable {}
extension TelegramCore.GetThemeError : Swift.Equatable {}
extension TelegramCore.GetThemeError : Swift.Hashable {}
extension TelegramCore.UploadThemeError : Swift.Equatable {}
extension TelegramCore.UploadThemeError : Swift.Hashable {}
extension TelegramCore.CreateThemeError : Swift.Equatable {}
extension TelegramCore.CreateThemeError : Swift.Hashable {}
extension TelegramCore.TelegramEngine.HistoryImport.InitImportError : Swift.Equatable {}
extension TelegramCore.TelegramEngine.HistoryImport.InitImportError : Swift.Hashable {}
extension TelegramCore.TelegramEngine.HistoryImport.GetInfoError : Swift.Equatable {}
extension TelegramCore.TelegramEngine.HistoryImport.GetInfoError : Swift.Hashable {}
extension TelegramCore.TelegramEngine.HistoryImport.MediaType : Swift.Equatable {}
extension TelegramCore.TelegramEngine.HistoryImport.MediaType : Swift.Hashable {}
extension TelegramCore.TelegramEngine.HistoryImport.UploadMediaError : Swift.Equatable {}
extension TelegramCore.TelegramEngine.HistoryImport.UploadMediaError : Swift.Hashable {}
extension TelegramCore.TelegramEngine.HistoryImport.StartImportError : Swift.Equatable {}
extension TelegramCore.TelegramEngine.HistoryImport.StartImportError : Swift.Hashable {}
extension TelegramCore.TelegramEngine.HistoryImport.CheckPeerImportError : Swift.Equatable {}
extension TelegramCore.TelegramEngine.HistoryImport.CheckPeerImportError : Swift.Hashable {}
extension TelegramCore.InteractiveMessagesDeletionType : Swift.Equatable {}
extension TelegramCore.InteractiveMessagesDeletionType : Swift.Hashable {}
extension TelegramCore.InteractiveMessagesDeletionType : Swift.RawRepresentable {}
extension TelegramCore.CloudChatRemoveMessagesType : Swift.Equatable {}
extension TelegramCore.CloudChatRemoveMessagesType : Swift.Hashable {}
extension TelegramCore.CloudChatRemoveMessagesType : Swift.RawRepresentable {}
extension TelegramCore.CloudChatClearHistoryType : Swift.Equatable {}
extension TelegramCore.CloudChatClearHistoryType : Swift.Hashable {}
extension TelegramCore.CloudChatClearHistoryType : Swift.RawRepresentable {}
extension TelegramCore.InteractiveHistoryClearingType : Swift.Equatable {}
extension TelegramCore.InteractiveHistoryClearingType : Swift.Hashable {}
extension TelegramCore.InteractiveHistoryClearingType : Swift.RawRepresentable {}
extension TelegramCore.TelegramMediaExpiredContentData : Swift.Equatable {}
extension TelegramCore.TelegramMediaExpiredContentData : Swift.Hashable {}
extension TelegramCore.TelegramMediaExpiredContentData : Swift.RawRepresentable {}
extension TelegramCore.ChannelAdminEventLogUpdateType : Swift.Equatable {}
extension TelegramCore.ChannelAdminEventLogUpdateType : Swift.Hashable {}
extension TelegramCore.TelegramGroup.Permission : Swift.Equatable {}
extension TelegramCore.TelegramGroup.Permission : Swift.Hashable {}
extension TelegramCore.UploadSecureIdFileError : Swift.Equatable {}
extension TelegramCore.UploadSecureIdFileError : Swift.Hashable {}
extension TelegramCore.AddSavedStickerError : Swift.Equatable {}
extension TelegramCore.AddSavedStickerError : Swift.Hashable {}
extension TelegramCore.AddGroupMemberError : Swift.Equatable {}
extension TelegramCore.AddGroupMemberError : Swift.Hashable {}
extension TelegramCore.SendBotRequestedPeerError : Swift.Equatable {}
extension TelegramCore.SendBotRequestedPeerError : Swift.Hashable {}
extension TelegramCore.AudioTranscriptionMessageAttribute.TranscriptionError : Swift.Equatable {}
extension TelegramCore.AudioTranscriptionMessageAttribute.TranscriptionError : Swift.Hashable {}
extension TelegramCore.AudioTranscriptionMessageAttribute.TranscriptionError : Swift.RawRepresentable {}
extension TelegramCore.CacheStorageSettings.PeerStorageCategory : Swift.RawRepresentable {}
extension TelegramCore.UpdatePeerSendAsPeerError : Swift.Equatable {}
extension TelegramCore.UpdatePeerSendAsPeerError : Swift.Hashable {}
extension TelegramCore.ConfirmTwoStepRecoveryEmailError : Swift.Equatable {}
extension TelegramCore.ConfirmTwoStepRecoveryEmailError : Swift.Hashable {}
extension TelegramCore.ResendTwoStepRecoveryEmailError : Swift.Equatable {}
extension TelegramCore.ResendTwoStepRecoveryEmailError : Swift.Hashable {}
extension TelegramCore.CancelTwoStepRecoveryEmailError : Swift.Equatable {}
extension TelegramCore.CancelTwoStepRecoveryEmailError : Swift.Hashable {}
extension TelegramCore.AdMessageAttribute.MessageType : Swift.Equatable {}
extension TelegramCore.AdMessageAttribute.MessageType : Swift.Hashable {}
extension TelegramCore.RequestLocalizationPreviewError : Swift.Equatable {}
extension TelegramCore.RequestLocalizationPreviewError : Swift.Hashable {}
extension TelegramCore.SecureIdValueContentErrorPersonalDetailsField : Swift.RawRepresentable {}
extension TelegramCore.SecureIdValueContentErrorPassportField : Swift.RawRepresentable {}
extension TelegramCore.SecureIdValueContentErrorInternalPassportField : Swift.RawRepresentable {}
extension TelegramCore.SecureIdValueContentErrorDriversLicenseField : Swift.RawRepresentable {}
extension TelegramCore.SecureIdValueContentErrorIdCardField : Swift.RawRepresentable {}
extension TelegramCore.SecureIdValueContentErrorAddressField : Swift.RawRepresentable {}
extension TelegramCore.AccountEnvironment : Swift.Equatable {}
extension TelegramCore.AccountEnvironment : Swift.Hashable {}
extension TelegramCore.AccountEnvironment : Swift.RawRepresentable {}
extension TelegramCore.EnginePeer.NotificationSettings.DisplayPreviews : Swift.Equatable {}
extension TelegramCore.EnginePeer.NotificationSettings.DisplayPreviews : Swift.Hashable {}
extension TelegramCore.VoiceCallP2PMode : Swift.Equatable {}
extension TelegramCore.VoiceCallP2PMode : Swift.Hashable {}
extension TelegramCore.VoiceCallP2PMode : Swift.RawRepresentable {}
extension TelegramCore.CreatePeerExportedInvitationError : Swift.Equatable {}
extension TelegramCore.CreatePeerExportedInvitationError : Swift.Hashable {}
extension TelegramCore.EditPeerExportedInvitationError : Swift.Equatable {}
extension TelegramCore.EditPeerExportedInvitationError : Swift.Hashable {}
extension TelegramCore.RevokePeerExportedInvitationError : Swift.Equatable {}
extension TelegramCore.RevokePeerExportedInvitationError : Swift.Hashable {}
extension TelegramCore.DeletePeerExportedInvitationError : Swift.Equatable {}
extension TelegramCore.DeletePeerExportedInvitationError : Swift.Hashable {}
extension TelegramCore.PeerInvitationImportersContext.UpdateAction : Swift.Equatable {}
extension TelegramCore.PeerInvitationImportersContext.UpdateAction : Swift.Hashable {}
extension TelegramCore.CreateForumChannelTopicError : Swift.Equatable {}
extension TelegramCore.CreateForumChannelTopicError : Swift.Hashable {}
extension TelegramCore.EditForumChannelTopicError : Swift.Equatable {}
extension TelegramCore.EditForumChannelTopicError : Swift.Hashable {}
extension TelegramCore.SynchronizeInstalledStickerPacksOperationNamespace : Swift.Equatable {}
extension TelegramCore.SynchronizeInstalledStickerPacksOperationNamespace : Swift.Hashable {}
extension TelegramCore.SynchronizeInstalledStickerPacksOperationNamespace : Swift.RawRepresentable {}
extension TelegramCore.RequestCancelAccountResetDataError : Swift.Equatable {}
extension TelegramCore.RequestCancelAccountResetDataError : Swift.Hashable {}
extension TelegramCore.CancelAccountResetError : Swift.Equatable {}
extension TelegramCore.CancelAccountResetError : Swift.Hashable {}
extension TelegramCore.RequestChangeAccountPhoneNumberVerificationError : Swift.Equatable {}
extension TelegramCore.RequestChangeAccountPhoneNumberVerificationError : Swift.Hashable {}
extension TelegramCore.ChangeAccountPhoneNumberError : Swift.Equatable {}
extension TelegramCore.ChangeAccountPhoneNumberError : Swift.Hashable {}
extension TelegramCore.UpdatePinnedMessageError : Swift.Equatable {}
extension TelegramCore.UpdatePinnedMessageError : Swift.Hashable {}
extension TelegramCore.SecretChatSequenceBasedLayer : Swift.Equatable {}
extension TelegramCore.SecretChatSequenceBasedLayer : Swift.Hashable {}
extension TelegramCore.SecretChatSequenceBasedLayer : Swift.RawRepresentable {}
extension TelegramCore.JoinChannelError : Swift.Equatable {}
extension TelegramCore.JoinChannelError : Swift.Hashable {}
extension TelegramCore.ConvertGroupToSupergroupError : Swift.Equatable {}
extension TelegramCore.ConvertGroupToSupergroupError : Swift.Hashable {}
extension TelegramCore.ConvertGroupToGigagroupError : Swift.Equatable {}
extension TelegramCore.ConvertGroupToGigagroupError : Swift.Hashable {}
extension TelegramCore.EmojiSearchCategories.Kind : Swift.Equatable {}
extension TelegramCore.EmojiSearchCategories.Kind : Swift.Hashable {}
extension TelegramCore.EmojiSearchCategories.Kind : Swift.RawRepresentable {}
extension TelegramCore.SecureIdValueKey : Swift.Equatable {}
extension TelegramCore.SecureIdValueKey : Swift.Hashable {}
extension TelegramCore.SecureIdValueKey : Swift.RawRepresentable {}
extension TelegramCore.GrantSecureIdAccessError : Swift.Equatable {}
extension TelegramCore.GrantSecureIdAccessError : Swift.Hashable {}
extension TelegramCore.UploadWallpaperError : Swift.Equatable {}
extension TelegramCore.UploadWallpaperError : Swift.Hashable {}
extension TelegramCore.GetWallpaperError : Swift.Equatable {}
extension TelegramCore.GetWallpaperError : Swift.Hashable {}
extension TelegramCore.AssignAppStoreTransactionError : Swift.Equatable {}
extension TelegramCore.AssignAppStoreTransactionError : Swift.Hashable {}
extension TelegramCore.RestoreAppStoreReceiptError : Swift.Equatable {}
extension TelegramCore.RestoreAppStoreReceiptError : Swift.Hashable {}
extension TelegramCore.ServerProvidedSuggestion : Swift.Equatable {}
extension TelegramCore.ServerProvidedSuggestion : Swift.Hashable {}
extension TelegramCore.ServerProvidedSuggestion : Swift.RawRepresentable {}
extension TelegramCore.PeerSpecificServerProvidedSuggestion : Swift.Equatable {}
extension TelegramCore.PeerSpecificServerProvidedSuggestion : Swift.Hashable {}
extension TelegramCore.PeerSpecificServerProvidedSuggestion : Swift.RawRepresentable {}
extension TelegramCore.SaveCallDebugLogResult : Swift.Equatable {}
extension TelegramCore.SaveCallDebugLogResult : Swift.Hashable {}
extension TelegramCore.UpdateSelectiveAccountPrivacySettingsType : Swift.Equatable {}
extension TelegramCore.UpdateSelectiveAccountPrivacySettingsType : Swift.Hashable {}
extension TelegramCore.EngineChatList.Group : Swift.Equatable {}
extension TelegramCore.EngineChatList.Group : Swift.Hashable {}
extension TelegramCore.JoinLinkInfoError : Swift.Equatable {}
extension TelegramCore.JoinLinkInfoError : Swift.Hashable {}
extension TelegramCore.JoinLinkError : Swift.Equatable {}
extension TelegramCore.JoinLinkError : Swift.Hashable {}
extension TelegramCore.UpdateContactNameError : Swift.Equatable {}
extension TelegramCore.UpdateContactNameError : Swift.Hashable {}
extension TelegramCore.AccountTransactionError : Swift.Equatable {}
extension TelegramCore.AccountTransactionError : Swift.Hashable {}
extension TelegramCore.UploadStickerError : Swift.Equatable {}
extension TelegramCore.UploadStickerError : Swift.Hashable {}
extension TelegramCore.CreateStickerSetError : Swift.Equatable {}
extension TelegramCore.CreateStickerSetError : Swift.Hashable {}
extension TelegramCore.CreateStickerSetType : Swift.Equatable {}
extension TelegramCore.CreateStickerSetType : Swift.Hashable {}
extension TelegramCore.TerminateSessionError : Swift.Equatable {}
extension TelegramCore.TerminateSessionError : Swift.Hashable {}
extension TelegramCore.UpadteAuthorizationTTLError : Swift.Equatable {}
extension TelegramCore.UpadteAuthorizationTTLError : Swift.Hashable {}
extension TelegramCore.UpdateSessionError : Swift.Equatable {}
extension TelegramCore.UpdateSessionError : Swift.Hashable {}
extension TelegramCore.SaveSecureIdValueError : Swift.Equatable {}
extension TelegramCore.SaveSecureIdValueError : Swift.Hashable {}
extension TelegramCore.DeleteSecureIdValueError : Swift.Equatable {}
extension TelegramCore.DeleteSecureIdValueError : Swift.Hashable {}
extension TelegramCore.GetAllSecureIdValuesError : Swift.Equatable {}
extension TelegramCore.GetAllSecureIdValuesError : Swift.Hashable {}
extension TelegramCore.AddContactError : Swift.Equatable {}
extension TelegramCore.AddContactError : Swift.Hashable {}
extension TelegramCore.AcceptAndShareContactError : Swift.Equatable {}
extension TelegramCore.AcceptAndShareContactError : Swift.Hashable {}
extension TelegramCore.BlockedPeersContextAddError : Swift.Equatable {}
extension TelegramCore.BlockedPeersContextAddError : Swift.Hashable {}
extension TelegramCore.BlockedPeersContextRemoveError : Swift.Equatable {}
extension TelegramCore.BlockedPeersContextRemoveError : Swift.Hashable {}
extension TelegramCore.TelegramMediaWebFileDecodingError : Swift.Equatable {}
extension TelegramCore.TelegramMediaWebFileDecodingError : Swift.Hashable {}
extension TelegramCore.MediaResourceStatsCategory : Swift.Equatable {}
extension TelegramCore.MediaResourceStatsCategory : Swift.Hashable {}
extension TelegramCore.GetCurrentGroupCallError : Swift.Equatable {}
extension TelegramCore.GetCurrentGroupCallError : Swift.Hashable {}
extension TelegramCore.CreateGroupCallError : Swift.Equatable {}
extension TelegramCore.CreateGroupCallError : Swift.Hashable {}
extension TelegramCore.StartScheduledGroupCallError : Swift.Equatable {}
extension TelegramCore.StartScheduledGroupCallError : Swift.Hashable {}
extension TelegramCore.ToggleScheduledGroupCallSubscriptionError : Swift.Equatable {}
extension TelegramCore.ToggleScheduledGroupCallSubscriptionError : Swift.Hashable {}
extension TelegramCore.UpdateGroupCallJoinAsPeerError : Swift.Equatable {}
extension TelegramCore.UpdateGroupCallJoinAsPeerError : Swift.Hashable {}
extension TelegramCore.GetGroupCallParticipantsError : Swift.Equatable {}
extension TelegramCore.GetGroupCallParticipantsError : Swift.Hashable {}
extension TelegramCore.JoinGroupCallError : Swift.Equatable {}
extension TelegramCore.JoinGroupCallError : Swift.Hashable {}
extension TelegramCore.LeaveGroupCallAsScreencastError : Swift.Equatable {}
extension TelegramCore.LeaveGroupCallAsScreencastError : Swift.Hashable {}
extension TelegramCore.LeaveGroupCallError : Swift.Equatable {}
extension TelegramCore.LeaveGroupCallError : Swift.Hashable {}
extension TelegramCore.StopGroupCallError : Swift.Equatable {}
extension TelegramCore.StopGroupCallError : Swift.Hashable {}
extension TelegramCore.GroupCallParticipantsContext.Update.StateUpdate.ParticipantUpdate.ParticipationStatusChange : Swift.Equatable {}
extension TelegramCore.GroupCallParticipantsContext.Update.StateUpdate.ParticipantUpdate.ParticipationStatusChange : Swift.Hashable {}
extension TelegramCore.InviteToGroupCallError : Swift.Equatable {}
extension TelegramCore.InviteToGroupCallError : Swift.Hashable {}
extension TelegramCore.EditGroupCallTitleError : Swift.Equatable {}
extension TelegramCore.EditGroupCallTitleError : Swift.Hashable {}
extension TelegramCore.GetGroupCallStreamCredentialsError : Swift.Equatable {}
extension TelegramCore.GetGroupCallStreamCredentialsError : Swift.Hashable {}
extension TelegramCore.UpdatePeerAllowedReactionsError : Swift.Equatable {}
extension TelegramCore.UpdatePeerAllowedReactionsError : Swift.Hashable {}
extension TelegramCore.AccountServiceTaskMasterMode : Swift.Equatable {}
extension TelegramCore.AccountServiceTaskMasterMode : Swift.Hashable {}
extension TelegramCore.AuthorizationCodeVerificationError : Swift.Equatable {}
extension TelegramCore.AuthorizationCodeVerificationError : Swift.Hashable {}
extension TelegramCore.AuthorizationSendEmailCodeError : Swift.Equatable {}
extension TelegramCore.AuthorizationSendEmailCodeError : Swift.Hashable {}
extension TelegramCore.AuthorizationEmailVerificationError : Swift.Equatable {}
extension TelegramCore.AuthorizationEmailVerificationError : Swift.Hashable {}
extension TelegramCore.AuthorizationPasswordVerificationError : Swift.Equatable {}
extension TelegramCore.AuthorizationPasswordVerificationError : Swift.Hashable {}
extension TelegramCore.PasswordRecoveryRequestError : Swift.Equatable {}
extension TelegramCore.PasswordRecoveryRequestError : Swift.Hashable {}
extension TelegramCore.PasswordRecoveryError : Swift.Equatable {}
extension TelegramCore.PasswordRecoveryError : Swift.Hashable {}
extension TelegramCore.AccountResetError : Swift.Equatable {}
extension TelegramCore.AccountResetError : Swift.Hashable {}
extension TelegramCore.SignUpError : Swift.Equatable {}
extension TelegramCore.SignUpError : Swift.Hashable {}
extension TelegramCore.AuthorizationStateReset : Swift.Equatable {}
extension TelegramCore.AuthorizationStateReset : Swift.Hashable {}
extension TelegramCore.SecureIdGender : Swift.Equatable {}
extension TelegramCore.SecureIdGender : Swift.Hashable {}
extension TelegramCore.RequestSimpleWebViewError : Swift.Equatable {}
extension TelegramCore.RequestSimpleWebViewError : Swift.Hashable {}
extension TelegramCore.KeepWebViewError : Swift.Equatable {}
extension TelegramCore.KeepWebViewError : Swift.Hashable {}
extension TelegramCore.RequestWebViewError : Swift.Equatable {}
extension TelegramCore.RequestWebViewError : Swift.Hashable {}
extension TelegramCore.SendWebViewDataError : Swift.Equatable {}
extension TelegramCore.SendWebViewDataError : Swift.Hashable {}
extension TelegramCore.DownloadLocalizationError : Swift.Equatable {}
extension TelegramCore.DownloadLocalizationError : Swift.Hashable {}
extension TelegramCore.DownloadAndApplyLocalizationError : Swift.Equatable {}
extension TelegramCore.DownloadAndApplyLocalizationError : Swift.Hashable {}
extension TelegramCore.SparseMessageList.LoadHoleDirection : Swift.Equatable {}
extension TelegramCore.SparseMessageList.LoadHoleDirection : Swift.Hashable {}
extension TelegramCore.StandaloneUploadMediaError : Swift.Equatable {}
extension TelegramCore.StandaloneUploadMediaError : Swift.Hashable {}
extension TelegramCore.PendingMessageFailureReason : Swift.Equatable {}
extension TelegramCore.PendingMessageFailureReason : Swift.Hashable {}
extension TelegramCore.StandaloneSendMessageError : Swift.Equatable {}
extension TelegramCore.StandaloneSendMessageError : Swift.Hashable {}
extension TelegramCore.ChannelHistoryAvailabilityError : Swift.Equatable {}
extension TelegramCore.ChannelHistoryAvailabilityError : Swift.Hashable {}
extension TelegramCore.UploadPeerPhotoError : Swift.Equatable {}
extension TelegramCore.UploadPeerPhotoError : Swift.Hashable {}
extension TelegramCore.SetCustomPeerPhotoMode : Swift.Equatable {}
extension TelegramCore.SetCustomPeerPhotoMode : Swift.Hashable {}
